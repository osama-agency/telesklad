import { TelegramBotWorker } from './services/TelegramBotWorker';

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ webhook —Ä–µ–∂–∏–º
 */
export async function initializeTelegramBot(): Promise<void> {
  try {
    console.log('ü§ñ Initializing Telegram bot...');
    
    const worker = TelegramBotWorker.getInstance();
    await worker.initialize();
    
    console.log('‚úÖ Telegram bot initialized successfully in webhook mode');
  } catch (error) {
    console.error('‚ùå Failed to initialize Telegram bot:', error);
    // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å—Ç–æ–∏—Ç —É–≤–µ–¥–æ–º–∏—Ç—å
    if (process.env.NODE_ENV === 'production') {
      console.error('üö® Bot initialization failed in production!');
    }
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
 */
export async function setupWebhookOnDeploy(): Promise<void> {
  const webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
  
  if (!webhookUrl) {
    console.warn('‚ö†Ô∏è TELEGRAM_WEBHOOK_URL not set, skipping webhook setup');
    return;
  }

  try {
    console.log('üîß Setting up webhook on deploy...');
    
    const worker = TelegramBotWorker.getInstance();
    await worker.initialize();
    
    const result = await worker.setupWebhook(
      webhookUrl, 
      process.env.TELEGRAM_WEBHOOK_SECRET
    );
    
    if (result) {
      console.log('‚úÖ Webhook setup completed on deploy');
    } else {
      console.error('‚ùå Failed to setup webhook on deploy');
    }
  } catch (error) {
    console.error('‚ùå Error setting up webhook on deploy:', error);
  }
}