import { OrderSyncService } from './orderSync';

class AutoSyncService {
  private static instance: AutoSyncService;
  private syncInterval: NodeJS.Timeout | null = null;
  private lastLoginSync: Date | null = null;
  private lastHourlySync: Date | null = null;

  private constructor() {}

  static getInstance(): AutoSyncService {
    if (!AutoSyncService.instance) {
      AutoSyncService.instance = new AutoSyncService();
    }
    return AutoSyncService.instance;
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π)
  async syncOnLogin(): Promise<void> {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π)...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
      if (this.lastLoginSync && Date.now() - this.lastLoginSync.getTime() < 30 * 60 * 1000) {
        console.log('‚è≠Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ–¥–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å)');
        return;
      }

      const response = await fetch('/api/orders/sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          syncType: 'login',
          days: 10
        })
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);
        this.lastLoginSync = new Date();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', response.statusText);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
  async syncHourly(): Promise<void> {
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–æ—á–∞—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)...');

      const response = await fetch('/api/orders/sync', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          syncType: 'hourly',
          hours: 1
        })
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ –ü–æ—á–∞—Å–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);
        this.lastHourlySync = new Date();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—á–∞—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', response.statusText);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—á–∞—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  startAutoSync(): void {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    this.stopAutoSync();

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ
    this.syncOnLogin();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.syncInterval = setInterval(() => {
      this.syncHourly();
    }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å

    console.log('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  stopAutoSync(): void {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
      console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  getSyncStatus() {
    return {
      isRunning: this.syncInterval !== null,
      lastLoginSync: this.lastLoginSync,
      lastHourlySync: this.lastHourlySync,
      nextHourlySync: this.syncInterval ? new Date(Date.now() + 60 * 60 * 1000) : null
    };
  }
}

export const autoSyncService = AutoSyncService.getInstance(); 