import * as cron from 'node-cron';
import { prisma } from '@/libs/prismaDb';
import { NotificationExecutorService } from '../services/notification-executor.service';
import { NotificationSchedulerService } from '../services/notification-scheduler.service';
import { TelegramTokenService } from '../services/telegram-token.service';

export class NotificationCronService {

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö CRON –∑–∞–¥–∞—á
  static initializeNotificationCron() {
    console.log('üöÄ Initializing notification CRON jobs...');

    // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
    cron.schedule('* * * * *', async () => {
      await this.processScheduledJobs();
    });

    // –ö–∞–∂–¥—ã–π —á–∞—Å –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    cron.schedule('0 * * * *', async () => {
      await this.cleanupOldJobs();
    });

    // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É
    cron.schedule('0 10 * * *', async () => {
      await this.sendDailyStats();
    });

    console.log('‚úÖ Notification CRON jobs initialized');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
  private static async processScheduledJobs() {
    try {
      const now = new Date();
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
      const readyJobs = await (prisma as any).notification_jobs.findMany({
        where: {
          status: 'pending',
          scheduled_at: {
            lte: now
          }
        },
        orderBy: {
          scheduled_at: 'asc'
        },
        take: 10 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–¥–∞—á –∑–∞ —Ä–∞–∑
      });

      if (readyJobs.length === 0) {
        return; // –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      }

      console.log(`üìã Found ${readyJobs.length} ready jobs to process`);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const promises = readyJobs.map((job: any) => 
        this.processJob(job).catch((error: any) => {
          console.error(`‚ùå Error processing job ${job.id}:`, error);
        })
      );

      await Promise.allSettled(promises);
      
    } catch (error) {
      console.error('‚ùå Error in processScheduledJobs:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
  private static async processJob(job: any) {
    try {
      console.log(`üîÑ Processing job ${job.id} (${job.job_type})`);
      
      await NotificationExecutorService.executeJob(job);
      
    } catch (error) {
      console.error(`‚ùå Failed to process job ${job.id}:`, error);
      
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–ø–∞–ª–∞ 3 —Ä–∞–∑–∞, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ—É–¥–∞—á–Ω—É—é
      if (job.retry_count >= 2) {
        await (prisma as any).notification_jobs.update({
          where: { id: job.id },
          data: { 
            status: 'failed',
            executed_at: new Date()
          }
        });
        console.log(`üíÄ Job ${job.id} marked as permanently failed after 3 attempts`);
      } else {
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
        await (prisma as any).notification_jobs.update({
          where: { id: job.id },
          data: { 
            status: 'pending',
            scheduled_at: new Date(Date.now() + 5 * 60 * 1000), // +5 –º–∏–Ω—É—Ç
            retry_count: { increment: 1 }
          }
        });
        console.log(`üîÑ Job ${job.id} rescheduled for retry in 5 minutes`);
      }
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
  private static async cleanupOldJobs() {
    try {
      console.log('üßπ Running cleanup of old notification jobs...');
      
      const cleanedCount = await NotificationSchedulerService.cleanupOldJobs();
      
      if (cleanedCount > 0) {
        console.log(`‚úÖ Cleaned up ${cleanedCount} old jobs`);
      }
      
    } catch (error) {
      console.error('‚ùå Error in cleanupOldJobs:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  private static async sendDailyStats() {
    try {
      console.log('üìä Sending daily notification stats...');
      
      const stats = await NotificationSchedulerService.getJobsStats();
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const summary = {
        total: 0,
        pending: 0,
        executed: 0,
        failed: 0,
        cancelled: 0,
        byType: {} as Record<string, number>
      };

      stats.forEach((stat: any) => {
        summary.total += stat._count;
        summary[stat.status as keyof typeof summary] += stat._count;
        summary.byType[stat.job_type] = (summary.byType[stat.job_type] || 0) + stat._count;
      });

      const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ —Å—É—Ç–∫–∏:

üìà –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${summary.total}
‚è≥ –û–∂–∏–¥–∞—é—Ç: ${summary.pending}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${summary.executed}
‚ùå –û—à–∏–±–æ–∫: ${summary.failed}
üö´ –û—Ç–º–µ–Ω–µ–Ω–æ: ${summary.cancelled}

üìã –ü–æ —Ç–∏–ø–∞–º:
${Object.entries(summary.byType).map(([type, count]) => `‚Ä¢ ${type}: ${count}`).join('\n')}

üïê ${new Date().toLocaleString('ru-RU')}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ID –∞–¥–º–∏–Ω–∞)
      const adminTelegramId = process.env.ADMIN_TELEGRAM_ID;
      if (adminTelegramId) {
        await this.sendTelegramMessage(adminTelegramId, message);
      }
      
    } catch (error) {
      console.error('‚ùå Error in sendDailyStats:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ webapp –±–æ—Ç–∞ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  private static async getWebappBotToken(): Promise<string | null> {
    return await TelegramTokenService.getWebappBotToken();
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  private static async sendTelegramMessage(telegramId: string, message: string) {
    try {
      const webappBotToken = await this.getWebappBotToken();
      if (!webappBotToken) {
        console.error('‚ùå WEBAPP_TELEGRAM_BOT_TOKEN not found in database or environment');
        return;
      }

      const url = `https://api.telegram.org/bot${webappBotToken}/sendMessage`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: telegramId,
          text: message,
          parse_mode: 'HTML'
        }),
      });

      if (response.ok) {
        console.log('üì± Stats message sent to admin');
      } else {
        console.error('‚ùå Failed to send stats message');
      }
      
    } catch (error) {
      console.error('‚ùå Error sending telegram message:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  static async runManualJobProcessing() {
    console.log('üîß Running manual job processing...');
    await this.processScheduledJobs();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º
  static async getJobsStatus() {
    try {
      const stats = await (prisma as any).notification_jobs.groupBy({
        by: ['status', 'job_type'],
        _count: true
      });

      const totalJobs = await (prisma as any).notification_jobs.count();
      
      const pendingJobs = await (prisma as any).notification_jobs.findMany({
        where: { status: 'pending' },
        orderBy: { scheduled_at: 'asc' },
        take: 5,
        select: {
          id: true,
          job_type: true,
          scheduled_at: true,
          user_id: true
        }
      });

      return {
        stats,
        totalJobs,
        nextJobs: pendingJobs
      };
      
    } catch (error) {
      console.error('‚ùå Error getting jobs status:', error);
      throw error;
    }
  }
} 