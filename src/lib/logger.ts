/**
 * –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ-–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç console.log –≤ production —Ä–µ–∂–∏–º–µ
 */

const isDevelopment = process.env.NODE_ENV === 'development';

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
type ConsoleMethod = 'log' | 'warn' | 'error' | 'info' | 'debug';

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–≥–≥–µ—Ä - —É–±–∏—Ä–∞–µ—Ç –ª–æ–≥–∏ –≤ production
export const logger = {
  log: (...args: any[]) => {
    if (isDevelopment) {
      console.log(...args);
    }
  },
  
  warn: (...args: any[]) => {
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞
    console.warn(...args);
  },
  
  error: (...args: any[]) => {
    // –û—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞
    console.error(...args);
  },
  
  info: (...args: any[]) => {
    if (isDevelopment) {
      console.info(...args);
    }
  },
  
  debug: (...args: any[]) => {
    if (isDevelopment) {
      console.debug(...args);
    }
  },
  
  // –ì—Ä—É–ø–ø–æ–≤—ã–µ –ª–æ–≥–∏
  group: (...args: any[]) => {
    if (isDevelopment) {
      console.group(...args);
    }
  },
  
  groupEnd: () => {
    if (isDevelopment) {
      console.groupEnd();
    }
  },
  
  // –¢–∞–±–ª–∏—Ü—ã
  table: (data: any) => {
    if (isDevelopment) {
      console.table(data);
    }
  },
  
  // –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
  trace: (...args: any[]) => {
    if (isDevelopment) {
      console.trace(...args);
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
export const logAPIRequest = (method: string, url: string, data?: any) => {
  if (isDevelopment) {
    console.group(`üåê API ${method.toUpperCase()} ${url}`);
    if (data) {
      console.log('Request Data:', data);
    }
    console.groupEnd();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –æ—Ç–≤–µ—Ç–æ–≤
export const logAPIResponse = (url: string, status: number, data?: any) => {
  if (isDevelopment) {
    const statusEmoji = status >= 200 && status < 300 ? '‚úÖ' : '‚ùå';
    console.group(`${statusEmoji} API Response ${status} ${url}`);
    if (data) {
      console.log('Response Data:', data);
    }
    console.groupEnd();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
export const logError = (error: Error, context?: string) => {
  const errorMessage = `‚ùå Error${context ? ` in ${context}` : ''}: ${error.message}`;
  console.error(errorMessage);
  
  if (isDevelopment) {
    console.error('Stack trace:', error.stack);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const logPerformance = (label: string, duration: number) => {
  if (isDevelopment) {
    const emoji = duration < 100 ? 'üöÄ' : duration < 500 ? '‚ö°' : 'üêå';
    console.log(`${emoji} Performance ${label}: ${duration.toFixed(2)}ms`);
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
export const measureTime = <T>(label: string, fn: () => T): T => {
  const start = performance.now();
  const result = fn();
  const duration = performance.now() - start;
  logPerformance(label, duration);
  return result;
};

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
export const measureTimeAsync = async <T>(label: string, fn: () => Promise<T>): Promise<T> => {
  const start = performance.now();
  const result = await fn();
  const duration = performance.now() - start;
  logPerformance(label, duration);
  return result;
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export default logger; 