// –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö TeleSklad
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Map –¥–ª—è in-memory –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å TTL

interface CacheEntry<T> {
  data: T;
  timestamp: number;
  ttl: number; // –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

interface CacheOptions {
  ttl?: number; // –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
  maxSize?: number; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 –∑–∞–ø–∏—Å–µ–π)
}

class AnalyticsCache {
  private cache = new Map<string, CacheEntry<any>>();
  private defaultTTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
  private maxSize = 100;

  constructor(options: CacheOptions = {}) {
    this.defaultTTL = options.ttl || this.defaultTTL;
    this.maxSize = options.maxSize || this.maxSize;
    
    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    setInterval(() => this.cleanup(), 60 * 1000);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
   */
  get<T>(key: string): T | null {
    const entry = this.cache.get(key);
    
    if (!entry) {
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ TTL
    if (Date.now() - entry.timestamp > entry.ttl) {
      this.cache.delete(key);
      return null;
    }

    return entry.data;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
   */
  set<T>(key: string, data: T, ttl?: number): void {
    // –ï—Å–ª–∏ –∫—ç—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    if (this.cache.size >= this.maxSize) {
      this.evictOldest();
    }

    const entry: CacheEntry<T> = {
      data,
      timestamp: Date.now(),
      ttl: ttl || this.defaultTTL
    };

    this.cache.set(key, entry);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞
   */
  delete(key: string): boolean {
    return this.cache.delete(key);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
   */
  clear(): void {
    this.cache.clear();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
   */
  size(): number {
    return this.cache.size;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getStats() {
    const now = Date.now();
    let validEntries = 0;
    let expiredEntries = 0;

    for (const [key, entry] of this.cache.entries()) {
      if (now - entry.timestamp <= entry.ttl) {
        validEntries++;
      } else {
        expiredEntries++;
      }
    }

    return {
      totalEntries: this.cache.size,
      validEntries,
      expiredEntries,
      maxSize: this.maxSize,
      defaultTTL: this.defaultTTL
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
   */
  private cleanup(): void {
    const now = Date.now();
    const keysToDelete: string[] = [];

    for (const [key, entry] of this.cache.entries()) {
      if (now - entry.timestamp > entry.ttl) {
        keysToDelete.push(key);
      }
    }

    keysToDelete.forEach(key => this.cache.delete(key));

    if (keysToDelete.length > 0) {
      console.log(`üßπ Analytics cache: cleaned up ${keysToDelete.length} expired entries`);
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏
   */
  private evictOldest(): void {
    let oldestKey: string | null = null;
    let oldestTimestamp = Date.now();

    for (const [key, entry] of this.cache.entries()) {
      if (entry.timestamp < oldestTimestamp) {
        oldestTimestamp = entry.timestamp;
        oldestKey = key;
      }
    }

    if (oldestKey) {
      this.cache.delete(oldestKey);
      console.log(`üóëÔ∏è Analytics cache: evicted oldest entry ${oldestKey}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getOrCompute<T>(
    key: string, 
    computeFn: () => Promise<T>, 
    ttl?: number
  ): Promise<T> {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    const cached = this.get<T>(key);
    if (cached !== null) {
      console.log(`üì¶ Analytics cache: HIT for ${key}`);
      return cached;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    console.log(`üîÑ Analytics cache: MISS for ${key}, computing...`);
    const startTime = Date.now();
    
    try {
      const result = await computeFn();
      const computeTime = Date.now() - startTime;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.set(key, result, ttl);
      
      console.log(`‚úÖ Analytics cache: computed ${key} in ${computeTime}ms`);
      return result;
    } catch (error) {
      console.error(`‚ùå Analytics cache: failed to compute ${key}:`, error);
      throw error;
    }
  }

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
   */
  invalidatePattern(pattern: string): number {
    const regex = new RegExp(pattern);
    const keysToDelete: string[] = [];

    for (const key of this.cache.keys()) {
      if (regex.test(key)) {
        keysToDelete.push(key);
      }
    }

    keysToDelete.forEach(key => this.cache.delete(key));
    
    if (keysToDelete.length > 0) {
      console.log(`üîÑ Analytics cache: invalidated ${keysToDelete.length} entries matching pattern ${pattern}`);
    }

    return keysToDelete.length;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
export const analyticsCache = new AnalyticsCache({
  ttl: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  maxSize: 200 // –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
export const AnalyticsCacheHelpers = {
  /**
   * –ö—ç—à –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  getProductsAnalytics: (period: number) => 
    analyticsCache.getOrCompute(
      `products-analytics-${period}`,
      async () => {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∏–∑ API
        throw new Error('Should be called from API with actual compute function');
      },
      10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    ),

  /**
   * –ö—ç—à –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫
   */
  getPurchases: (page: number, limit: number, filters?: string) => 
    analyticsCache.getOrCompute(
      `purchases-${page}-${limit}-${filters || 'all'}`,
      async () => {
        throw new Error('Should be called from API with actual compute function');
      },
      2 * 60 * 1000 // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    ),

  /**
   * –ö—ç—à –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
   */
  getExchangeRate: (currency: string) => 
    analyticsCache.getOrCompute(
      `exchange-rate-${currency}`,
      async () => {
        throw new Error('Should be called from API with actual compute function');
      },
      30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    ),

  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫—ç—à–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
   */
  invalidateOnPurchaseUpdate: () => {
    analyticsCache.invalidatePattern('^purchases-');
    analyticsCache.invalidatePattern('^products-analytics-');
    console.log('üîÑ Invalidated purchase-related caches');
  },

  invalidateOnProductUpdate: () => {
    analyticsCache.invalidatePattern('^products-analytics-');
    console.log('üîÑ Invalidated product-related caches');
  },

  invalidateOnOrderUpdate: () => {
    analyticsCache.invalidatePattern('^products-analytics-');
    console.log('üîÑ Invalidated order-related caches');
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API
export default analyticsCache; 