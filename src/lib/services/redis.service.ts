import { Redis } from '@upstash/redis';
import { Redis as IORedis } from 'ioredis';

/**
 * Centralized Redis service for caching and queues
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π Redis (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏ Upstash Redis (fallback)
 */
export class RedisService {
  private static redis: Redis | IORedis | null = null;
  private static isInitialized = false;
  private static isLocalRedis = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  static async initialize(): Promise<void> {
    if (this.isInitialized) return;

    try {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ª–æ–∫–∞–ª—å–Ω—ã–π Redis
      if (process.env.REDIS_URL || (process.env.REDIS_HOST && process.env.REDIS_PORT)) {
        const redisUrl = process.env.REDIS_URL || `redis://${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`;
        
        this.redis = new IORedis(redisUrl, {
          maxRetriesPerRequest: 3,
          lazyConnect: true,
          connectTimeout: 5000,
          commandTimeout: 5000
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await this.redis.ping();
        this.isLocalRedis = true;
        console.log('‚úÖ Redis (Local) initialized successfully');
      }
      // Fallback: Upstash Redis
      else if (process.env.UPSTASH_REDIS_REST_URL && process.env.UPSTASH_REDIS_REST_TOKEN) {
        this.redis = new Redis({
          url: process.env.UPSTASH_REDIS_REST_URL,
          token: process.env.UPSTASH_REDIS_REST_TOKEN,
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await this.redis.ping();
        this.isLocalRedis = false;
        console.log('‚úÖ Redis (Upstash) initialized successfully');
      } 
      else {
        console.log('‚ö†Ô∏è Redis credentials not found - using fallback mode');
        console.log('‚ÑπÔ∏è Add REDIS_URL or UPSTASH_REDIS_REST_URL to enable Redis');
        this.redis = null;
        this.isInitialized = true;
        return;
      }

      this.isInitialized = true;
      
    } catch (error) {
      console.error('‚ùå Failed to initialize Redis:', error);
      console.log('‚ö†Ô∏è Running without Redis - caching disabled');
      this.redis = null;
      this.isInitialized = true;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Redis
   */
  static async getInstance(): Promise<Redis | IORedis | null> {
    if (!this.isInitialized) {
      await this.initialize();
    }
    return this.redis;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Redis (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  static getClient(): Redis | IORedis | null {
    return this.redis;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
   */
  static isAvailable(): boolean {
    return this.redis !== null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ Redis (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏–ª–∏ Upstash)
   */
  static isLocal(): boolean {
    return this.isLocalRedis;
  }

  // === –ö–≠–®–ò–†–û–í–ê–ù–ò–ï ===

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
   */
  static async setCache(key: string, value: any, ttl: number = 3600): Promise<boolean> {
    try {
      const redis = await this.getInstance();
      if (!redis) return false;

      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π BigInt –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
      const serializedValue = JSON.stringify(value, (key, val) => {
        if (typeof val === 'bigint') {
          return val.toString() + 'n';
        }
        return val;
      });

      if (this.isLocalRedis) {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π Redis
        await (redis as IORedis).setex(key, ttl, serializedValue);
      } else {
        // Upstash Redis
        await (redis as Redis).setex(key, ttl, serializedValue);
      }
      
      return true;
    } catch (error) {
      console.error('Redis setCache error:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
   */
  static async getCache<T>(key: string): Promise<T | null> {
    try {
      const redis = await this.getInstance();
      if (!redis) return null;

      let data: any;
      
      if (this.isLocalRedis) {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π Redis
        data = await (redis as IORedis).get(key);
      } else {
        // Upstash Redis
        data = await (redis as Redis).get(key);
      }
      
      if (!data) return null;

      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π BigInt
      if (typeof data === 'string') {
        return JSON.parse(data, (key, val) => {
          if (typeof val === 'string' && val.endsWith('n') && /^\d+n$/.test(val)) {
            return BigInt(val.slice(0, -1));
          }
          return val;
        });
      } else {
        // –£–∂–µ –æ–±—ä–µ–∫—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –¥–ª—è Upstash)
        return data as T;
      }
    } catch (error) {
      console.error('Redis getCache error:', error);
      return null;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫—ç—à–∞
   */
  static async deleteCache(key: string): Promise<boolean> {
    try {
      const redis = await this.getInstance();
      if (!redis) return false;

      if (this.isLocalRedis) {
        await (redis as IORedis).del(key);
      } else {
        await (redis as Redis).del(key);
      }
      
      return true;
    } catch (error) {
      console.error('Redis deleteCache error:', error);
      return false;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
   */
  static async clearCachePattern(pattern: string): Promise<boolean> {
    try {
      const redis = await this.getInstance();
      if (!redis) return false;

      let keys: string[] = [];
      
      if (this.isLocalRedis) {
        keys = await (redis as IORedis).keys(pattern);
        if (keys.length > 0) {
          await (redis as IORedis).del(...keys);
        }
      } else {
        keys = await (redis as Redis).keys(pattern);
        if (keys.length > 0) {
          await (redis as Redis).del(...keys);
        }
      }
      
      return true;
    } catch (error) {
      console.error('Redis clearCachePattern error:', error);
      return false;
    }
  }

  // === –ü–†–û–°–¢–´–ï –û–ß–ï–†–ï–î–ò (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–´ –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û REDIS) ===

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
   */
  static async addToQueue(queueName: string, job: any, delay: number = 0): Promise<boolean> {
    try {
      const redis = await this.getInstance();
      if (!redis) return false;

      const jobData = {
        id: Date.now() + Math.random(),
        data: job,
        createdAt: new Date().toISOString(),
        delay
      };

      const serializedJob = JSON.stringify(jobData);

      if (this.isLocalRedis) {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π Redis - –ø—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å FIFO
        await (redis as IORedis).rpush(queueName, serializedJob);
      } else {
        // Upstash Redis - –∏—Å–ø–æ–ª—å–∑—É–µ–º sorted set –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        await (redis as Redis).zadd(
          `queue:${queueName}`,
          { score: Date.now() + delay * 1000, member: serializedJob }
        );
      }

      console.log(`üì• Job added to queue ${queueName}, delay: ${delay}s`);
      return true;
    } catch (error) {
      console.error('Redis addToQueue error:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  static async getQueueJobs(queueName: string, limit: number = 10): Promise<any[]> {
    try {
      const redis = await this.getInstance();
      if (!redis) return [];

      let jobs: string[] = [];

      if (this.isLocalRedis) {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π Redis - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        jobs = await (redis as IORedis).lrange(queueName, 0, limit - 1);
      } else {
        // Upstash Redis - –ø–æ–ª—É—á–∞–µ–º –∏–∑ sorted set
        const now = Date.now();
                 const result = await (redis as Redis).zrange(
           `queue:${queueName}`,
           0,
           now,
           { byScore: true, offset: 0, count: limit }
         );
         jobs = Array.isArray(result) ? result as string[] : [];
      }

      return jobs.map((jobStr, index) => {
        try {
          const jobData = JSON.parse(jobStr);
          return {
            id: jobData.id || `job_${Date.now()}_${index}`,
            data: jobData.data || jobData,
            createdAt: jobData.createdAt,
            originalString: jobStr
          };
        } catch (error) {
          console.error('Failed to parse job:', error);
          return null;
        }
      }).filter(Boolean);
      
    } catch (error) {
      console.error('Redis getQueueJobs error:', error);
      return [];
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  static async removeFromQueue(queueName: string, jobData: any): Promise<boolean> {
    try {
      const redis = await this.getInstance();
      if (!redis) return false;

      if (this.isLocalRedis) {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π Redis - —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (FIFO)
        await (redis as IORedis).lpop(queueName);
      } else {
        // Upstash Redis - —É–¥–∞–ª—è–µ–º –∏–∑ sorted set
        const jobString = jobData.originalString || JSON.stringify(jobData);
        await (redis as Redis).zrem(`queue:${queueName}`, jobString);
      }

      return true;
    } catch (error) {
      console.error('Redis removeFromQueue error:', error);
      return false;
    }
  }

  // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async setUserState(userId: string, state: any, ttl: number = 1800): Promise<boolean> {
    return await this.setCache(`user_state:${userId}`, state, ttl);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserState<T>(userId: string): Promise<T | null> {
    return await this.getCache<T>(`user_state:${userId}`);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async clearUserState(userId: string): Promise<boolean> {
    return await this.deleteCache(`user_state:${userId}`);
  }

  // === –°–ß–ï–¢–ß–ò–ö–ò ===

  /**
   * –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
   */
  static async increment(key: string, ttl?: number): Promise<number | null> {
    try {
      const redis = await this.getInstance();
      if (!redis) return null;

      let result: number;
      
      if (this.isLocalRedis) {
        result = await (redis as IORedis).incr(key);
        if (ttl) {
          await (redis as IORedis).expire(key, ttl);
        }
      } else {
        result = await (redis as Redis).incr(key);
        if (ttl) {
          await (redis as Redis).expire(key, ttl);
        }
      }

      return result;
    } catch (error) {
      console.error('Redis increment error:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
   */
  static async getCount(key: string): Promise<number> {
    try {
      const redis = await this.getInstance();
      if (!redis) return 0;

      let result: string | null;
      
      if (this.isLocalRedis) {
        result = await (redis as IORedis).get(key);
      } else {
        result = await (redis as Redis).get(key);
      }

      return result ? parseInt(result, 10) : 0;
    } catch (error) {
      console.error('Redis getCount error:', error);
      return 0;
    }
  }

  // === RATE LIMITING ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  static async checkRateLimit(
    key: string,
    maxRequests: number,
    windowSeconds: number
  ): Promise<{ allowed: boolean; remaining: number; resetTime: number }> {
    try {
      const redis = await this.getInstance();
      if (!redis) {
        return { allowed: true, remaining: maxRequests, resetTime: Date.now() + windowSeconds * 1000 };
      }

      const now = Date.now();
      const windowStart = now - windowSeconds * 1000;
      const rateLimitKey = `rate_limit:${key}`;

      let count: number;
      
      if (this.isLocalRedis) {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π Redis - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫ —Å TTL
        const currentCount = await (redis as IORedis).get(rateLimitKey);
        count = currentCount ? parseInt(currentCount, 10) : 0;
        
        if (count >= maxRequests) {
          const ttl = await (redis as IORedis).ttl(rateLimitKey);
          return {
            allowed: false,
            remaining: 0,
            resetTime: now + ttl * 1000
          };
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        const newCount = await (redis as IORedis).incr(rateLimitKey);
        if (newCount === 1) {
          await (redis as IORedis).expire(rateLimitKey, windowSeconds);
        }
        
        return {
          allowed: true,
          remaining: Math.max(0, maxRequests - newCount),
          resetTime: now + windowSeconds * 1000
        };
      } else {
        // Upstash Redis - –∏—Å–ø–æ–ª—å–∑—É–µ–º sorted set
        await (redis as Redis).zremrangebyscore(rateLimitKey, 0, windowStart);
        count = await (redis as Redis).zcard(rateLimitKey);

        if (count >= maxRequests) {
          return {
            allowed: false,
            remaining: 0,
            resetTime: now + windowSeconds * 1000
          };
        }

        await (redis as Redis).zadd(rateLimitKey, { score: now, member: now });
        await (redis as Redis).expire(rateLimitKey, windowSeconds);

        return {
          allowed: true,
          remaining: Math.max(0, maxRequests - count - 1),
          resetTime: now + windowSeconds * 1000
        };
      }
    } catch (error) {
      console.error('Redis checkRateLimit error:', error);
      return { allowed: true, remaining: maxRequests, resetTime: Date.now() + windowSeconds * 1000 };
    }
  }

  // === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis
   */
  static async healthCheck(): Promise<{ status: string; latency?: number; error?: string }> {
    try {
      const redis = await this.getInstance();
      if (!redis) {
        return { status: 'unavailable' };
      }

      const start = Date.now();
      
      if (this.isLocalRedis) {
        await (redis as IORedis).ping();
      } else {
        await (redis as Redis).ping();
      }
      
      const latency = Date.now() - start;

      return {
        status: 'healthy',
        latency
      };
    } catch (error) {
      return {
        status: 'error',
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –î–ê–ù–ù–´–ï ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞
   */
  static async getUserData(userId: string): Promise<any> {
    return await this.getCache(`user:${userId}`);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à
   */
  static async setUserData(userId: string, userData: any): Promise<void> {
    await this.setCache(`user:${userId}`, userData, 3600); // 1 —á–∞—Å
  }
} 