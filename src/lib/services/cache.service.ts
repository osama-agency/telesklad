import { RedisService } from './redis.service';
import { prisma } from '@/libs/prismaDb';

/**
 * Service for caching frequently accessed data
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å fallback –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
export class CacheService {
  
  // === –ü–†–û–î–£–ö–¢–´ ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async getProducts(options: {
    showInWebapp?: boolean;
    categoryId?: number;
    search?: string;
    limit?: number;
    offset?: number;
  } = {}): Promise<any[]> {
    const cacheKey = `products:${JSON.stringify(options)}`;
    const cacheTtl = 300; // 5 –º–∏–Ω—É—Ç

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cached = await RedisService.getCache(cacheKey);
      if (cached) {
        console.log('üì¶ Products loaded from cache');
        return cached;
      }

      console.log('üîç Loading products from database');
      
      // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const where: any = {};
      
      if (options.showInWebapp !== undefined) {
        where.show_in_webapp = options.showInWebapp;
      }
      
      if (options.categoryId) {
        where.category_id = options.categoryId;
      }
      
      if (options.search) {
        where.OR = [
          { name: { contains: options.search, mode: 'insensitive' } },
          { description: { contains: options.search, mode: 'insensitive' } }
        ];
      }

      const products = await prisma.products.findMany({
        where,
        orderBy: { created_at: 'desc' },
        take: options.limit || 50,
        skip: options.offset || 0
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await RedisService.setCache(cacheKey, products, cacheTtl);
      
      return products;
    } catch (error) {
      console.error('‚ùå Error loading products:', error);
      return [] as any[];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async getProductById(id: number): Promise<any | null> {
    const cacheKey = `product:${id}`;
    const cacheTtl = 600; // 10 –º–∏–Ω—É—Ç

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cached = await RedisService.getCache(cacheKey);
      if (cached) {
        console.log(`üì¶ Product ${id} loaded from cache`);
        return cached;
      }

      console.log(`üîç Loading product ${id} from database`);
      
      const product = await prisma.products.findUnique({
        where: { id: BigInt(id) }
      });

      if (product) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await RedisService.setCache(cacheKey, product, cacheTtl);
      }
      
      return product;
    } catch (error) {
      console.error(`‚ùå Error loading product ${id}:`, error);
      return null;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  static async clearProductsCache(): Promise<void> {
    try {
      await RedisService.clearCachePattern('products:*');
      await RedisService.clearCachePattern('product:*');
      console.log('üßπ Products cache cleared');
    } catch (error) {
      console.error('‚ùå Error clearing products cache:', error);
    }
  }

  // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async getUserByTelegramId(tgId: string): Promise<any | null> {
    const cacheKey = `user:tg:${tgId}`;
    const cacheTtl = 300; // 5 –º–∏–Ω—É—Ç

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cached = await RedisService.getCache(cacheKey);
      if (cached) {
        console.log(`üë§ User ${tgId} loaded from cache`);
        return cached;
      }

      console.log(`üîç Loading user ${tgId} from database`);
      
      const user = await prisma.users.findUnique({
        where: { tg_id: BigInt(tgId) },
        include: {
          account_tiers: true
        }
      });

      if (user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await RedisService.setCache(cacheKey, user, cacheTtl);
      }
      
      return user;
    } catch (error) {
      console.error(`‚ùå Error loading user ${tgId}:`, error);
      return null;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à–µ
   */
  static async updateUserCache(user: any): Promise<void> {
    if (!user.tg_id) return;
    
    const cacheKey = `user:tg:${user.tg_id.toString()}`;
    await RedisService.setCache(cacheKey, user, 300);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async clearUserCache(tgId: string): Promise<void> {
    const cacheKey = `user:tg:${tgId}`;
    await RedisService.deleteCache(cacheKey);
  }

  // === –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async getBotSettings(): Promise<Record<string, string>> {
    const cacheKey = 'bot:settings';
    const cacheTtl = 600; // 10 –º–∏–Ω—É—Ç

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cached = await RedisService.getCache<Record<string, string>>(cacheKey);
      if (cached) {
        console.log('‚öôÔ∏è Bot settings loaded from cache');
        return cached;
      }

      console.log('üîç Loading bot settings from database');
      
      const settings = await prisma.settings.findMany();
      const settingsMap = settings.reduce((acc, setting) => {
        if (setting.variable && setting.value) {
          acc[setting.variable] = setting.value;
        }
        return acc;
      }, {} as Record<string, string>);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      await RedisService.setCache(cacheKey, settingsMap, cacheTtl);
      
      return settingsMap;
    } catch (error) {
      console.error('‚ùå Error loading bot settings:', error);
      return {} as Record<string, string>;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
   */
  static async clearBotSettingsCache(): Promise<void> {
    await RedisService.deleteCache('bot:settings');
    console.log('üßπ Bot settings cache cleared');
  }

  // === –ó–ê–ö–ê–ó–´ ===

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  static async getOrderById(id: number): Promise<any | null> {
    const cacheKey = `order:${id}`;
    const cacheTtl = 180; // 3 –º–∏–Ω—É—Ç—ã (–∑–∞–∫–∞–∑—ã –º–µ–Ω—è—é—Ç—Å—è —á–∞—Å—Ç–æ)

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cached = await RedisService.getCache(cacheKey);
      if (cached) {
        console.log(`üìã Order ${id} loaded from cache`);
        return cached;
      }

      console.log(`üîç Loading order ${id} from database`);
      
      const order = await prisma.orders.findUnique({
        where: { id: BigInt(id) },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true,
          bank_cards: true
        }
      });

      if (order) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        await RedisService.setCache(cacheKey, order, cacheTtl);
      }
      
      return order;
    } catch (error) {
      console.error(`‚ùå Error loading order ${id}:`, error);
      return null;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∑–∞–∫–∞–∑–∞
   */
  static async clearOrderCache(id: number): Promise<void> {
    await RedisService.deleteCache(`order:${id}`);
  }

  // === –ö–ê–¢–ï–ì–û–†–ò–ò (–û–¢–ö–õ–Æ–ß–ï–ù–û - –ù–ï–¢ –í –°–•–ï–ú–ï) ===
  
  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  static async clearCategoriesCache(): Promise<void> {
    await RedisService.deleteCache('categories:all');
    console.log('üßπ Categories cache cleared');
  }

  // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –°–ß–ï–¢–ß–ò–ö–ò ===

  /**
   * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async incrementUserActivity(userId: string): Promise<void> {
    const today = new Date().toISOString().split('T')[0];
    const key = `activity:${today}:${userId}`;
    await RedisService.increment(key, 86400); // TTL 1 –¥–µ–Ω—å
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
   */
  static async getDailyActivityStats(date: string = new Date().toISOString().split('T')[0]): Promise<number> {
    const pattern = `activity:${date}:*`;
    
    try {
      const redis = await RedisService.getInstance();
      if (!redis) return 0;

      const keys = await redis.keys(pattern);
      return keys.length;
    } catch (error) {
      console.error('‚ùå Error getting activity stats:', error);
      return 0;
    }
  }

  // === –û–ß–ò–°–¢–ö–ê –í–°–ï–ì–û –ö–≠–®–ê ===

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  static async clearAllCache(): Promise<void> {
    try {
      await Promise.all([
        this.clearProductsCache(),
        this.clearBotSettingsCache(),
        this.clearCategoriesCache(),
        RedisService.clearCachePattern('user:*'),
        RedisService.clearCachePattern('order:*'),
        RedisService.clearCachePattern('activity:*')
      ]);
      
      console.log('üßπ All cache cleared');
    } catch (error) {
      console.error('‚ùå Error clearing all cache:', error);
    }
  }
} 