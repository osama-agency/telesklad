import { ExchangeRateService } from './exchange-rate.service';

interface TelegramMessage {
  chat_id: number | string;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
  reply_markup?: {
    inline_keyboard: InlineKeyboardButton[][];
  };
}

interface InlineKeyboardButton {
  text: string;
  callback_data?: string;
  url?: string;
}

interface Purchase {
  id: number;
  totalAmount: number;
  status: string;
  isUrgent?: boolean;
  items: {
    productName: string;
    quantity: number;
    costPrice: number;
    total: number;
  }[];
  createdAt: string;
  supplierName?: string;
  notes?: string;
}

/**
 * TelegramBotService - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫—É–ø–æ–∫ –≤ –≥—Ä—É–ø–ø—É
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫—É–ø–æ–∫
 */
export class TelegramBotService {
  // –ë–û–¢ –î–õ–Ø –ó–ê–ö–£–ü–û–ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  private static readonly PURCHASE_BOT_TOKEN = process.env.TELEGRAM_PURCHASE_BOT_TOKEN || '7612206140:AAHA6sV7VZLyUu0Ua1DAoULiFYehAkAjJK4';
  private static readonly PURCHASE_API_URL = `https://api.telegram.org/bot${this.PURCHASE_BOT_TOKEN}`;
  
  // ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–∫—É–ø–æ–∫
  private static readonly GROUP_CHAT_ID = process.env.TELEGRAM_GROUP_CHAT_ID || '-4729817036';

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫—É–ø–æ–∫
   */
  private static async sendMessage(message: TelegramMessage): Promise<any> {
    if (!this.PURCHASE_BOT_TOKEN) {
      console.error('‚ùå PURCHASE_BOT_TOKEN not configured');
      return null;
    }

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    if (process.env.NODE_ENV === 'development' && message.chat_id !== this.GROUP_CHAT_ID) {
      console.log(`üîß DEV MODE: Simulating Telegram message to ${message.chat_id}`);
      console.log(`üìù Message: ${message.text.substring(0, 200)}...`);
      return {
        ok: true,
        result: {
          message_id: Math.floor(Math.random() * 10000),
          chat: { id: message.chat_id },
          date: Math.floor(Date.now() / 1000),
          text: message.text
        }
      };
    }

    try {
      console.log(`üì§ [PURCHASE BOT] Sending to ${message.chat_id}:`, message.text.substring(0, 100) + '...');
      
      const response = await fetch(`${this.PURCHASE_API_URL}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Purchase Bot API error: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ [PURCHASE BOT] Message sent successfully, message_id:', result.result?.message_id);
      return result;
    } catch (error) {
      console.error('‚ùå [PURCHASE BOT] Error sending message:', error);
      return null;
    }
  }

  /**
   * –ó–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
   */
  private static async pinMessage(chatId: number | string, messageId: number): Promise<any> {
    try {
      console.log(`üìå [PURCHASE BOT] Pinning message ${messageId} in chat ${chatId}`);
      
      const response = await fetch(`${this.PURCHASE_API_URL}/pinChatMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          disable_notification: false,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Purchase Bot API error: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ [PURCHASE BOT] Message pinned successfully');
      return result;
    } catch (error) {
      console.error('‚ùå [PURCHASE BOT] Error pinning message:', error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É –≤ –≥—Ä—É–ø–ø—É –∑–∞–∫—É–ø—â–∏–∫–∞
   */
  static async sendPurchaseToSupplier(purchase: Purchase): Promise<{ success: boolean; messageId?: number }> {
    console.log(`üöÄ [PURCHASE BOT] Sending purchase #${purchase.id} to group ${this.GROUP_CHAT_ID}`);

    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –ª–∏—Ä—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    let tryRate = 30; // –ö—É—Ä—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try {
      const latestRate = await ExchangeRateService.getLatestRate('TRY');
      tryRate = Number(latestRate.rate);
      console.log(`üí± Using TRY rate for display: ${tryRate} RUB per TRY`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Could not get TRY rate, using default: ${tryRate}`);
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö
    const totalPrimeCostRub = purchase.items.reduce((sum, item) => sum + (item.costPrice * item.quantity), 0);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–∏—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const totalPrimeCostTry = totalPrimeCostRub / tryRate;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –≤ –ª–∏—Ä–∞—Ö
    const itemsText = purchase.items
      .map(item => {
        const itemTotalRub = item.costPrice * item.quantity;
        const itemTotalTry = itemTotalRub / tryRate;
        const costPriceTry = item.costPrice / tryRate;
        return `‚Ä¢ <b>${item.productName}</b>\n  ${item.quantity} —à—Ç. √ó ${costPriceTry.toFixed(2)} ‚Ç∫ = <b>${itemTotalTry.toFixed(2)} ‚Ç∫</b>`;
      })
      .join('\n\n');

    const urgentTag = purchase.isUrgent ? 'üî¥ <b>–°–†–û–ß–ù–ê–Ø –ó–ê–ö–£–ü–ö–ê!</b>\n\n' : '';

    const message: TelegramMessage = {
      chat_id: this.GROUP_CHAT_ID,
      text: `${urgentTag}üìã <b>–ù–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞ #${purchase.id}</b>

<b>–¢–æ–≤–∞—Ä—ã –∏ —Ü–µ–Ω—ã:</b>
${itemsText}

üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞: ${totalPrimeCostTry.toFixed(2)} ‚Ç∫</b>

üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${new Date(purchase.createdAt).toLocaleString('ru-RU', { 
        timeZone: 'Europe/Moscow',
        day: '2-digit',
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}${purchase.supplierName ? `\nüè™ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> ${purchase.supplierName}` : ''}${purchase.notes ? `\nüìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> ${purchase.notes}` : ''}

<i>–ó–∞–∫—É–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</i>`,
      parse_mode: 'HTML'
    };

    const result = await this.sendMessage(message);
    
    if (result && result.ok) {
      console.log(`‚úÖ [PURCHASE BOT] Purchase sent to group, message_id: ${result.result.message_id}`);
      return { success: true, messageId: result.result.message_id };
    }
    
    console.log('‚ùå [PURCHASE BOT] Failed to send purchase to group');
    return { success: false };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
   */
  static async sendSimpleMessage(text: string, shouldPin: boolean = false, replyMarkup?: any): Promise<{ success: boolean; messageId?: number }> {
    console.log(`üì§ [PURCHASE BOT] Sending simple message to group`);

    const message: TelegramMessage = {
      chat_id: this.GROUP_CHAT_ID,
      text: text,
      parse_mode: 'HTML',
      reply_markup: replyMarkup
    };

    const result = await this.sendMessage(message);
    
    if (result && result.ok) {
      const messageId = result.result.message_id;
      console.log(`‚úÖ [PURCHASE BOT] Simple message sent to group, message_id: ${messageId}`);
      
      // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (shouldPin) {
        console.log(`üìå Attempting to pin message ${messageId}`);
        const pinResult = await this.pinMessage(this.GROUP_CHAT_ID, messageId);
        if (pinResult && pinResult.ok) {
          console.log(`‚úÖ Message ${messageId} pinned successfully`);
        } else {
          console.log(`‚ö†Ô∏è Failed to pin message ${messageId}, but message was sent`);
        }
      }
      
      return { success: true, messageId };
    }
    
    console.log('‚ùå [PURCHASE BOT] Failed to send simple message to group');
    return { success: false };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫—É–ø–∫–∏
   */
  static async sendPaymentNotification(purchaseId: number, purchaseData: {
    items: Array<{ productName: string; quantity: number }>;
    totalAmount: number;
    paidExchangeRate?: number;
  }): Promise<{ success: boolean; messageId?: number }> {
    console.log(`üí∞ [PURCHASE BOT] Sending payment notification for purchase #${purchaseId}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const itemsList = purchaseData.items
      .map((item, index) => `${index + 1}. ${item.productName} - ${item.quantity} —à—Ç.`)
      .join('\n');

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –∏–∑ —Ä—É–±–ª–µ–π –≤ –ª–∏—Ä—ã
    let totalInTry = purchaseData.totalAmount;
    if (purchaseData.paidExchangeRate) {
      totalInTry = purchaseData.totalAmount / purchaseData.paidExchangeRate;
    } else {
      try {
        const latestRate = await ExchangeRateService.getLatestRate('TRY');
        totalInTry = purchaseData.totalAmount / Number(latestRate.rate);
      } catch (error) {
        totalInTry = purchaseData.totalAmount / 30; // –ö—É—Ä—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
    }

    const paymentMessage = `üí∞ <b>–ó–∞–∫—É–ø–∫–∞ #${purchaseId} - –æ–ø–ª–∞—á–µ–Ω–∞!</b>

üì¶ <b>–¢–æ–≤–∞—Ä—ã (${purchaseData.items.length} –ø–æ–∑.):</b>
${itemsList}

üíµ <b>–ò—Ç–æ–≥–æ: ${totalInTry.toFixed(2)} ‚Ç∫</b>

‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–û–ø–ª–∞—á–µ–Ω–æ"`;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    const replyMarkup = {
      inline_keyboard: [[
        {
          text: "üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ö–∞—Ä–≥–æ",
          callback_data: `shipped_${purchaseId}`
        }
      ]]
    };

    return await this.sendSimpleMessage(paymentMessage, true, replyMarkup);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static async getBotInfo(): Promise<any> {
    try {
      const response = await fetch(`${this.PURCHASE_API_URL}/getMe`);
      const result = await response.json();
      return result;
    } catch (error: any) {
      console.error('‚ùå [PURCHASE BOT] Error getting bot info:', error);
      return { error: error.message };
    }
  }
}