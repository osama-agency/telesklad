import { TelegramService } from './TelegramService';
import { AdminTelegramService } from './AdminTelegramService';
import { prisma } from '@/libs/prismaDb';

interface OrderForReport {
  id: bigint;
  status: number;
  total_amount: number;
  deliverycost?: number | null;
  tracking_number?: string | null;
  msg_id?: bigint | null;
  shipped_at?: Date | null;
  paid_at?: Date | null;
  created_at: Date;
  customeraddress?: string | null;
  users: {
    id: bigint;
    tg_id: bigint;
    first_name?: string | null;
    last_name?: string | null;
    middle_name?: string | null;
    first_name_raw?: string | null;
    last_name_raw?: string | null;
    postal_code?: string | null;
    address?: string | null;
    street?: string | null;
    home?: string | null;
    apartment?: string | null;
    build?: string | null;
    phone_number?: string | null;
  };
  order_items: Array<{
    quantity: number;
    price: number;
    products: {
      name: string;
      price: number;
    };
  }>;
  bank_cards?: {
    id?: bigint;
    name?: string;
    fio?: string;
    number?: string;
  } | null;
}

export class ReportService {
  private static readonly ONE_WAIT = 3 * 60 * 60 * 1000; // 3 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  private static readonly REVIEW_WAIT = 10 * 24 * 60 * 60 * 1000; // 10 –¥–Ω–µ–π

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  static async handleOrderStatusChange(order: OrderForReport, previousStatus: number): Promise<void> {
    console.log(`üìä Order ${order.id} status changed: ${previousStatus} -> ${order.status}`);

         switch (order.status) {
       case 0: // unpaid
         await this.onUnpaid(order);
         break;
       case 1: // paid
         await this.onPaid(order);
         break;
       case 2: // processing  
         await this.onProcessing(order);
         break;
       case 3: // shipped
         await this.onShipped(order);
         break;
       case 4: // cancelled
         await this.onCancelled(order);
         break;
       case 5: // refunded
         await this.onRefunded(order);
         break;
     }
  }

  /**
   * –ó–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª"
   * –ò —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
   */
  private static async onUnpaid(order: OrderForReport): Promise<void> {
    console.log(`Order ${order.id} is now unpaid`);

    const user = order.users;
    const orderItemsStr = this.formatOrderItems(order.order_items);
    const bankDetails = order.bank_cards 
      ? `${order.bank_cards.name}\n${order.bank_cards.fio}\n\`${order.bank_cards.number}\``
      : '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞';
    const fullAddress = this.buildFullAddress(order);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –±–æ—Ç–µ
    let orderComposition = orderItemsStr;
    const deliveryCost = order.deliverycost || 0;
    if (deliveryCost > 0) {
      orderComposition += `\n‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî —É—Å–ª—É–≥–∞ ‚Äî ${deliveryCost}‚ÇΩ`;
    }
    
    // –û–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ = —Ç–æ–≤–∞—Ä—ã + –¥–æ—Å—Ç–∞–≤–∫–∞
    const totalToPay = Number(order.total_amount) + Number(deliveryCost);

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É - —Ç–æ—á–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—á–µ–≥–æ –±–æ—Ç–∞
    const userMsg = `üéâ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order.id} –ø—Ä–∏–Ω—è—Ç.\n\n` +
      `üìå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:\n\n` +
      `–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n${orderComposition}\n\n` +
      `–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\nüë§ ${this.getFullName(user)}\n\n` +
      `üè† ${fullAddress}\n\n` +
      `üìû ${user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalToPay}‚ÇΩ\n\n` +
      `‚úÖ –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n` +
      `1. –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n` +
      `–í–ù–ò–ú–ê–ù–ò–ï, –û–ü–õ–ê–ß–ò–í–ê–ô–¢–ï –ò–ú–ï–ù–ù–û –ù–ê\n${bankDetails}.\n\n` +
      `2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª, —á—Ç–æ–±—ã –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑.\n\n` +
      `‚ùóÔ∏è –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑¬ª.`;

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    const adminBankDetails = order.bank_cards 
      ? `${order.bank_cards.name} ‚Äî ${order.bank_cards.fio} ‚Äî ${order.bank_cards.number}`
      : '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞';
    
    const adminMsg = `üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ${order.id} —Å–æ–∑–¥–∞–Ω!\n\n` +
      `–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${totalToPay}‚ÇΩ\n\n` +
      `–ë–∞–Ω–∫: ${adminBankDetails}\n\n` +
      `üìÑ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n${orderComposition.replace(/\n‚Ä¢/g, ',\n‚Ä¢')}\n\n` +
      `üìç –ê–¥—Ä–µ—Å:\n${fullAddress}\n\n` +
      `üë§ –§–ò–û:\n${this.getFullName(user)}\n\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω:\n${user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `‚è≥ –û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞...`;

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    await this.sendReport(order, {
      // adminMsg: adminMsg,  // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –∞–¥–º–∏–Ω—É –Ω–µ –Ω—É–∂–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
      // adminTgId: '125861752',
      userMsg: userMsg,
      userTgId: user.tg_id.toString(),
      userMarkup: 'i_paid'
    });

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏)
    // setTimeout(() => {
    //   this.scheduleAbandonedOrderReminder(order.id);
    // }, this.ONE_WAIT);
  }

  /**
   * –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private static async onPaid(order: OrderForReport): Promise<void> {
    console.log(`Order ${order.id} is now paid`);

    const user = order.users;
    const orderItemsStr = this.formatOrderItems(order.order_items);
    const bankDetails = order.bank_cards 
      ? `${order.bank_cards.name} ‚Äî ${order.bank_cards.fio} ‚Äî ${order.bank_cards.number}`
      : '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞';
    const fullAddress = this.buildFullAddress(order);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–ª—è –∞–¥–º–∏–Ω–∞
    let orderComposition = orderItemsStr;
    const deliveryCost = order.deliverycost || 0;
    if (deliveryCost > 0) {
      orderComposition += `,\n‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî —É—Å–ª—É–≥–∞ ‚Äî ${deliveryCost}‚ÇΩ`;
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ  
    const totalToPay = Number(order.total_amount) + Number(deliveryCost);
    const adminMsg = `–ù–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ${order.id}\n\n` +
      `–ò—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–ª–∏–µ–Ω—Ç: ${totalToPay}‚ÇΩ\n\n` +
      `–ë–∞–Ω–∫: ${bankDetails}\n\n` +
      `üìÑ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n${orderComposition}\n\n` +
      `üìç –ê–¥—Ä–µ—Å:\n${fullAddress}\n\n` +
      `üë§ –§–ò–û:\n${this.getFullName(user)}\n\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω:\n${user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    const userMsg = `‚è≥ –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ - –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –æ–ø–ª–∞—Ç—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å.\n\n` +
      `–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: –æ—Ç 5 –¥–æ 30 –º–∏–Ω—É—Ç.`;

    await this.sendReport(order, {
      adminMsg: adminMsg,
      adminTgId: '125861752', // ID –∞–¥–º–∏–Ω–∞ –≠–ª—å–¥–∞—Ä–∞
      adminMarkup: 'approve_payment',
      userMsg: userMsg,
      userTgId: user.tg_id.toString()
    });
  }

  /**
   * –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è - —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫—É—Ä—å–µ—Ä–∞
   */
  private static async onProcessing(order: OrderForReport): Promise<void> {
    console.log(`Order ${order.id} is being processed. Payment confirmed.`);

    const user = order.users;
    const orderItemsStr = this.formatOrderItems(order.order_items, false); // –±–µ–∑ —Ü–µ–Ω –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
    const fullAddress = this.buildFullAddress(order);

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
    const courierMsg = `üëÄ –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ${order.id}\n\n` +
      `üìÑ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n${orderItemsStr}\n\n` +
      `üìç –ê–¥—Ä–µ—Å:\n${fullAddress}\n\n` +
      `üìç –ò–Ω–¥–µ–∫—Å: ${user.postal_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `üë§ –§–ò–û:\n${this.getFullName(user)}\n\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω:\n${user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
    const userMsg = `‚ù§Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n` +
      `üöö –ó–∞–∫–∞–∑ ‚Ññ${order.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –∫—É—Ä—å–µ—Ä–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.\n\n` +
      `–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –º—ã –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–ª–µ–º –≤–∞–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n` +
      `–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 5 –¥–æ 48 —á–∞—Å–æ–≤.\n\n` +
      `–ë—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!`;

    await this.sendReport(order, {
      adminMsg: courierMsg,
      adminTgId: 'courier',
      adminMarkup: 'submit_tracking',
      userMsg: userMsg,
      userTgId: user.tg_id.toString(),
      userMarkup: 'new_order'
    });
  }

  /**
   * –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω - —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
   */
  private static async onShipped(order: OrderForReport): Promise<void> {
    console.log(`Order ${order.id} has been shipped`);

    const user = order.users;
    const orderItemsStr = this.formatOrderItems(order.order_items, false);
    const fullAddress = this.buildFullAddress(order);

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é  
    const clientMsg = `üì¶ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!\n\n` +
      `–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n` +
      `–í–æ—Ç –≤–∞—à —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ${order.tracking_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π —Å–ª—É–∂–±–æ–π, –Ω–∞—á–Ω—ë—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n` +
      `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑!`;

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
    const courierMsg = `–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ ‚Ññ${order.id}\n\n` +
      `üìÑ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n${orderItemsStr}\n\n` +
      `üìç –ê–¥—Ä–µ—Å:\n${fullAddress}\n\n` +
      `üìç –ò–Ω–¥–µ–∫—Å: ${user.postal_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `üë§ –§–ò–û:\n${this.getFullName(user)}\n\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω:\n${user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${order.tracking_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
    let trackingUrl = '';
    if (order.tracking_number) {
      // –ï—Å–ª–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
      if (order.tracking_number.startsWith('@')) {
        trackingUrl = order.tracking_number.substring(1);
      } else if (order.tracking_number.startsWith('http')) {
        trackingUrl = order.tracking_number;
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ü–æ—á—Ç—É –†–æ—Å—Å–∏–∏
        trackingUrl = `https://www.pochta.ru/tracking#${order.tracking_number}`;
      }
    }

    await this.sendReport(order, {
      adminMsg: courierMsg,
      adminTgId: 'courier',
      adminMarkup: 'resend_tracking',
      userMsg: clientMsg,
      userTgId: user.tg_id.toString(),
      userMarkup: 'new_order'  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∑–∞–º–µ–Ω–∏–ª–∏ track_package –Ω–∞ new_order (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç WebApp)
      // userMarkupUrl —É–±—Ä–∞–Ω - –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å WebApp –≤–º–µ—Å—Ç–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    });

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∑—ã–≤–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏)
    // this.scheduleReviewRequests(order, user);
  }

  /**
   * –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
   */
  private static async onCancelled(order: OrderForReport): Promise<void> {
    console.log(`Order ${order.id} has been cancelled`);

    const adminMsg = `‚ùå –ó–∞–∫–∞–∑ ‚Ññ${order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω!`;
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ
    const userMsg = `‚ùå –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order.id} –æ—Ç–º–µ–Ω—ë–Ω.\n\n` +
      `–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥.`;

    await this.sendReport(order, {
      adminMsg: adminMsg,
      userMsg: userMsg,
      userTgId: order.users.tg_id.toString(),
      userMarkup: 'new_order'
    });
  }

  /**
   * –ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω
   */
  private static async onRefunded(order: OrderForReport): Promise<void> {
    const msg = `üí∏ Order ‚Ññ${order.id} has been refunded`;
    console.log(msg);
    await TelegramService.call(msg);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private static async sendReport(order: OrderForReport, options: {
    adminMsg?: string;
    adminTgId?: string;
    adminMarkup?: string;
    userMsg?: string;
    userTgId?: string;
    userMarkup?: string;
    userMarkupUrl?: string;
  }): Promise<void> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É/–∫—É—Ä—å–µ—Ä—É
      if (options.adminMsg) {
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (ID 125861752), –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        if (options.adminTgId === '125861752') {
          await AdminTelegramService.sendToAdmin(
            options.adminMsg,
            { markup: options.adminMarkup }
          );
        } else {
          // –î–ª—è –∫—É—Ä—å–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π TelegramService
          await TelegramService.call(
            options.adminMsg,
            options.adminTgId,
            { markup: options.adminMarkup }
          );
        }
      }

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
      if (order.msg_id && order.users.tg_id) {
        await this.removePreviousMessage(order.users.tg_id.toString(), order.msg_id.toString());
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–ª–∏–µ–Ω—Ç—É)
      if (options.userMsg && options.userTgId) {
        const msgId = await this.sendClientNotification(
          options.userMsg,
          options.userTgId,
          {
            markup: options.userMarkup,
            markup_url: options.userMarkupUrl
          }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑–µ
        if (typeof msgId === 'number') {
          await prisma.orders.update({
            where: { id: order.id },
            data: { msg_id: msgId }
          });
        } else if (msgId instanceof Error) {
          await this.notifyAdmin(msgId, order.id.toString());
        }
      }
    } catch (error) {
      console.error('Error in sendReport:', error);
      if (error instanceof Error) {
        await this.notifyAdmin(error, order.id.toString());
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–æ—Ç
   * –í development: –≤—Å–µ–≥–¥–∞ @strattera_test_bot
   * –í production: @telesklad_bot
   */
  private static async sendClientNotification(
    message: string,
    userTgId: string,
    options: {
      markup?: string;
      markup_url?: string;
    } = {}
  ): Promise<number | Error> {
    // –í development –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–°–ï–ì–î–ê –∏–¥—É—Ç —á–µ—Ä–µ–∑ @strattera_test_bot
    if (process.env.NODE_ENV === 'development') {
      console.log('üîÑ Forcing client notification through @strattera_test_bot in development');
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
        const { TelegramTokenService } = await import('./telegram-token.service');
        const botToken = await TelegramTokenService.getWebappBotToken();
        
        if (!botToken) {
          throw new Error('Webapp bot token not available');
        }
        
        console.log('üîë ClientNotification using WEBAPP_TELEGRAM_BOT_TOKEN (@strattera_test_bot) for client in development');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        const finalMessage = `‚ÄºÔ∏è‚ÄºÔ∏èDevelopment‚ÄºÔ∏è‚ÄºÔ∏è\n\n${message}`;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const markup = this.formClientMarkup(options);
        
        const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: userTgId,
            text: this.escapeMarkdown(finalMessage),
            parse_mode: 'MarkdownV2',
            reply_markup: markup
          }),
        });

        if (!response.ok) {
          const errorData = await response.text();
          throw new Error(`Telegram API error: ${response.status} - ${errorData}`);
        }

        const result = await response.json();
        const messageId = result.result.message_id;
        console.log(`‚úÖ Client message sent to ${userTgId}, ID: ${messageId}`);
        
        return messageId;
        
      } catch (error) {
        console.error(`‚ùå Failed to send client message: ${error}`);
        return error instanceof Error ? error : new Error('Unknown error');
      }
    } else {
      // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
      return await TelegramService.call(message, userTgId, options);
    }
  }

  private static escapeMarkdown(text: string): string {
    // –£–¥–∞–ª—è–µ–º ANSI escape –∫–æ–¥—ã –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    return text
      .replace(/\[[0-9;]*m/g, '') // —É–¥–∞–ª—è–µ–º ANSI –∫–æ–¥—ã
      .replace(/([-_\[\]()~>#+=|{}.!])/g, '\\$1'); // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
  }

  private static formClientMarkup(options: { markup?: string; markup_url?: string }): any {
    if (!options.markup && !options.markup_url) {
      return undefined;
    }

    const buttons: any[][] = [];
    
    if (options.markup) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑" –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å WebApp
      if (options.markup === 'new_order') {
        buttons.push([{
          text: this.getButtonText(options.markup),
          web_app: { url: process.env.WEBAPP_URL || 'https://strattera.ngrok.app/webapp' }
        }]);
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_data
        buttons.push([{
          text: this.getButtonText(options.markup),
          callback_data: options.markup
        }]);
      }
      
      if (options.markup === 'i_paid') {
        buttons.push([{
          text: '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
          url: `https://t.me/strattera_bot?startapp`
        }]);
        buttons.push([{
          text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
          url: 'https://t.me/your_support'
        }]);
      }
    }
    
    if (options.markup_url) {
      buttons.push([{
        text: '–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É',
        url: options.markup_url
      }]);
    }
    
    return buttons.length > 0 ? { inline_keyboard: buttons } : undefined;
  }

  private static getButtonText(markup: string): string {
    const buttonTexts: { [key: string]: string } = {
      'i_paid': '–Ø –æ–ø–ª–∞—Ç–∏–ª',
      'approve_payment': '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞',
      'submit_tracking': '–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä',
      'resend_tracking': '–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä',
      'track_package': '–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É',
      'new_order': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
      'mailing': '–†–∞—Å—Å—ã–ª–∫–∞'
    };
    
    return buttonTexts[markup] || markup;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private static async removePreviousMessage(tgId: string, msgId: string): Promise<void> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ TelegramMsgDelService
    // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log(`üóëÔ∏è Should remove message ${msgId} for user ${tgId}`);
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
   */
  private static async notifyAdmin(error: Error, orderId: string): Promise<void> {
    const msg = `‚ùå –ö–ª–∏–µ–Ω—Ç—É –Ω–µ –ø—Ä–∏—à–ª–æ –±–∏–∑–Ω–µ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ${orderId}`;
    
    if (error.message.includes('chat not found')) {
      await TelegramService.call(
        `${msg} –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å—Ç–∞—Ä—Ç!`,
        process.env.TELEGRAM_ADMIN_ID
      );
    } else if (error.message.includes('bot was blocked')) {
      await TelegramService.call(
        `${msg} –ø–æ –ø—Ä–∏—á–∏–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º –±–æ—Ç–∞ –≤ –±–∞–Ω!`,
        process.env.TELEGRAM_ADMIN_ID
      );
    } else {
      console.error(`${msg} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ${error.message}`);
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –∏–ª–∏ –¥—Ä—É–≥–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –±–æ—Ç–µ
   */
  private static formatOrderItems(orderItems: OrderForReport['order_items'], withPrices: boolean = false): string {
    return orderItems.map(item => {
      // –§–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –±–æ—Ç–µ: "‚Ä¢ Atominex 18 mg ‚Äî 1—à—Ç. ‚Äî 5200‚ÇΩ"
      return `‚Ä¢ ${item.products.name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`;
    }).join('\n');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static getFullName(user: OrderForReport['users']): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è, –∞ –Ω–µ _raw –ø–æ–ª—è
    const firstName = (user as any).first_name || user.first_name_raw || '';
    const lastName = (user as any).last_name || user.last_name_raw || '';
    const middleName = (user as any).middle_name || '';
    
    return `${firstName} ${lastName} ${middleName}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –±–æ—Ç–µ
   */
  private static buildFullAddress(order: OrderForReport): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º customeraddress –∏–∑ –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (order.customeraddress) {
      return order.customeraddress;
    }
    
    // Fallback –∫ –∞–¥—Ä–µ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = order.users;
    const parts = [];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å —Å –∏–Ω–¥–µ–∫—Å–æ–º –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –±–æ—Ç–µ
    if (user.postal_code) parts.push(`${user.postal_code}`);
    if (user.address) parts.push(user.address);
    
    return parts.join(', ') || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
  }
} 