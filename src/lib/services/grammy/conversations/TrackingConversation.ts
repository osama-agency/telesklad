import { Conversation } from '@grammyjs/conversations';
import { ExtendedContext, ConversationContext } from '../types/grammy-types';
import { KeyboardUtils } from '../utils/keyboard-utils';
import { prisma } from '@/libs/prismaDb';
import { RedisService } from '../../redis.service';
import { ReportService } from '../../ReportService';
import { logger } from '@/lib/logger';

/**
 * TrackingConversation - Conversation –¥–ª—è –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤ –∫—É—Ä—å–µ—Ä–∞–º–∏
 * 
 * Workflow:
 * 1. –ö—É—Ä—å–µ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä"
 * 2. –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
 * 3. –ö—É—Ä—å–µ—Ä –≤–≤–æ–¥–∏—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ —á–∞—Ç
 * 4. –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
 * 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
 */
export class TrackingConversation {
  
  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è conversation –¥–ª—è –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
   */
  static async trackingFlow(conversation: Conversation<ExtendedContext>, ctx: ExtendedContext): Promise<void> {
    logger.info('üó£Ô∏è Starting tracking conversation', { userId: ctx.from?.id }, 'Grammy');

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
      const userState = await RedisService.getUserState(`user_${ctx.chat?.id}_state`);
      
      if (!userState || !userState.order_id) {
        logger.warn('‚ö†Ô∏è No user state found for tracking conversation', { 
          userId: ctx.from?.id,
          chatId: ctx.chat?.id 
        }, 'Grammy');
        
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
      }

      const orderId = userState.order_id;
      logger.info('üì¶ Processing tracking for order', { orderId, userId: ctx.from?.id }, 'Grammy');

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –ë–î
      const order = await prisma.orders.findUnique({
        where: { id: BigInt(orderId) },
        include: {
          users: true,
          order_items: {
            include: {
              products: true
            }
          }
        }
      });

      if (!order) {
        logger.warn('‚ö†Ô∏è Order not found', { orderId }, 'Grammy');
        await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ ‚Ññ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
      }

      // –ñ–¥–µ–º –≤–≤–æ–¥ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:');
      
      logger.info('‚è≥ Waiting for tracking number input', { orderId, userId: ctx.from?.id }, 'Grammy');
      
      // –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
      const trackingMessage = await conversation.wait();
      
      if (!trackingMessage.message?.text) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–º.');
        return;
      }

      const trackingNumber = trackingMessage.message.text.trim();
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
      if (!TrackingConversation.isValidTrackingNumber(trackingNumber)) {
        await ctx.reply(
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n' +
          '–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n' +
          '‚Ä¢ RA123456789RU\n' +
          '‚Ä¢ RR123456789RU\n' +
          '‚Ä¢ 12345678901234'
        );
        return;
      }

      logger.info('‚úÖ Valid tracking number received', { 
        orderId, 
        trackingNumber: trackingNumber.substring(0, 5) + '...',
        userId: ctx.from?.id 
      }, 'Grammy');

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
      const updatedOrder = await prisma.orders.update({
        where: { id: BigInt(orderId) },
        data: {
          tracking_number: trackingNumber,
          status: 3, // shipped
          shipped_at: new Date(),
          updated_at: new Date()
        },
        include: {
          users: true,
          order_items: {
            include: {
              products: true
            }
          }
        }
      });

      logger.info('‚úÖ Order updated with tracking number', { 
        orderId, 
        newStatus: 'shipped' 
      }, 'Grammy');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
      const confirmationMessage = TrackingConversation.buildCourierConfirmation(
        updatedOrder, 
        trackingNumber
      );

      const trackingKeyboard = KeyboardUtils.createTrackingKeyboard(orderId.toString(), trackingNumber);

      await ctx.reply(confirmationMessage, {
        reply_markup: trackingKeyboard,
        parse_mode: 'HTML'
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService
      await TrackingConversation.sendNotifications(updatedOrder, trackingNumber);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await RedisService.clearUserState(`user_${ctx.chat?.id}_state`);

      logger.info('‚úÖ Tracking conversation completed successfully', { 
        orderId, 
        userId: ctx.from?.id 
      }, 'Grammy');

    } catch (error) {
      logger.error('‚ùå Error in tracking conversation', { 
        error: (error as Error).message,
        userId: ctx.from?.id,
        chatId: ctx.chat?.id
      }, 'Grammy');

      await ctx.reply(
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞. ' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      );
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
   */
  static isValidTrackingNumber(trackingNumber: string): boolean {
    if (!trackingNumber || trackingNumber.length < 5) {
      return false;
    }

    // –†–æ—Å—Å–∏–π—Å–∫–∞—è –ø–æ—á—Ç–∞: RA123456789RU, RR123456789RU
    const russianPostPattern = /^[A-Z]{2}\d{9}[A-Z]{2}$/;
    
    // –°–î–≠–ö: —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–¥
    const cdekPattern = /^\d{10,14}$/;
    
    // –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏: —à—Ç—Ä–∏—Ö-–∫–æ–¥
    const russianPostBarcodePattern = /^\d{14}$/;
    
    // DPD, Boxberry –∏ –¥—Ä—É–≥–∏–µ
    const genericPattern = /^[A-Z0-9]{5,20}$/;

    return russianPostPattern.test(trackingNumber) ||
           cdekPattern.test(trackingNumber) ||
           russianPostBarcodePattern.test(trackingNumber) ||
           genericPattern.test(trackingNumber);
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
   */
  static buildCourierConfirmation(order: any, trackingNumber: string): string {
    const user = order.users;
    const orderItems = order.order_items;
    
    const itemsStr = orderItems.map((item: any) => 
      `‚Ä¢ ${item.products.name} ‚Äî ${item.quantity}—à—Ç.`
    ).join('\n');

    return `‚úÖ <b>–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!</b>\n\n` +
      `üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ${order.id}</b>\n` +
      `üî¢ <b>–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä:</b> <code>${trackingNumber}</code>\n\n` +
      `üìÑ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n${itemsStr}\n\n` +
      `üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> ${TrackingConversation.getFullName(user)}\n` +
      `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `üìÖ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> ${new Date().toLocaleString('ru-RU')}\n\n` +
      `üéâ –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞!`;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞
   */
  static async sendNotifications(order: any, trackingNumber: string): Promise<void> {
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è ReportService
      const orderForReport = {
        ...order,
        msg_id: order.msg_id ? BigInt(order.msg_id) : null
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService
      // –≠—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      await ReportService.handleOrderStatusChange(orderForReport as any, 2); // previous status: processing

      logger.info('‚úÖ Shipping notifications sent', { 
        orderId: order.id,
        trackingNumber: trackingNumber.substring(0, 5) + '...'
      }, 'Grammy');

    } catch (error) {
      logger.error('‚ùå Failed to send shipping notifications', { 
        error: (error as Error).message,
        orderId: order.id 
      }, 'Grammy');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static getFullName(user: any): string {
    const firstName = user.first_name || user.first_name_raw || '';
    const lastName = user.last_name || user.last_name_raw || '';
    const middleName = user.middle_name || '';
    
    return `${firstName} ${lastName} ${middleName}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  /**
   * Conversation –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
   */
  static async retryTrackingFlow(conversation: Conversation<ExtendedContext>, ctx: ExtendedContext): Promise<void> {
    logger.info('üîÑ Starting retry tracking conversation', { userId: ctx.from?.id }, 'Grammy');

    await ctx.reply(
      'üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:\n\n' +
      'üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n' +
      '‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∞—è –ø–æ—á—Ç–∞: RA123456789RU\n' +
      '‚Ä¢ –°–î–≠–ö: 1234567890\n' +
      '‚Ä¢ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏: 12345678901234\n' +
      '‚Ä¢ –î—Ä—É–≥–∏–µ —Å–ª—É–∂–±—ã: –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã',
      { parse_mode: 'HTML' }
    );

    // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π flow
    await TrackingConversation.trackingFlow(conversation, ctx);
  }

  /**
   * Conversation –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
   */
  static async editTrackingFlow(conversation: Conversation<ExtendedContext>, ctx: ExtendedContext, orderId: string): Promise<void> {
    logger.info('‚úèÔ∏è Starting edit tracking conversation', { 
      userId: ctx.from?.id,
      orderId 
    }, 'Grammy');

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const order = await prisma.orders.findUnique({
        where: { id: BigInt(orderId) },
        include: { users: true }
      });

      if (!order) {
        await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const currentTracking = order.tracking_number;
      
      await ctx.reply(
        `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞</b>\n\n` +
        `üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ${orderId}</b>\n` +
        `üî¢ <b>–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:</b> <code>${currentTracking || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:`,
        { parse_mode: 'HTML' }
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await RedisService.setUserState(`user_${ctx.chat?.id}_state`, {
        order_id: BigInt(orderId),
        mode: 'edit_tracking',
        timestamp: Date.now()
      }, 300); // 5 –º–∏–Ω—É—Ç TTL

      // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π flow
      await TrackingConversation.trackingFlow(conversation, ctx);

    } catch (error) {
      logger.error('‚ùå Error in edit tracking conversation', { 
        error: (error as Error).message,
        orderId,
        userId: ctx.from?.id 
      }, 'Grammy');

      await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞.');
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è tracking conversation
   */
  static async createTrackingState(
    chatId: number, 
    orderId: string, 
    msgId: number, 
    hMsgId: number
  ): Promise<void> {
    const state = {
      order_id: BigInt(orderId),
      msg_id: msgId,
      h_msg: hMsgId,
      timestamp: Date.now(),
      mode: 'tracking'
    };

    await RedisService.setUserState(`user_${chatId}_state`, state, 300); // 5 –º–∏–Ω—É—Ç TTL
    
    logger.info('‚úÖ Tracking state created', { 
      orderId, 
      chatId,
      msgId,
      hMsgId 
    }, 'Grammy');
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
   */
  static async getOrderInfo(orderId: string): Promise<any | null> {
    try {
      const order = await prisma.orders.findUnique({
        where: { id: BigInt(orderId) },
        include: {
          users: true,
          order_items: {
            include: {
              products: true
            }
          }
        }
      });

      return order;
    } catch (error) {
      logger.error('‚ùå Failed to get order info', { 
        error: (error as Error).message,
        orderId 
      }, 'Grammy');
      return null;
    }
  }
}