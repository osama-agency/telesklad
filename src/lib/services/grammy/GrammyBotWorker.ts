import { Bot, webhookCallback } from 'grammy';
import { conversations, createConversation } from '@grammyjs/conversations';
import { limit } from '@grammyjs/ratelimiter';
import { run } from '@grammyjs/runner';

import {
  ExtendedContext,
  CallbackContext,
  ConversationContext,
  BotSettings,
  PerformanceMetrics,
  RateLimitConfig,
  OrderData,
  UserState
} from './types/grammy-types';

import { prisma } from '@/libs/prismaDb';
import { SettingsService } from '../SettingsService';
import { UserService } from '../UserService';
import { ReportService } from '../ReportService';
import { RedisService } from '../redis.service';
import { CacheService } from '../cache.service';
import { logger } from '@/lib/logger';
import { RedisQueueService } from '../redis-queue.service';
import { KeyboardUtils } from './utils/keyboard-utils';
import { TrackingConversation } from './conversations/TrackingConversation';

/**
 * GrammyBotWorker - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ TelegramBotWorker –Ω–∞ –±–∞–∑–µ grammY
 * 
 * –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π:
 * - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å 100%
 * - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
 * - –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ conversations
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - Rate limiting –∏–∑ –∫–æ—Ä–æ–±–∫–∏
 * - Middleware pattern
 * - –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
export class GrammyBotWorker {
  private bot: Bot<ExtendedContext>;
  private settings: BotSettings = {};
  private metrics: PerformanceMetrics = {
    messagesProcessed: 0,
    errorsCount: 0,
    averageResponseTime: 0,
    callbacksHandled: 0,
    conversationsStarted: 0,
    webhookRequestsReceived: 0,
    lastResetTime: new Date()
  };
  
  private static instances: Map<string, GrammyBotWorker> = new Map();
  private isInitialized = false;

  private constructor() {
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ initialize)
    this.bot = new Bot('placeholder-token');
  }

  static getInstance(instanceName: string = 'default'): GrammyBotWorker {
    if (!this.instances.has(instanceName)) {
      this.instances.set(instanceName, new GrammyBotWorker());
    }
    return this.instances.get(instanceName)!;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
   */
  async initialize(token?: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
      const botToken = token || await SettingsService.get('client_bot_token', process.env.WEBAPP_TELEGRAM_BOT_TOKEN);
      if (!botToken) {
        throw new Error('Telegram bot token not found');
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      this.bot = new Bot<ExtendedContext>(botToken);

      logger.info('üöÄ Initializing grammY bot...', undefined, 'Grammy');

      // –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º
      await this.bot.init();
      logger.info('‚úÖ Bot info loaded', undefined, 'Grammy');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      await this.initializeRedis();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      await this.loadSettings();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
      this.setupMiddleware();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º rate limiting
      this.setupRateLimit();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º conversations
      this.setupConversations();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupCommands();
      this.setupCallbacks();
      this.setupMessages();

      // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      this.setupErrorHandling();

      this.isInitialized = true;
      logger.info('‚úÖ GrammyBotWorker initialized successfully', undefined, 'Grammy');

    } catch (error) {
      logger.error('‚ùå Failed to initialize GrammyBotWorker', { error: error.message }, 'Grammy');
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å–µ—Ä–≤–∏—Å–∞
   */
  private async initializeRedis(): Promise<void> {
    try {
      await RedisService.initialize();
      if (RedisService.isAvailable()) {
        logger.info('‚úÖ Redis initialized for Grammy', undefined, 'Grammy');
      }
    } catch (error) {
      logger.warn('‚ö†Ô∏è Redis not available, using memory fallback', { error: (error as Error).message }, 'Grammy');
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SettingsService
   */
  private async loadSettings(): Promise<void> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π SettingsService –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const settings = await SettingsService.getBotSettings();
      
      this.settings = {
        tg_main_bot: process.env.TELEGRAM_BOT_USERNAME || '@strattera_bot',
        admin_chat_id: settings.admin_chat_id,
        courier_tg_id: settings.courier_tg_id,
        preview_msg: settings.welcome_message,
        bot_btn_title: settings.bot_btn_title,
        group_btn_title: settings.group_btn_title,
        tg_group: settings.tg_group,
        tg_support: settings.tg_support,
        first_video_id: settings.first_video_id,
        
        // –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        tg_msg_unpaid_main: settings.tg_msg_unpaid_main,
        tg_msg_paid_client: settings.tg_msg_paid_client,
        tg_msg_paid_admin: settings.tg_msg_paid_admin,
        tg_msg_on_processing_client: settings.tg_msg_on_processing_client,
        tg_msg_on_processing_courier: settings.tg_msg_on_processing_courier,
        tg_msg_set_track_num: settings.tg_msg_set_track_num,
        tg_msg_on_shipped_courier: settings.tg_msg_on_shipped_client,
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        webapp_url: settings.webapp_url || process.env.WEBAPP_URL,
        support_btn_title: settings.support_btn_title || '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'
      };

      logger.info('üìã Bot settings loaded via SettingsService', undefined, 'Grammy');

    } catch (error) {
      logger.error('‚ùå Failed to load bot settings', { error: (error as Error).message }, 'Grammy');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      this.settings = {
        admin_chat_id: '125861752',
        courier_tg_id: '7690550402',
        admin_ids: '125861752',
        preview_msg: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        bot_btn_title: '–ö–∞—Ç–∞–ª–æ–≥',
        group_btn_title: '–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞',
        tg_group: 'https://t.me/+2rTVT8IxtFozNDY0',
        tg_support: 'https://t.me/strattera_help'
      };
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware (–ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–∂–µ–Ω!)
   */
  private setupMiddleware(): void {
    // 1. –ú–µ—Ç—Ä–∏–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.bot.use(this.createMetricsMiddleware());
    
    // 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    this.bot.use(this.createAuthMiddleware());
    
    // 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.bot.use(this.createLoggingMiddleware());
    
    // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    this.bot.use(this.createValidationMiddleware());
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rate limiting
   */
  private setupRateLimit(): void {
    const rateLimitConfig: RateLimitConfig = {
      timeFrame: 60000, // 1 –º–∏–Ω—É—Ç–∞
      limit: 20, // 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
      keyGenerator: (ctx) => {
        // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
        if (this.isAdmin(ctx.from?.id)) {
          return `admin_${ctx.from?.id}`;
        }
        return ctx.from?.id.toString() || 'anonymous';
      },
      onLimitExceeded: async (ctx) => {
        await ctx.reply(
          '‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.',
          { reply_markup: undefined }
        );
      }
    };

    this.bot.use(limit(rateLimitConfig));
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ conversations
   */
  private setupConversations(): void {
    this.bot.use(conversations());
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º conversation –¥–ª—è –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
    this.bot.use(createConversation(this.trackingConversation.bind(this), 'tracking'));
    
    logger.info('üó£Ô∏è Conversations initialized', undefined, 'Grammy');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
   */
  private setupCommands(): void {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.command('start', async (ctx) => {
      await this.handleStartCommand(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    this.bot.command('admin', async (ctx) => {
      if (this.isAdmin(ctx.from?.id)) {
        await this.handleAdminCommand(ctx);
      } else {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /test (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    this.bot.command('test', async (ctx) => {
      if (this.isAdmin(ctx.from?.id)) {
        await this.handleTestCommand(ctx);
      }
    });

    logger.info('‚ö° Commands initialized', undefined, 'Grammy');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤
   */
  private setupCallbacks(): void {
    // Callback "–Ø –æ–ø–ª–∞—Ç–∏–ª"
    this.bot.callbackQuery(/^i_paid_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      await this.handleIPaidCallback(ctx, orderId);
    });

    // Callback "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞" (–∞–¥–º–∏–Ω)
    this.bot.callbackQuery(/^approve_payment_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      await this.handleApprovePaymentCallback(ctx, orderId);
    });

    // Callback "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä"
    this.bot.callbackQuery(/^submit_tracking_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      await this.handleSubmitTrackingCallback(ctx, orderId);
    });

    // Callback "–ù–∞–∑–∞–¥" –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
    this.bot.callbackQuery('track_back', async (ctx) => {
      await this.handleTrackBackCallback(ctx);
    });

    // –¢–µ—Å—Ç–æ–≤—ã–π callback
    this.bot.callbackQuery('test_callback', async (ctx) => {
      await ctx.answerCallbackQuery('‚úÖ grammY callback —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      await ctx.editMessageText('üéâ grammY callback —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
    });

    logger.info('üîò Callback handlers initialized', undefined, 'Grammy');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private setupMessages(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message:text', async (ctx) => {
      await this.handleTextMessage(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    this.bot.on('message:video', async (ctx) => {
      logger.info('üìπ Video message received', { 
        userId: ctx.from?.id,
        isAdmin: this.isAdmin(ctx.from?.id),
        videoFileId: ctx.message?.video?.file_id,
        videoSize: `${ctx.message?.video?.width}x${ctx.message?.video?.height}`
      }, 'Grammy');
      
      if (this.isAdmin(ctx.from?.id)) {
        await this.handleVideoMessage(ctx);
      } else {
        await this.sendWelcomeMessage(ctx);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    this.bot.on('message:photo', async (ctx) => {
      logger.info('üñº Photo message received', { 
        userId: ctx.from?.id,
        isAdmin: this.isAdmin(ctx.from?.id),
        photoCount: ctx.message?.photo?.length
      }, 'Grammy');
      
      if (this.isAdmin(ctx.from?.id)) {
        await this.handlePhotoMessage(ctx);
      } else {
        await this.sendWelcomeMessage(ctx);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–ù–ï —Ç–µ–∫—Å—Ç, –ù–ï –≤–∏–¥–µ–æ, –ù–ï —Ñ–æ—Ç–æ)
    this.bot.on('message', async (ctx) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ
      if (ctx.message?.text || ctx.message?.video || ctx.message?.photo) {
        return;
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      const messageType = ctx.message?.document ? 'document' :
                         ctx.message?.voice ? 'voice' :
                         ctx.message?.audio ? 'audio' :
                         ctx.message?.sticker ? 'sticker' :
                         ctx.message?.animation ? 'animation' :
                         ctx.message?.location ? 'location' :
                         ctx.message?.contact ? 'contact' : 'unknown';
                         
      logger.info('üì® Other message received', { 
        type: messageType,
        userId: ctx.from?.id,
        isAdmin: this.isAdmin(ctx.from?.id)
      }, 'Grammy');
      
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendWelcomeMessage(ctx);
    });

    logger.info('üí¨ Message handlers initialized', undefined, 'Grammy');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  private setupErrorHandling(): void {
    this.bot.catch(async (err) => {
      this.metrics.errorsCount++;
      
      const error = err.error as Error;
      logger.error('‚ùå grammY bot error', {
        error: error.message,
        stack: error.stack,
        updateType: err.ctx.update.update_id ? 'update' : 'unknown',
        userId: err.ctx.from?.id
      }, 'Grammy');

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (err.ctx.chat?.type === 'private') {
          await err.ctx.reply(
            'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            { reply_markup: undefined }
          );
        }
      } catch (replyError) {
        logger.error('‚ùå Failed to send error message to user', { error: (replyError as Error).message }, 'Grammy');
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
      if (this.settings.admin_chat_id) {
        try {
          await this.bot.api.sendMessage(
            this.settings.admin_chat_id,
            `üö® grammY Bot Error\n\n` +
            `Error: ${error.message}\n` +
            `User: ${err.ctx.from?.id}\n` +
            `Update: ${err.ctx.update.update_id || 'unknown'}\n` +
            `Time: ${new Date().toISOString()}`
          );
        } catch (adminNotifyError) {
          logger.error('‚ùå Failed to notify admin about error', { error: (adminNotifyError as Error).message }, 'Grammy');
        }
      }
    });
  }

  // ========================
  // MIDDLEWARE FACTORIES
  // ========================

  /**
   * Middleware –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private createMetricsMiddleware() {
    return async (ctx: ExtendedContext, next: () => Promise<void>) => {
      const startTime = performance.now();
      ctx.metrics = { startTime };

      try {
        await next();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const duration = performance.now() - startTime;
        this.updateMetrics(duration, false);
        
        ctx.metrics.processingDuration = duration;
        
      } catch (error) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏
        this.updateMetrics(performance.now() - startTime, true);
        throw error;
      }
    };
  }

  /**
   * Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private createAuthMiddleware() {
    return async (ctx: ExtendedContext, next: () => Promise<void>) => {
      if (ctx.from) {
        try {
          // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await UserService.handleTelegramStart({
            id: ctx.from.id,
            first_name: ctx.from.first_name,
            last_name: ctx.from.last_name,
            username: ctx.from.username
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
          ctx.user = user as any; // Temporary type fix

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          ctx.messageInfo = {
            isFromAdmin: this.isAdmin(ctx.from.id),
            isFromCourier: this.isCourier(ctx.from.id),
            processingStartTime: performance.now()
          };

        } catch (error) {
          logger.warn('‚ö†Ô∏è Failed to load user in auth middleware', { 
            error: (error as Error).message, 
            userId: ctx.from.id 
          }, 'Grammy');
        }
      }

      await next();
    };
  }

  /**
   * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private createLoggingMiddleware() {
    return async (ctx: ExtendedContext, next: () => Promise<void>) => {
      logger.info('üì® Processing update', {
        updateType: ctx.message ? 'message' : ctx.callbackQuery ? 'callback_query' : 'unknown',
        userId: ctx.from?.id,
        chatId: ctx.chat?.id,
        text: ctx.message?.text ? ctx.message.text.substring(0, 100) : undefined,
        callbackData: ctx.callbackQuery?.data
      }, 'Grammy');

      await next();

      const duration = ctx.metrics?.processingDuration;
      if (duration !== undefined) {
        logger.info('‚úÖ Update processed', {
          updateType: ctx.message ? 'message' : ctx.callbackQuery ? 'callback_query' : 'unknown',
          userId: ctx.from?.id,
          duration: Math.round(duration)
        }, 'Grammy');
      }
    };
  }

  /**
   * Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private createValidationMiddleware() {
    return async (ctx: ExtendedContext, next: () => Promise<void>) => {
      // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (!ctx.from) {
        logger.warn('‚ö†Ô∏è Received update without from field', undefined, 'Grammy');
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
      if (ctx.message?.text && ctx.message.text.length > 4000) {
        logger.warn('‚ö†Ô∏è Received too long message', { 
          userId: ctx.from.id, 
          length: ctx.message.text.length 
        }, 'Grammy');
        
        await ctx.reply('üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç.');
        return;
      }

      await next();
    };
  }

  // ========================
  // COMMAND HANDLERS
  // ========================

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
   */
  private async handleStartCommand(ctx: ExtendedContext): Promise<void> {
    try {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ auth middleware
      if (ctx.user?.isNew) {
        await this.notifyAdminNewUser(ctx.user);
      }

      await this.sendWelcomeMessage(ctx);
      
    } catch (error) {
      logger.error('‚ùå Error in /start command', { error: (error as Error).message }, 'Grammy');
      await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
   */
  private async handleAdminCommand(ctx: ExtendedContext): Promise<void> {
    const adminInfo = this.buildAdminInfoMessage();
    await ctx.reply(adminInfo, { parse_mode: 'HTML' });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
   */
  private async handleTestCommand(ctx: ExtendedContext): Promise<void> {
    await this.sendWelcomeMessage(ctx);
  }

  // ========================
  // CALLBACK HANDLERS (FULL IMPLEMENTATION)
  // ========================

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "–Ø –æ–ø–ª–∞—Ç–∏–ª" - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
   */
  private async handleIPaidCallback(ctx: CallbackContext, orderId: string): Promise<void> {
    try {
      const callbackAge = Date.now() - ((ctx.callbackQuery.message?.date || 0) * 1000);
      const MAX_CALLBACK_AGE = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
      
      if (callbackAge > MAX_CALLBACK_AGE) {
        logger.warn('‚ö†Ô∏è I_paid callback too old, skipping', { userId: ctx.from?.id, orderId }, 'Grammy');
        
        await ctx.reply('–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥.');
        return;
      }

      // –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        await ctx.answerCallbackQuery('üí≥ –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞...');
      } catch (callbackError: any) {
        if (callbackError.message?.includes('query is too old') || 
            callbackError.message?.includes('query ID is invalid')) {
          logger.warn('‚ö†Ô∏è I_paid callback query expired', { userId: ctx.from?.id, orderId }, 'Grammy');
        } else {
          logger.error('‚ùå Error answering i_paid callback', { error: callbackError.message }, 'Grammy');
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
      let user = null;
      try {
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞, –∑–∞—Ç–µ–º –∏–∑ –ë–î
        user = await RedisService.getUserData(ctx.from!.id.toString())
          .then(cachedUser => cachedUser || prisma.users.findUnique({ 
            where: { tg_id: BigInt(ctx.from!.id) }
          }))
          .catch(() => prisma.users.findUnique({ 
            where: { tg_id: BigInt(ctx.from!.id) }
          }));
      } catch (fetchError) {
        logger.error('‚ùå Error fetching user data', { error: (fetchError as Error).message, userId: ctx.from?.id }, 'Grammy');
        user = await prisma.users.findUnique({ 
          where: { tg_id: BigInt(ctx.from!.id) }
        });
      }

      if (!user) {
        logger.warn('‚ö†Ô∏è User not found for i_paid callback', { userId: ctx.from?.id, orderId }, 'Grammy');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å—Ç–∞—Ç—É—Å "paid"
      const updatedOrder = await prisma.orders.update({
        where: { id: BigInt(orderId) },
        data: {
          status: 1, // paid
          updated_at: new Date()
        },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true,
          bank_cards: true
        }
      });

      logger.info('‚úÖ Order status updated to paid', { orderId, userId: ctx.from?.id }, 'Grammy');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService
      const orderForReport = {
        ...updatedOrder,
        msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
      };
      
      // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ Redis –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      let notificationSent = false;
      if (RedisService.isAvailable()) {
        try {
          await RedisQueueService.addNotificationJob('order_status_change', {
            order: orderForReport,
            previousStatus: 0 // unpaid
          });
          notificationSent = true;
          logger.info('‚úÖ Notification job added to Redis queue', { orderId }, 'Grammy');
        } catch (redisError) {
          logger.warn('‚ö†Ô∏è Redis notification failed, using fallback', { error: (redisError as Error).message }, 'Grammy');
        }
      }
      
      // –ï—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      if (!notificationSent) {
        await ReportService.handleOrderStatusChange(orderForReport as any, 0);
        logger.info('‚úÖ Notification handled synchronously', { orderId }, 'Grammy');
      }

      // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (RedisService.isAvailable()) {
        try {
          await RedisService.setUserData(ctx.from!.id.toString(), user);
        } catch (cacheError) {
          logger.warn('‚ö†Ô∏è Failed to cache user data', { error: (cacheError as Error).message }, 'Grammy');
        }
      }

      this.metrics.callbacksHandled++;

    } catch (error) {
      logger.error('‚ùå Error in handleIPaidCallback', { 
        error: (error as Error).message, 
        orderId, 
        userId: ctx.from?.id 
      }, 'Grammy');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
      try {
        await ctx.answerCallbackQuery('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
      } catch (answerError) {
        logger.error('‚ùå Failed to send error callback answer', { error: answerError.message }, 'Grammy');
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞" (–∞–¥–º–∏–Ω) - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
   */
  private async handleApprovePaymentCallback(ctx: CallbackContext, orderId: string): Promise<void> {
    try {
      const callbackAge = Date.now() - ((ctx.callbackQuery.message?.date || 0) * 1000);
      const MAX_CALLBACK_AGE = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
      
      if (callbackAge > MAX_CALLBACK_AGE) {
        logger.warn('‚ö†Ô∏è Admin approve_payment callback too old', { userId: ctx.from?.id, orderId }, 'Grammy');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const messageBotId = ctx.callbackQuery.message?.from?.id;
      const isMainBot = messageBotId === 7612206140; // @telesklad_bot
      
      logger.info('ü§ñ Approve payment callback', { 
        botId: messageBotId, 
        isMainBot, 
        orderId, 
        adminId: ctx.from?.id 
      }, 'Grammy');

      // –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback
      try {
        await ctx.answerCallbackQuery('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...');
      } catch (callbackError: any) {
        if (callbackError.message?.includes('query is too old') || 
            callbackError.message?.includes('query ID is invalid')) {
          logger.warn('‚ö†Ô∏è Admin callback query expired', { userId: ctx.from?.id, orderId }, 'Grammy');
        } else {
          logger.error('‚ùå Error answering admin callback', { error: callbackError.message }, 'Grammy');
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const order = await prisma.orders.findUnique({
        where: { id: BigInt(orderId) },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true,
          bank_cards: true
        }
      });

      if (!order) {
        logger.warn('‚ö†Ô∏è Order not found for approve_payment', { orderId }, 'Grammy');
        return;
      }

      const previousStatus = order.status;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "processing" (–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ)
      const updatedOrder = await prisma.orders.update({
        where: { id: BigInt(orderId) },
        data: {
          status: 2, // processing
          paid_at: new Date(),
          updated_at: new Date()
        },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true,
          bank_cards: true
        }
      });

      logger.info('‚úÖ Order status updated to processing', { orderId, previousStatus }, 'Grammy');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
      const user = updatedOrder.users;
      const orderItems = updatedOrder.order_items;
      
      const itemsStr = orderItems.map(item => 
        `‚Ä¢ ${item.products.name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
      ).join(',\n');

      const bankCardInfo = updatedOrder.bank_cards 
        ? `${updatedOrder.bank_cards.name} ‚Äî ${updatedOrder.bank_cards.fio} ‚Äî ${updatedOrder.bank_cards.number}`
        : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

      const fullAddress = this.buildFullAddress(user);
      const fullName = this.getFullName(user);

      const deliveryCost = updatedOrder.deliverycost || 0;
      const totalPaid = Number(updatedOrder.total_amount) + Number(deliveryCost);

      let newMessageText = `üì≤ –ó–∞–∫–∞–∑ ‚Ññ${orderId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä—å–µ—Ä—É!\n\n` +
        `–ò—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª: ${totalPaid}‚ÇΩ\n\n` +
        `–ë–∞–Ω–∫: ${bankCardInfo}\n\n` +
        `üìÑ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n${itemsStr}\n\n` +
        `üìç –ê–¥—Ä–µ—Å:\n${fullAddress}\n\n` +
        `üë§ –§–ò–û:\n${fullName}\n\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω:\n${user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä development –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (process.env.NODE_ENV === 'development') {
        newMessageText = `‚ÄºÔ∏è‚ÄºÔ∏èDevelopment‚ÄºÔ∏è‚ÄºÔ∏è\n\n${newMessageText}`;
      }

      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–æ—Ç
      try {
        if (isMainBot) {
          // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (@telesklad_bot)
          const MAIN_BOT_TOKEN = '7612206140:AAHA6sV7VZLyUu0Ua1DAoULiFYehAkAjJK4';
          
          const editResponse = await fetch(`https://api.telegram.org/bot${MAIN_BOT_TOKEN}/editMessageText`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: ctx.callbackQuery.message?.chat.id,
              message_id: ctx.callbackQuery.message?.message_id,
              text: newMessageText,
              parse_mode: 'HTML',
              reply_markup: { inline_keyboard: [] } // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            })
          });

          const editResult = await editResponse.json();
          if (!editResult.ok) {
            logger.warn('‚ö†Ô∏è Could not edit message via main bot', { error: editResult.description }, 'Grammy');
          } else {
            logger.info('‚úÖ Message edited successfully via main bot', { orderId }, 'Grammy');
          }
        } else {
          // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–∏–π Grammy –±–æ—Ç
          await ctx.editMessageText(newMessageText, {
            parse_mode: 'HTML',
            reply_markup: undefined // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
          });
          logger.info('‚úÖ Message edited successfully via Grammy bot', { orderId }, 'Grammy');
        }
      } catch (editError) {
        logger.error('‚ùå Could not edit admin message', { error: editError.message, orderId }, 'Grammy');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService (–≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É)
      if (previousStatus !== updatedOrder.status) {
        const orderForReport = {
          ...updatedOrder,
          msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
        };
        await ReportService.handleOrderStatusChange(orderForReport as any, previousStatus);
        logger.info('‚úÖ Order status change notifications sent', { orderId, previousStatus, newStatus: updatedOrder.status }, 'Grammy');
      }

      this.metrics.callbacksHandled++;

    } catch (error) {
      logger.error('‚ùå Error in handleApprovePaymentCallback', { 
        error: error.message, 
        orderId, 
        userId: ctx.from?.id 
      }, 'Grammy');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä" - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
   */
  private async handleSubmitTrackingCallback(ctx: CallbackContext, orderId: string): Promise<void> {
    try {
      const text = ctx.callbackQuery.message?.text || '';
      const orderNumber = this.parseOrderNumber(text);
      const fullName = this.parseFullName(text);
      
      if (!orderNumber) {
        logger.warn('‚ö†Ô∏è Could not parse order number from tracking callback', { userId: ctx.from?.id }, 'Grammy');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–æ—Ç–∞
      const messageBotId = ctx.callbackQuery.message?.from?.id;
      const isMainBot = messageBotId === 7612206140; // @telesklad_bot
      
      logger.info('ü§ñ Submit tracking callback', { 
        botId: messageBotId, 
        isMainBot, 
        orderNumber, 
        userId: ctx.from?.id 
      }, 'Grammy');

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
      const keyboard = KeyboardUtils.createBackKeyboard('track_back');

      let msgId: number;

      if (isMainBot) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (@telesklad_bot)
        const MAIN_BOT_TOKEN = '7612206140:AAHA6sV7VZLyUu0Ua1DAoULiFYehAkAjJK4';
        
        const response = await fetch(`https://api.telegram.org/bot${MAIN_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: ctx.callbackQuery.message?.chat.id,
            text: `üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ${orderNumber}\n\nüë§ –§–ò–û:\n${fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
            reply_markup: keyboard
          })
        });

        const result = await response.json();
        if (result.ok) {
          msgId = result.result.message_id;
          logger.info('‚úÖ Tracking request sent via main bot', { orderNumber }, 'Grammy');
        } else {
          throw new Error(`Main bot API error: ${result.description}`);
        }

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        await fetch(`https://api.telegram.org/bot${MAIN_BOT_TOKEN}/answerCallbackQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            callback_query_id: ctx.callbackQuery.id,
            text: 'üìù –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ —á–∞—Ç'
          })
        });

      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Grammy –±–æ—Ç
        const msg = await ctx.reply(
          `üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ${orderNumber}\n\nüë§ –§–ò–û:\n${fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
          { reply_markup: keyboard }
        );
        
        msgId = msg.message_id;
        logger.info('‚úÖ Tracking request sent via Grammy bot', { orderNumber }, 'Grammy');

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await ctx.answerCallbackQuery('üìù –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ —á–∞—Ç');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è conversation
      await this.saveUserState(orderNumber, ctx.callbackQuery.message?.message_id || 0, msgId, ctx.chat?.id || 0);

      this.metrics.callbacksHandled++;

    } catch (error) {
      logger.error('‚ùå Error in handleSubmitTrackingCallback', { 
        error: error.message, 
        userId: ctx.from?.id 
      }, 'Grammy');
      
      try {
        await ctx.answerCallbackQuery('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } catch (answerError) {
        logger.error('‚ùå Failed to send error callback answer', { error: answerError.message }, 'Grammy');
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback "–ù–∞–∑–∞–¥" –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
   */
  private async handleTrackBackCallback(ctx: CallbackContext): Promise<void> {
    try {
      const text = ctx.callbackQuery.message?.text || '';
      const orderNumber = this.parseOrderNumber(text);
      
      if (!orderNumber) {
        logger.warn('‚ö†Ô∏è Could not parse order number from track_back callback', { userId: ctx.from?.id }, 'Grammy');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–æ—Ç–∞
      const messageBotId = ctx.callbackQuery.message?.from?.id;
      const isMainBot = messageBotId === 7612206140; // @telesklad_bot
      
      logger.info('ü§ñ Track back callback', { 
        botId: messageBotId, 
        isMainBot, 
        orderNumber, 
        userId: ctx.from?.id 
      }, 'Grammy');

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
      const order = await prisma.orders.findUnique({
        where: { id: BigInt(orderNumber) },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true
        }
      });

      if (!order) {
        logger.warn('‚ö†Ô∏è Order not found for track_back', { orderNumber }, 'Grammy');
        return;
      }

      const user = order.users;
      const orderItemsStr = order.order_items.map(item => 
        `‚Ä¢ ${item.products.name} ‚Äî ${item.quantity}—à—Ç.`
      ).join('\n');
      const fullAddress = this.buildFullAddress(user);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞
      const courierMsg = `üëÄ –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ${orderNumber}\n\n` +
        `üìÑ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n${orderItemsStr}\n\n` +
        `üìç –ê–¥—Ä–µ—Å:\n${fullAddress}\n\n` +
        `üìç –ò–Ω–¥–µ–∫—Å: ${user.postal_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
        `üë§ –§–ò–û:\n${this.getFullName(user)}\n\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω:\n${user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

      const keyboard = KeyboardUtils.createCourierKeyboard(orderNumber);

      if (isMainBot) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (@telesklad_bot)
        const MAIN_BOT_TOKEN = '7612206140:AAHA6sV7VZLyUu0Ua1DAoULiFYehAkAjJK4';
        
        const editResponse = await fetch(`https://api.telegram.org/bot${MAIN_BOT_TOKEN}/editMessageText`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: ctx.callbackQuery.message?.chat.id,
            message_id: ctx.callbackQuery.message?.message_id,
            text: courierMsg,
            reply_markup: keyboard
          })
        });

        const editResult = await editResponse.json();
        if (editResult.ok) {
          logger.info('‚úÖ Message updated via main bot', { orderNumber }, 'Grammy');
        } else {
          logger.warn('‚ö†Ô∏è Could not edit message via main bot', { error: editResult.description }, 'Grammy');
        }

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        await fetch(`https://api.telegram.org/bot${MAIN_BOT_TOKEN}/answerCallbackQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            callback_query_id: ctx.callbackQuery.id,
            text: '‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞'
          })
        });

      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Grammy –±–æ—Ç
        await ctx.editMessageText(courierMsg, {
          reply_markup: keyboard
        });

        await ctx.answerCallbackQuery('‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞');
        logger.info('‚úÖ Message updated via Grammy bot', { orderNumber }, 'Grammy');
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await RedisService.clearUserState(`user_${ctx.chat?.id}_state`);

      this.metrics.callbacksHandled++;

    } catch (error) {
      logger.error('‚ùå Error in handleTrackBackCallback', { 
        error: error.message, 
        userId: ctx.from?.id 
      }, 'Grammy');
      
      try {
        await ctx.answerCallbackQuery('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } catch (answerError) {
        logger.error('‚ùå Failed to send error callback answer', { error: answerError.message }, 'Grammy');
      }
    }
  }

  // ========================
  // MESSAGE HANDLERS (IMPLEMENTATIONS)
  // ========================

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
   */
  private async handleTextMessage(ctx: ExtendedContext): Promise<void> {
    const messageText = ctx.message?.text || '';
    const userId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    logger.info('üì® Text message received', { 
      userId, 
      chatId,
      textLength: messageText.length,
      textPreview: messageText.substring(0, 50)
    }, 'Grammy');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç –∫—É—Ä—å–µ—Ä–∞
    if (this.isCourier(userId)) {
      await this.handleCourierMessage(ctx, messageText);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ conversation
    const userState = await RedisService.getUserState(`user_${chatId}_state`);
    if (userState && userState.mode === 'tracking') {
      logger.info('üë§ User in tracking conversation, letting conversation handle', { 
        userId, 
        orderId: userState.order_id 
      }, 'Grammy');
      // Conversation —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      return;
    }

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await this.sendWelcomeMessage(ctx);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫—É—Ä—å–µ—Ä–∞ - –ø–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
   */
  private async handleCourierMessage(ctx: ExtendedContext, messageText: string): Promise<void> {
    const userId = ctx.from?.id;
    const chatId = ctx.chat?.id;

    logger.info('üì¶ Courier message detected', { 
      userId, 
      messageText: messageText.substring(0, 100) 
    }, 'Grammy');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞
      const courierState = await RedisService.getUserState(`user_${chatId}_state`);
      
      if (courierState && courierState.mode === 'tracking') {
        // –ö—É—Ä—å–µ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è conversation
        logger.info('üì¶ Courier in tracking conversation', { 
          userId, 
          orderId: courierState.order_id 
        }, 'Grammy');
        return;
      }

      // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      const possibleTrackingNumber = messageText.trim();
      
      if (TrackingConversation.isValidTrackingNumber(possibleTrackingNumber)) {
        await this.handleDirectTrackingInput(ctx, possibleTrackingNumber);
        return;
      }

      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      const orderNumber = this.parseOrderNumber(messageText);
      if (orderNumber) {
        await this.handleOrderReference(ctx, orderNumber, messageText);
        return;
      }

      // –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫—É—Ä—å–µ—Ä–∞
      if (messageText.toLowerCase().includes('–ø–æ–º–æ—â—å') || messageText === '/help') {
        await this.sendCourierHelp(ctx);
        return;
      }

      if (messageText.toLowerCase().includes('—Å—Ç–∞—Ç—É—Å') || messageText.toLowerCase().includes('–∑–∞–∫–∞–∑—ã')) {
        await this.sendCourierStatus(ctx);
        return;
      }

      // –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞
      await ctx.reply(
        'ü§î –ù–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n' +
        'üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
        '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏\n' +
        '‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "–ø–æ–º–æ—â—å" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏\n' +
        '‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ "—Å—Ç–∞—Ç—É—Å" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤\n\n' +
        'üì± –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ –∑–∞–∫–∞–∑–∞—Ö.',
        { parse_mode: 'HTML' }
      );

    } catch (error) {
      logger.error('‚ùå Error handling courier message', { 
        error: (error as Error).message,
        userId,
        messageText: messageText.substring(0, 50)
      }, 'Grammy');

      await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –∫—É—Ä—å–µ—Ä–æ–º
   */
  private async handleDirectTrackingInput(ctx: ExtendedContext, trackingNumber: string): Promise<void> {
    logger.info('üì¶ Direct tracking number input detected', { 
      userId: ctx.from?.id,
      trackingPreview: trackingNumber.substring(0, 5) + '...'
    }, 'Grammy');

    await ctx.reply(
      `üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: <code>${trackingNumber}</code>\n\n` +
      `–î–ª—è –∫–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ —ç—Ç–æ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä?\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∑–∞–∫–∞–∑–æ–º.`,
      { parse_mode: 'HTML' }
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º
   */
  private async handleOrderReference(ctx: ExtendedContext, orderNumber: string, fullMessage: string): Promise<void> {
    logger.info('üìã Order reference detected in courier message', { 
      userId: ctx.from?.id,
      orderNumber,
      message: fullMessage.substring(0, 100)
    }, 'Grammy');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      const order = await TrackingConversation.getOrderInfo(orderNumber);
      
      if (!order) {
        await ctx.reply(`‚ùå –ó–∞–∫–∞–∑ ‚Ññ${orderNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      const orderInfo = this.buildCourierOrderInfo(order);
      const keyboard = KeyboardUtils.createCourierKeyboard(orderNumber);

      await ctx.reply(orderInfo, {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      });

    } catch (error) {
      logger.error('‚ùå Error handling order reference', { 
        error: (error as Error).message,
        orderNumber
      }, 'Grammy');

      await ctx.reply(`üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ ‚Ññ${orderNumber}.`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—å–µ—Ä—É
   */
  private async sendCourierHelp(ctx: ExtendedContext): Promise<void> {
    const helpMessage = `üìã <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞</b>\n\n` +
      `üöö <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n` +
      `‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n` +
      `‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤ –∫ –∑–∞–∫–∞–∑–∞–º\n` +
      `‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n` +
      `üìù <b>–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:</b>\n` +
      `1. –ù–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º\n` +
      `2. –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä"\n` +
      `3. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ —á–∞—Ç\n` +
      `4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É\n\n` +
      `üî¢ <b>–§–æ—Ä–º–∞—Ç—ã —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤:</b>\n` +
      `‚Ä¢ –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏: RA123456789RU\n` +
      `‚Ä¢ –°–î–≠–ö: 1234567890\n` +
      `‚Ä¢ DPD: –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n\n` +
      `üí¨ <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
      `‚Ä¢ "—Å—Ç–∞—Ç—É—Å" - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã\n` +
      `‚Ä¢ "–ø–æ–º–æ—â—å" - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`;

    await ctx.reply(helpMessage, { parse_mode: 'HTML' });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –∫—É—Ä—å–µ—Ä—É
   */
  private async sendCourierStatus(ctx: ExtendedContext): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "processing" (–≥–æ—Ç–æ–≤—ã–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ)
      const processingOrders = await prisma.orders.findMany({
        where: { status: 2 }, // processing
        include: {
          users: true,
          order_items: {
            include: {
              products: true
            }
          }
        },
        orderBy: { created_at: 'desc' },
        take: 10 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
      });

      if (processingOrders.length === 0) {
        await ctx.reply('‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Ç.');
        return;
      }

      let statusMessage = `üìä <b>–ó–∞–∫–∞–∑—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${processingOrders.length}</b>\n\n`;

      processingOrders.forEach((order, index) => {
        const orderItems = order.order_items.map(item => 
          `${item.products.name} (${item.quantity}—à—Ç.)`
        ).join(', ');

        statusMessage += `${index + 1}. <b>‚Ññ${order.id}</b>\n` +
          `üìÑ ${orderItems}\n` +
          `üë§ ${this.getFullName(order.users)}\n` +
          `üìÖ ${order.created_at.toLocaleDateString('ru-RU')}\n\n`;
      });

      statusMessage += `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤.`;

      await ctx.reply(statusMessage, { parse_mode: 'HTML' });

    } catch (error) {
      logger.error('‚ùå Error getting courier status', { 
        error: (error as Error).message,
        userId: ctx.from?.id 
      }, 'Grammy');

      await ctx.reply('üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤.');
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
   */
  private buildCourierOrderInfo(order: any): string {
    const user = order.users;
    const orderItems = order.order_items;
    
    const itemsStr = orderItems.map((item: any) => 
      `‚Ä¢ ${item.products.name} ‚Äî ${item.quantity}—à—Ç.`
    ).join('\n');

    const fullAddress = this.buildFullAddress(user);

    return `üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ${order.id}</b>\n\n` +
      `üìÑ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n${itemsStr}\n\n` +
      `üìç <b>–ê–¥—Ä–µ—Å:</b>\n${fullAddress}\n\n` +
      `üë§ <b>–§–ò–û:</b> ${this.getFullName(user)}\n` +
      `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> ${order.created_at.toLocaleDateString('ru-RU')}\n\n` +
      `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${this.getOrderStatusText(order.status)}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  private getOrderStatusText(status: number): string {
    const statusMap = {
      0: '–ù–µ–æ–ø–ª–∞—á–µ–Ω',
      1: '–û–ø–ª–∞—á–µ–Ω',
      2: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      3: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      4: '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      5: '–û—Ç–º–µ–Ω–µ–Ω'
    };
    
    return statusMap[status as keyof typeof statusMap] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  private async handleVideoMessage(ctx: ExtendedContext): Promise<void> {
    const video = ctx.message?.video;
    if (video) {
      await ctx.reply(
        `üìπ *–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n` +
        `üÜî *File ID:* \`${video.file_id}\`\n` +
        `üìè *–†–∞–∑–º–µ—Ä:* ${video.width}x${video.height}\n` +
        `‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${video.duration} —Å–µ–∫`,
        { parse_mode: 'Markdown' }
      );
      
      logger.info('üìπ Video received from admin', { 
        fileId: video.file_id,
        userId: ctx.from?.id,
        size: `${video.width}x${video.height}`
      }, 'Grammy');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  private async handlePhotoMessage(ctx: ExtendedContext): Promise<void> {
    const photos = ctx.message?.photo;
    if (photos && photos.length > 0) {
      const bestPhoto = photos[photos.length - 1];
      await ctx.reply(
        `üñº *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n` +
        `üÜî *File ID:* \`${bestPhoto.file_id}\`\n` +
        `üìè *–†–∞–∑–º–µ—Ä:* ${bestPhoto.width}x${bestPhoto.height}`,
        { parse_mode: 'Markdown' }
      );
      
      logger.info('üñº Photo received from admin', { 
        fileId: bestPhoto.file_id,
        userId: ctx.from?.id,
        size: `${bestPhoto.width}x${bestPhoto.height}`
      }, 'Grammy');
    }
  }

  /**
   * Conversation –¥–ª—è –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TrackingConversation
   */
  private async trackingConversation(conversation: Conversation<ExtendedContext>, ctx: ExtendedContext): Promise<void> {
    logger.info('üó£Ô∏è Starting tracking conversation via GrammyBotWorker', { userId: ctx.from?.id }, 'Grammy');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ TrackingConversation
    await TrackingConversation.trackingFlow(conversation, ctx);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ conversations
    this.metrics.conversationsStarted++;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async sendWelcomeMessage(ctx: ExtendedContext): Promise<void> {
    const welcomeText = this.settings.preview_msg || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!';
    const keyboard = KeyboardUtils.createWelcomeKeyboard();
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—Å—Ç—å video_id
      if (this.settings.first_video_id) {
        try {
          await ctx.replyWithVideo(this.settings.first_video_id, {
            caption: welcomeText,
            reply_markup: keyboard
          });
          logger.info('‚úÖ Welcome video sent', { userId: ctx.from?.id }, 'Grammy');
          return;
        } catch (videoError) {
          logger.warn('‚ö†Ô∏è Failed to send video, falling back to text', { 
            error: (videoError as Error).message,
            userId: ctx.from?.id 
          }, 'Grammy');
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(welcomeText, {
        reply_markup: keyboard
      });
      logger.info('‚úÖ Welcome message sent', { userId: ctx.from?.id }, 'Grammy');
      
    } catch (error) {
      logger.error('‚ùå Error sending welcome message', { 
        error: (error as Error).message,
        userId: ctx.from?.id 
      }, 'Grammy');
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  private async notifyAdminNewUser(user: any): Promise<void> {
    if (!this.settings.admin_chat_id) return;

    const message = `üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!*\n\n` +
      `üë§ ID: ${user.id}\n` +
      `üì± Telegram ID: ${user.tg_id}\n` +
      `üëã –ò–º—è: ${user.first_name || ''} ${user.last_name || ''}\n` +
      `üîó Username: ${user.username ? '@' + user.username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;

    try {
      await this.bot.api.sendMessage(this.settings.admin_chat_id, message, { parse_mode: 'Markdown' });
      logger.info('‚úÖ New user notification sent to admin', { userId: user.id }, 'Grammy');
    } catch (error) {
      logger.error('‚ùå Failed to notify admin about new user', { error: (error as Error).message }, 'Grammy');
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
   */
  private buildAdminInfoMessage(): string {
    return `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ grammY –±–æ—Ç–∞*\n\n` +
      `ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${this.settings.tg_main_bot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üîò –ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: ${this.settings.bot_btn_title || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üë• –ö–Ω–æ–ø–∫–∞ –≥—Ä—É–ø–ø—ã: ${this.settings.group_btn_title || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üîó –ì—Ä—É–ø–ø–∞: ${this.settings.tg_group || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${this.settings.tg_support || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üìπ –í–∏–¥–µ–æ ID: ${this.settings.first_video_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `üìä *–ú–µ—Ç—Ä–∏–∫–∏:*\n` +
      `- –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.metrics.messagesProcessed}\n` +
      `- –û—à–∏–±–æ–∫: ${this.metrics.errorsCount}\n` +
      `- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${this.metrics.averageResponseTime.toFixed(2)}ms\n` +
      `- Callback'–æ–≤: ${this.metrics.callbacksHandled}\n\n` +
      `üß™ *grammY Migration Mode Active*`;
  }

  // ========================
  // UTILITY METHODS (IMPLEMENTATIONS)
  // ========================

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private parseOrderNumber(text: string): string | null {
    const match = text.match(/‚Ññ(\d+)/);
    return match ? match[1] : null;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –§–ò–û –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private parseFullName(text: string): string | null {
    const match = text.match(/–§–ò–û:\s*(.+?)(?:\n|$)/);
    return match ? match[1].trim() : null;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è tracking conversation
   */
  private async saveUserState(orderId: string, msgId: number, hMsgId: number, chatId: number): Promise<void> {
    const key = `user_${chatId}_state`;
    const state = {
      order_id: BigInt(orderId),
      msg_id: msgId,
      h_msg: hMsgId,
      timestamp: Date.now(),
      mode: 'tracking'
    };
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis —Å TTL 5 –º–∏–Ω—É—Ç
      await RedisService.setUserState(key, state, 300);
      logger.info('‚úÖ User state saved for tracking', { orderId, chatId }, 'Grammy');
    } catch (error) {
      logger.warn('‚ö†Ô∏è Failed to save user state', { error: error.message, orderId, chatId }, 'Grammy');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private getFullName(user: any): string {
    const firstName = user.first_name || user.first_name_raw || '';
    const lastName = user.last_name || user.last_name_raw || '';
    const middleName = user.middle_name || '';
    
    return `${firstName} ${lastName} ${middleName}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private buildFullAddress(user: any): string {
    const parts = [];
    
    if (user.postal_code) parts.push(`${user.postal_code}`);
    if (user.address) parts.push(user.address);
    if (user.street) parts.push(user.street);
    if (user.home) parts.push(`–¥–æ–º ${user.home}`);
    if (user.apartment) parts.push(`–∫–≤. ${user.apartment}`);
    if (user.build) parts.push(`–∫–æ—Ä–ø. ${user.build}`);
    
    return parts.join(', ') || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
  }

  // ========================
  // UTILITY METHODS
  // ========================

  private isAdmin(userId?: number): boolean {
    if (!userId) return false;
    const adminChatId = this.settings.admin_chat_id || '125861752';
    return userId.toString() === adminChatId;
  }

  private isCourier(userId?: number): boolean {
    if (!userId) return false;
    const courierId = this.settings.courier_tg_id || '7690550402';
    return userId.toString() === courierId;
  }

  private updateMetrics(duration: number, isError: boolean): void {
    this.metrics.messagesProcessed++;
    
    if (isError) {
      this.metrics.errorsCount++;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    const totalDuration = this.metrics.averageResponseTime * (this.metrics.messagesProcessed - 1) + duration;
    this.metrics.averageResponseTime = totalDuration / this.metrics.messagesProcessed;
  }

  // ========================
  // PUBLIC API
  // ========================

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ webhook callback –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Next.js
   */
  getWebhookCallback() {
    if (!this.bot) {
      throw new Error('Bot not initialized');
    }
    
    return webhookCallback(this.bot, 'next-js');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ update –æ—Ç Telegram webhook
   */
  async handleUpdate(update: any): Promise<void> {
    if (!this.isInitialized || !this.bot) {
      throw new Error('Bot not initialized! Either call `await bot.init()`, or directly set the `botInfo` option in the `Bot` constructor to specify a known bot info object.');
    }

    try {
      logger.info('üì® Processing Telegram update', { 
        updateId: update.update_id,
        updateType: Object.keys(update).filter(key => key !== 'update_id')[0]
      }, 'Grammy');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update —á–µ—Ä–µ–∑ grammY bot
      await this.bot.handleUpdate(update);
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      this.metrics.messagesProcessed++;

      logger.info('‚úÖ Update processed successfully', { 
        updateId: update.update_id 
      }, 'Grammy');

    } catch (error) {
      this.metrics.errorsCount++;
      
      logger.error('‚ùå Failed to process update', { 
        error: (error as Error).message,
        updateId: update.update_id,
        stack: (error as Error).stack
      }, 'Grammy');
      
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  public getMetrics(): PerformanceMetrics {
    return { ...this.metrics };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
   */
  public getSettings(): BotSettings {
    return { ...this.settings };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  public isReady(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  public async getBotInfo() {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized');
    }
    return await this.bot.api.getMe();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook'–∞
   */
  public async setWebhook(url: string, secretToken?: string) {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized');
    }
    
    return await this.bot.api.setWebhook(url, {
      allowed_updates: ['message', 'callback_query'],
      secret_token: secretToken
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook'–µ
   */
  public async getWebhookInfo() {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized');
    }
    
    return await this.bot.api.getWebhookInfo();
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ webhook'–∞
   */
  public async deleteWebhook() {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized');
    }
    
    return await this.bot.api.deleteWebhook();
  }

  /**
   * –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
   */
  public resetMetrics(): void {
    this.metrics = {
      messagesProcessed: 0,
      errorsCount: 0,
      averageResponseTime: 0,
      callbacksHandled: 0,
      conversationsStarted: 0,
      webhookRequestsReceived: 0,
      lastResetTime: new Date()
    };
  }
}