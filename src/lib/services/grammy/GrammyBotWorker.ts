import { Bot, webhookCallback } from 'grammy';
import { conversations, createConversation } from '@grammyjs/conversations';
import { limit } from '@grammyjs/ratelimiter';
import { run } from '@grammyjs/runner';

import {
  ExtendedContext,
  CallbackContext,
  ConversationContext,
  BotSettings,
  PerformanceMetrics,
  RateLimitConfig,
  OrderData,
  UserState
} from './types/grammy-types';

import { prisma } from '@/libs/prismaDb';
import { TelegramTokenService } from '../telegram-token.service';
import { UserService } from '../UserService';
import { ReportService } from '../ReportService';
import { RedisService } from '../redis.service';
import { CacheService } from '../cache.service';
import { logger } from '@/lib/logger';

/**
 * GrammyBotWorker - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ TelegramBotWorker –Ω–∞ –±–∞–∑–µ grammY
 * 
 * –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π:
 * - –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å 100%
 * - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
 * - –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ conversations
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - Rate limiting –∏–∑ –∫–æ—Ä–æ–±–∫–∏
 * - Middleware pattern
 * - –õ—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
export class GrammyBotWorker {
  private bot: Bot<ExtendedContext>;
  private settings: BotSettings = {};
  private metrics: PerformanceMetrics = {
    messagesProcessed: 0,
    errorsCount: 0,
    averageResponseTime: 0,
    callbacksHandled: 0,
    conversationsStarted: 0,
    webhookRequestsReceived: 0,
    lastResetTime: new Date()
  };
  
  private static instance: GrammyBotWorker | null = null;
  private isInitialized = false;

  private constructor() {
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ initialize)
    this.bot = new Bot('placeholder-token');
  }

  static getInstance(): GrammyBotWorker {
    if (!this.instance) {
      this.instance = new GrammyBotWorker();
    }
    return this.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
   */
  async initialize(token?: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
      const botToken = token || await TelegramTokenService.getWebappBotToken();
      if (!botToken) {
        throw new Error('Telegram bot token not found');
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
      this.bot = new Bot<ExtendedContext>(botToken);

      logger.info('üöÄ Initializing grammY bot...', undefined, 'Grammy');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      await this.initializeRedis();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      await this.loadSettings();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!)
      this.setupMiddleware();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º rate limiting
      this.setupRateLimit();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º conversations
      this.setupConversations();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.setupCommands();
      this.setupCallbacks();
      this.setupMessages();

      // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      this.setupErrorHandling();

      this.isInitialized = true;
      logger.info('‚úÖ GrammyBotWorker initialized successfully', undefined, 'Grammy');

    } catch (error) {
      logger.error('‚ùå Failed to initialize GrammyBotWorker', { error: error.message }, 'Grammy');
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å–µ—Ä–≤–∏—Å–∞
   */
  private async initializeRedis(): Promise<void> {
    try {
      await RedisService.initialize();
      if (RedisService.isAvailable()) {
        logger.info('‚úÖ Redis initialized for Grammy', undefined, 'Grammy');
      }
    } catch (error) {
      logger.warn('‚ö†Ô∏è Redis not available, using memory fallback', { error: error.message }, 'Grammy');
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async loadSettings(): Promise<void> {
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
      const cachedSettings = await CacheService.getBotSettings();
      
      if (Object.keys(cachedSettings).length > 0) {
        this.settings = cachedSettings as BotSettings;
        logger.info('üìã Bot settings loaded from cache', undefined, 'Grammy');
      } else {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const settings = await prisma.settings.findMany();
        this.settings = settings.reduce((acc, setting) => {
          if (setting.variable && setting.value) {
            acc[setting.variable as keyof BotSettings] = setting.value;
          }
          return acc;
        }, {} as BotSettings);
        logger.info('üìã Bot settings loaded from database', undefined, 'Grammy');
      }

      // Fallback –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
      this.settings = {
        ...this.settings,
        tg_main_bot: this.settings.tg_main_bot || process.env.TELEGRAM_BOT_USERNAME || '@strattera_bot',
        admin_chat_id: this.settings.admin_chat_id || process.env.TELEGRAM_ADMIN_CHAT_ID || '125861752',
        courier_tg_id: this.settings.courier_tg_id || process.env.TELEGRAM_COURIER_ID || '7690550402',
        admin_ids: this.settings.admin_ids || process.env.TELEGRAM_ADMIN_IDS || '125861752',
        preview_msg: this.settings.preview_msg || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        bot_btn_title: this.settings.bot_btn_title || '–ö–∞—Ç–∞–ª–æ–≥',
        group_btn_title: this.settings.group_btn_title || '–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞',
        tg_group: this.settings.tg_group || 'https://t.me/+2rTVT8IxtFozNDY0',
        tg_support: this.settings.tg_support || 'https://t.me/strattera_help'
      };

    } catch (error) {
      logger.error('‚ùå Failed to load bot settings', { error: error.message }, 'Grammy');
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      this.settings = {
        admin_chat_id: '125861752',
        courier_tg_id: '7690550402',
        admin_ids: '125861752',
        preview_msg: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        bot_btn_title: '–ö–∞—Ç–∞–ª–æ–≥',
        group_btn_title: '–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞'
      };
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware (–ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–∂–µ–Ω!)
   */
  private setupMiddleware(): void {
    // 1. –ú–µ—Ç—Ä–∏–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.bot.use(this.createMetricsMiddleware());
    
    // 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    this.bot.use(this.createAuthMiddleware());
    
    // 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.bot.use(this.createLoggingMiddleware());
    
    // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    this.bot.use(this.createValidationMiddleware());
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rate limiting
   */
  private setupRateLimit(): void {
    const rateLimitConfig: RateLimitConfig = {
      timeFrame: 60000, // 1 –º–∏–Ω—É—Ç–∞
      limit: 20, // 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
      keyGenerator: (ctx) => {
        // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
        if (this.isAdmin(ctx.from?.id)) {
          return `admin_${ctx.from?.id}`;
        }
        return ctx.from?.id.toString() || 'anonymous';
      },
      onLimitExceeded: async (ctx) => {
        await ctx.reply(
          '‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.',
          { reply_markup: undefined }
        );
      }
    };

    this.bot.use(limit(rateLimitConfig));
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ conversations
   */
  private setupConversations(): void {
    this.bot.use(conversations());
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º conversation –¥–ª—è –≤–≤–æ–¥–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
    this.bot.use(createConversation(this.trackingConversation, 'tracking'));
    
    logger.info('üó£Ô∏è Conversations initialized', undefined, 'Grammy');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
   */
  private setupCommands(): void {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.command('start', async (ctx) => {
      await this.handleStartCommand(ctx);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    this.bot.command('admin', async (ctx) => {
      if (this.isAdmin(ctx.from?.id)) {
        await this.handleAdminCommand(ctx);
      } else {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /test (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    this.bot.command('test', async (ctx) => {
      if (this.isAdmin(ctx.from?.id)) {
        await this.handleTestCommand(ctx);
      }
    });

    logger.info('‚ö° Commands initialized', undefined, 'Grammy');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'–æ–≤
   */
  private setupCallbacks(): void {
    // Callback "–Ø –æ–ø–ª–∞—Ç–∏–ª"
    this.bot.callbackQuery(/^i_paid_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      await this.handleIPaidCallback(ctx, orderId);
    });

    // Callback "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞" (–∞–¥–º–∏–Ω)
    this.bot.callbackQuery(/^approve_payment_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      await this.handleApprovePaymentCallback(ctx, orderId);
    });

    // Callback "–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä"
    this.bot.callbackQuery(/^submit_tracking_(\d+)$/, async (ctx) => {
      const orderId = ctx.match[1];
      await this.handleSubmitTrackingCallback(ctx, orderId);
    });

    // Callback "–ù–∞–∑–∞–¥" –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
    this.bot.callbackQuery('track_back', async (ctx) => {
      await this.handleTrackBackCallback(ctx);
    });

    // –¢–µ—Å—Ç–æ–≤—ã–π callback
    this.bot.callbackQuery('test_callback', async (ctx) => {
      await ctx.answerCallbackQuery('‚úÖ grammY callback —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      await ctx.editMessageText('üéâ grammY callback —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
    });

    logger.info('üîò Callback handlers initialized', undefined, 'Grammy');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private setupMessages(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message:text', async (ctx) => {
      await this.handleTextMessage(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    this.bot.on('message:video', async (ctx) => {
      if (this.isAdmin(ctx.from?.id)) {
        await this.handleVideoMessage(ctx);
      } else {
        await this.sendWelcomeMessage(ctx);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    this.bot.on('message:photo', async (ctx) => {
      if (this.isAdmin(ctx.from?.id)) {
        await this.handlePhotoMessage(ctx);
      } else {
        await this.sendWelcomeMessage(ctx);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (ctx) => {
      logger.info('üì® Unknown message type received', { 
        type: ctx.message?.photo ? 'photo' : 'unknown',
        userId: ctx.from?.id 
      }, 'Grammy');
      
      await this.sendWelcomeMessage(ctx);
    });

    logger.info('üí¨ Message handlers initialized', undefined, 'Grammy');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  private setupErrorHandling(): void {
    this.bot.catch(async (err) => {
      this.metrics.errorsCount++;
      
      logger.error('‚ùå grammY bot error', {
        error: err.error.message,
        stack: err.error.stack,
        updateType: err.ctx.updateType,
        userId: err.ctx.from?.id
      }, 'Grammy');

      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (err.ctx.chat?.type === 'private') {
          await err.ctx.reply(
            'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            { reply_markup: undefined }
          );
        }
      } catch (replyError) {
        logger.error('‚ùå Failed to send error message to user', { error: replyError.message }, 'Grammy');
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
      if (this.settings.admin_chat_id) {
        try {
          await this.bot.api.sendMessage(
            this.settings.admin_chat_id,
            `üö® grammY Bot Error\n\n` +
            `Error: ${err.error.message}\n` +
            `User: ${err.ctx.from?.id}\n` +
            `Update: ${err.ctx.updateType}\n` +
            `Time: ${new Date().toISOString()}`
          );
        } catch (adminNotifyError) {
          logger.error('‚ùå Failed to notify admin about error', { error: adminNotifyError.message }, 'Grammy');
        }
      }
    });
  }

  // ========================
  // MIDDLEWARE FACTORIES
  // ========================

  /**
   * Middleware –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private createMetricsMiddleware() {
    return async (ctx: ExtendedContext, next: () => Promise<void>) => {
      const startTime = performance.now();
      ctx.metrics = { startTime };

      try {
        await next();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const duration = performance.now() - startTime;
        this.updateMetrics(duration, false);
        
        ctx.metrics.processingDuration = duration;
        
      } catch (error) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–∫–∏
        this.updateMetrics(performance.now() - startTime, true);
        throw error;
      }
    };
  }

  /**
   * Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private createAuthMiddleware() {
    return async (ctx: ExtendedContext, next: () => Promise<void>) => {
      if (ctx.from) {
        try {
          // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await UserService.handleTelegramStart({
            id: ctx.from.id,
            first_name: ctx.from.first_name,
            last_name: ctx.from.last_name,
            username: ctx.from.username
          });

          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
          ctx.user = user;

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          ctx.messageInfo = {
            isFromAdmin: this.isAdmin(ctx.from.id),
            isFromCourier: this.isCourier(ctx.from.id),
            processingStartTime: performance.now()
          };

        } catch (error) {
          logger.warn('‚ö†Ô∏è Failed to load user in auth middleware', { 
            error: error.message, 
            userId: ctx.from.id 
          }, 'Grammy');
        }
      }

      await next();
    };
  }

  /**
   * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private createLoggingMiddleware() {
    return async (ctx: ExtendedContext, next: () => Promise<void>) => {
      logger.info('üì® Processing update', {
        updateType: ctx.updateType,
        userId: ctx.from?.id,
        chatId: ctx.chat?.id,
        text: ctx.message?.text ? ctx.message.text.substring(0, 100) : undefined,
        callbackData: ctx.callbackQuery?.data
      }, 'Grammy');

      await next();

      const duration = ctx.metrics?.processingDuration;
      if (duration !== undefined) {
        logger.info('‚úÖ Update processed', {
          updateType: ctx.updateType,
          userId: ctx.from?.id,
          duration: Math.round(duration)
        }, 'Grammy');
      }
    };
  }

  /**
   * Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private createValidationMiddleware() {
    return async (ctx: ExtendedContext, next: () => Promise<void>) => {
      // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (!ctx.from) {
        logger.warn('‚ö†Ô∏è Received update without from field', undefined, 'Grammy');
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
      if (ctx.message?.text && ctx.message.text.length > 4000) {
        logger.warn('‚ö†Ô∏è Received too long message', { 
          userId: ctx.from.id, 
          length: ctx.message.text.length 
        }, 'Grammy');
        
        await ctx.reply('üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç.');
        return;
      }

      await next();
    };
  }

  // ========================
  // COMMAND HANDLERS
  // ========================

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
   */
  private async handleStartCommand(ctx: ExtendedContext): Promise<void> {
    try {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ auth middleware
      if (ctx.user?.isNew) {
        await this.notifyAdminNewUser(ctx.user);
      }

      await this.sendWelcomeMessage(ctx);
      
    } catch (error) {
      logger.error('‚ùå Error in /start command', { error: error.message }, 'Grammy');
      await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
   */
  private async handleAdminCommand(ctx: ExtendedContext): Promise<void> {
    const adminInfo = this.buildAdminInfoMessage();
    await ctx.reply(adminInfo, { parse_mode: 'HTML' });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
   */
  private async handleTestCommand(ctx: ExtendedContext): Promise<void> {
    await this.sendWelcomeMessage(ctx);
  }

  // ========================
  // PLACEHOLDER METHODS
  // ========================
  // –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö

  private async handleIPaidCallback(ctx: CallbackContext, orderId: string): Promise<void> {
    // TODO: Implement in next iteration
    await ctx.answerCallbackQuery('üí≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É...');
    logger.info('üí≥ i_paid callback (placeholder)', { orderId, userId: ctx.from?.id }, 'Grammy');
  }

  private async handleApprovePaymentCallback(ctx: CallbackContext, orderId: string): Promise<void> {
    // TODO: Implement in next iteration
    await ctx.answerCallbackQuery('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...');
    logger.info('‚úÖ approve_payment callback (placeholder)', { orderId, userId: ctx.from?.id }, 'Grammy');
  }

  private async handleSubmitTrackingCallback(ctx: CallbackContext, orderId: string): Promise<void> {
    // TODO: Implement in next iteration
    await ctx.answerCallbackQuery('üì¶ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä...');
    logger.info('üì¶ submit_tracking callback (placeholder)', { orderId, userId: ctx.from?.id }, 'Grammy');
  }

  private async handleTrackBackCallback(ctx: CallbackContext): Promise<void> {
    // TODO: Implement in next iteration
    await ctx.answerCallbackQuery('‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥...');
    logger.info('‚¨ÖÔ∏è track_back callback (placeholder)', { userId: ctx.from?.id }, 'Grammy');
  }

  private async handleTextMessage(ctx: ExtendedContext): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç –∫—É—Ä—å–µ—Ä–∞
    if (this.isCourier(ctx.from?.id)) {
      logger.info('üì¶ Courier message detected (placeholder)', { 
        userId: ctx.from?.id, 
        text: ctx.message?.text?.substring(0, 50) 
      }, 'Grammy');
      return;
    }

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await this.sendWelcomeMessage(ctx);
  }

  private async handleVideoMessage(ctx: ExtendedContext): Promise<void> {
    // TODO: Implement admin video handling
    const video = ctx.message?.video;
    if (video) {
      await ctx.reply(
        `üìπ *–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n` +
        `üÜî *File ID:* \`${video.file_id}\`\n` +
        `üìè *–†–∞–∑–º–µ—Ä:* ${video.width}x${video.height}\n` +
        `‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${video.duration} —Å–µ–∫`,
        { parse_mode: 'Markdown' }
      );
    }
  }

  private async handlePhotoMessage(ctx: ExtendedContext): Promise<void> {
    // TODO: Implement admin photo handling
    const photos = ctx.message?.photo;
    if (photos && photos.length > 0) {
      const bestPhoto = photos[photos.length - 1];
      await ctx.reply(
        `üñº *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n` +
        `üÜî *File ID:* \`${bestPhoto.file_id}\`\n` +
        `üìè *–†–∞–∑–º–µ—Ä:* ${bestPhoto.width}x${bestPhoto.height}`,
        { parse_mode: 'Markdown' }
      );
    }
  }

  private async trackingConversation(conversation: any, ctx: ExtendedContext): Promise<void> {
    // TODO: Implement tracking conversation
    logger.info('üó£Ô∏è Tracking conversation started (placeholder)', { userId: ctx.from?.id }, 'Grammy');
  }

  private async sendWelcomeMessage(ctx: ExtendedContext): Promise<void> {
    // TODO: Implement full welcome message with keyboard
    const welcomeText = this.settings.preview_msg || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!';
    
    await ctx.reply(
      `${welcomeText}\n\nüéâ *grammY Migration Test Mode*\n\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–æ—Ç–∞.`,
      { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üß™ Test Callback', callback_data: 'test_callback' }
          ]]
        }
      }
    );
  }

  private async notifyAdminNewUser(user: any): Promise<void> {
    if (!this.settings.admin_chat_id) return;

    const message = `üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!*\n\n` +
      `üë§ ID: ${user.id}\n` +
      `üì± Telegram ID: ${user.tg_id}\n` +
      `üëã –ò–º—è: ${user.first_name || ''} ${user.last_name || ''}\n` +
      `üîó Username: ${user.username ? '@' + user.username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;

    try {
      await this.bot.api.sendMessage(this.settings.admin_chat_id, message, { parse_mode: 'Markdown' });
    } catch (error) {
      logger.error('‚ùå Failed to notify admin about new user', { error: error.message }, 'Grammy');
    }
  }

  private buildAdminInfoMessage(): string {
    return `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ grammY –±–æ—Ç–∞*\n\n` +
      `ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${this.settings.tg_main_bot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üîò –ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: ${this.settings.bot_btn_title || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üë• –ö–Ω–æ–ø–∫–∞ –≥—Ä—É–ø–ø—ã: ${this.settings.group_btn_title || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üîó –ì—Ä—É–ø–ø–∞: ${this.settings.tg_group || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${this.settings.tg_support || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üìπ –í–∏–¥–µ–æ ID: ${this.settings.first_video_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `üìä *–ú–µ—Ç—Ä–∏–∫–∏:*\n` +
      `- –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.metrics.messagesProcessed}\n` +
      `- –û—à–∏–±–æ–∫: ${this.metrics.errorsCount}\n` +
      `- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${this.metrics.averageResponseTime.toFixed(2)}ms\n` +
      `- Callback'–æ–≤: ${this.metrics.callbacksHandled}\n\n` +
      `üß™ *grammY Migration Mode Active*`;
  }

  // ========================
  // UTILITY METHODS
  // ========================

  private isAdmin(userId?: number): boolean {
    if (!userId) return false;
    const adminIds = this.settings.admin_ids?.split(',').map(id => id.trim()) || ['125861752'];
    return adminIds.includes(userId.toString());
  }

  private isCourier(userId?: number): boolean {
    if (!userId) return false;
    const courierId = this.settings.courier_tg_id || '7690550402';
    return userId.toString() === courierId;
  }

  private updateMetrics(duration: number, isError: boolean): void {
    this.metrics.messagesProcessed++;
    
    if (isError) {
      this.metrics.errorsCount++;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    const totalDuration = this.metrics.averageResponseTime * (this.metrics.messagesProcessed - 1) + duration;
    this.metrics.averageResponseTime = totalDuration / this.metrics.messagesProcessed;
  }

  // ========================
  // PUBLIC API
  // ========================

  /**
   * Webhook callback –¥–ª—è Next.js
   */
  public getWebhookCallback() {
    if (!this.isInitialized) {
      throw new Error('GrammyBotWorker not initialized. Call initialize() first.');
    }
    return webhookCallback(this.bot, 'nextjs');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  public getMetrics(): PerformanceMetrics {
    return { ...this.metrics };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
   */
  public getSettings(): BotSettings {
    return { ...this.settings };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  public isReady(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  public async getBotInfo() {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized');
    }
    return await this.bot.api.getMe();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook'–∞
   */
  public async setWebhook(url: string, secretToken?: string) {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized');
    }
    
    return await this.bot.api.setWebhook(url, {
      allowed_updates: ['message', 'callback_query'],
      secret_token: secretToken
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook'–µ
   */
  public async getWebhookInfo() {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized');
    }
    
    return await this.bot.api.getWebhookInfo();
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ webhook'–∞
   */
  public async deleteWebhook() {
    if (!this.isInitialized) {
      throw new Error('Bot not initialized');
    }
    
    return await this.bot.api.deleteWebhook();
  }

  /**
   * –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫
   */
  public resetMetrics(): void {
    this.metrics = {
      messagesProcessed: 0,
      errorsCount: 0,
      averageResponseTime: 0,
      callbacksHandled: 0,
      conversationsStarted: 0,
      webhookRequestsReceived: 0,
      lastResetTime: new Date()
    };
  }
}