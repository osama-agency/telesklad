interface WebappTelegramMessage {
  chat_id: number | string;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
  reply_markup?: {
    inline_keyboard: InlineKeyboardButton[][];
  };
}

interface InlineKeyboardButton {
  text: string;
  callback_data?: string;
  web_app?: { url: string };
  url?: string;
}

interface OrderData {
  id: number;
  total_amount: number;
  items: Array<{
    product_name: string;
    quantity: number;
    price: number;
  }>;
  bonus?: number;
}

interface UserData {
  tg_id: string;
  full_name: string;
  full_address: string;
  phone_number: string;
  postal_code?: number;
}

export class TelegramWebappBotService {
  // WEBAPP –ë–û–¢ - –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤
  private static readonly WEBAPP_BOT_TOKEN = '7754514670:AAFswWZxch4OwaLcmQp7LMzr6E3AdJ5woPg';
  private static readonly WEBAPP_API_URL = `https://api.telegram.org/bot${this.WEBAPP_BOT_TOKEN}`;
  
  // ID –¥–ª—è webapp –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ env)
  private static readonly ADMIN_CHAT_ID = process.env.WEBAPP_ADMIN_CHAT_ID || '125861752';
  private static readonly COURIER_CHAT_ID = process.env.WEBAPP_COURIER_CHAT_ID || '7828956680';
  private static readonly GROUP_CHAT_ID = process.env.WEBAPP_GROUP_CHAT_ID || '-4729817036';

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webapp –±–æ—Ç–∞
   */
  private static async sendMessage(message: WebappTelegramMessage): Promise<any> {
    if (!this.WEBAPP_BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_WEBAPP_BOT_TOKEN not configured');
      return null;
    }

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ
    if (process.env.NODE_ENV === 'development') {
      console.log(`üîß [WEBAPP BOT DEV] Would send to ${message.chat_id}:`);
      console.log(`üìù Message: ${message.text.substring(0, 200)}...`);
      return {
        ok: true,
        result: {
          message_id: Math.floor(Math.random() * 10000),
          chat: { id: message.chat_id },
          date: Math.floor(Date.now() / 1000),
          text: message.text
        }
      };
    }

    try {
      console.log(`üì§ [WEBAPP BOT] Sending to ${message.chat_id}:`, message.text.substring(0, 100));
      
      const response = await fetch(`${this.WEBAPP_API_URL}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(message),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Webapp Bot API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ [WEBAPP BOT] Message sent, ID:', result.result?.message_id);
      
      return result;
    } catch (error) {
      console.error('‚ùå [WEBAPP BOT] Send error:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private static async editMessage(chatId: string, messageId: number, text: string, replyMarkup?: any): Promise<any> {
    try {
      const response = await fetch(`${this.WEBAPP_API_URL}/editMessageText`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text,
          parse_mode: 'HTML',
          reply_markup: replyMarkup,
        }),
      });

      return await response.json();
    } catch (error) {
      console.error('‚ùå [WEBAPP BOT] Edit error:', error);
      return null;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private static async deleteMessage(chatId: string, messageId: number): Promise<boolean> {
    try {
      const response = await fetch(`${this.WEBAPP_API_URL}/deleteMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
        }),
      });

      return response.ok;
    } catch (error) {
      console.error('‚ùå [WEBAPP BOT] Delete error:', error);
      return false;
    }
  }

  /**
   * üéâ UNPAID - –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
   */
  static async sendOrderCreated(order: OrderData, user: UserData, settings: any): Promise<{ success: boolean; messageId?: number }> {
    const webappUrl = `https://t.me/${settings.webapp_bot_username || 'your_webapp_bot'}?startapp`;
    
    const orderItems = order.items.map(item => 
      `‚Ä¢ ${item.product_name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
    ).join('\n');

    const bonusText = order.bonus && order.bonus > 0 ? `\nüí∞ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> ${order.bonus}‚ÇΩ` : '';

    const message: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: `üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order.id} –ø—Ä–∏–Ω—è—Ç!</b>

üìå <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:</b>

<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
${orderItems}${bonusText}

<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b>
üë§ ${user.full_name}
üè† ${user.full_address}${user.postal_code ? `, ${user.postal_code}` : ''}
üìû ${user.phone_number}

üí∞ <b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${order.total_amount}‚ÇΩ</b>

‚úÖ <b>–î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
1. –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É:
<code>${settings.bank_card_details || '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}</code>

2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª

‚ùóÔ∏è –ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑¬ª`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `order_paid_${order.id}` }],
          [{ text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', web_app: { url: webappUrl }}],
          [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url: settings.support_url || 'https://t.me/support' }]
        ]
      }
    };

    const result = await this.sendMessage(message);
    
    if (result && result.result) {
      return { success: true, messageId: result.result.message_id };
    }
    
    return { success: false };
  }

  /**
   * üí≥ PAID - –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª"
   */
  static async sendPaymentReceived(order: OrderData, user: UserData, settings: any): Promise<boolean> {
    // –ö–ª–∏–µ–Ω—Ç—É - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
    const clientMessage: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: `‚è≥ <b>–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞</b>

–ó–∞–∫–∞–∑ ‚Ññ${order.id}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ - –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –æ–ø–ª–∞—Ç—É, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å.

‚è∞ <b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</b> –æ—Ç 5 –¥–æ 30 –º–∏–Ω—É—Ç.`,
      parse_mode: 'HTML'
    };

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const orderItems = order.items.map(item => 
      `‚Ä¢ ${item.product_name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
    ).join('\n');

    const adminMessage: WebappTelegramMessage = {
      chat_id: this.ADMIN_CHAT_ID,
      text: `üí∞ <b>–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ ‚Ññ${order.id}</b>

<b>–ò—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–ª–∏–µ–Ω—Ç:</b> ${order.total_amount}‚ÇΩ
<b>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞:</b> ${settings.bank_card_details || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}

üìÑ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
${orderItems}

üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>
${user.full_address}${user.postal_code ? `, ${user.postal_code}` : ''}

üë§ <b>–§–ò–û:</b> ${user.full_name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.phone_number}`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞', callback_data: `order_approve_${order.id}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `order_cancel_${order.id}` }
          ]
        ]
      }
    };

    const [clientResult, adminResult] = await Promise.all([
      this.sendMessage(clientMessage),
      this.sendMessage(adminMessage)
    ]);

    return !!(clientResult && adminResult);
  }

  /**
   * ‚úÖ PROCESSING - –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
   */
  static async sendOrderProcessing(order: OrderData, user: UserData, settings: any): Promise<boolean> {
    const webappUrl = `https://t.me/${settings.webapp_bot_username || 'your_webapp_bot'}?startapp`;

    // –ö–ª–∏–µ–Ω—Ç—É - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const clientMessage: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: `‚ù§Ô∏è <b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>

üöö –ó–∞–∫–∞–∑ ‚Ññ${order.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –∫—É—Ä—å–µ—Ä–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –º—ã –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–ª–µ–º –≤–∞–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.

‚è∞ <b>–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> –æ—Ç 5 –¥–æ 48 —á–∞—Å–æ–≤.

–ë—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ! üòä`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', web_app: { url: webappUrl }}]
        ]
      }
    };

    // –ö—É—Ä—å–µ—Ä—É - –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    const orderItemsForCourier = order.items.map(item => 
      `‚Ä¢ ${item.product_name} ‚Äî ${item.quantity}—à—Ç.`
    ).join('\n');

    const courierMessage: WebappTelegramMessage = {
      chat_id: this.COURIER_CHAT_ID,
      text: `üëÄ <b>–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ ‚Ññ${order.id}</b>

üìÑ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
${orderItemsForCourier}

üìç <b>–ê–¥—Ä–µ—Å:</b> <code>${user.full_address}</code>
üìç <b>–ò–Ω–¥–µ–∫—Å:</b> <code>${user.postal_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>
üë§ <b>–§–ò–û:</b> <code>${user.full_name}</code>
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${user.phone_number}</code>

üåü‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüåü`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì¶ –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä', callback_data: `order_track_${order.id}` }]
        ]
      }
    };

    const [clientResult, courierResult] = await Promise.all([
      this.sendMessage(clientMessage),
      this.sendMessage(courierMessage)
    ]);

    return !!(clientResult && courierResult);
  }

  /**
   * üì¶ SHIPPED - –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
   */
  static async sendOrderShipped(order: OrderData, user: UserData, trackingNumber: string): Promise<boolean> {
    const orderItems = order.items.map(item => 
      `‚Ä¢ ${item.product_name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
    ).join('\n');

    // –ö–ª–∏–µ–Ω—Ç—É - —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
    const clientMessage: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: `‚úÖ <b>–ó–∞–∫–∞–∑ ‚Ññ${order.id}</b>

üì¶ <b>–ü–æ—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>

üîç <b>–í–∞—à —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä:</b> <code>${trackingNumber}</code>

üìÑ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>
${orderItems}

üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b>
${user.full_address}

üë§ <b>–§–ò–û:</b> ${user.full_name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${user.phone_number}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üòä`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', web_app: { url: `https://t.me/${process.env.WEBAPP_BOT_USERNAME || 'your_webapp_bot'}?startapp` }}]
        ]
      }
    };

    // –ö—É—Ä—å–µ—Ä—É - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const courierConfirmMessage: WebappTelegramMessage = {
      chat_id: this.COURIER_CHAT_ID,
      text: `‚úÖ <b>–ì–æ—Ç–æ–≤–æ! –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.</b>

üì¶ <b>–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä:</b> ${trackingNumber}
üÜî <b>–ó–∞–∫–∞–∑ ‚Ññ${order.id}</b>
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${user.full_name}`,
      parse_mode: 'HTML'
    };

    const [clientResult, courierResult] = await Promise.all([
      this.sendMessage(clientMessage),
      this.sendMessage(courierConfirmMessage)
    ]);

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π
    setTimeout(() => {
      this.sendReviewRequest(order, user);
    }, 10 * 24 * 60 * 60 * 1000); // 10 –¥–Ω–µ–π

    return !!(clientResult && courierResult);
  }

  /**
   * ‚ùå CANCELLED - –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
   */
  static async sendOrderCancelled(order: OrderData, user: UserData, reason?: string): Promise<boolean> {
    const message: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: `‚ùå <b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order.id} –æ—Ç–º–µ–Ω—ë–Ω</b>

${reason ? `<b>–ü—Ä–∏—á–∏–Ω–∞:</b> ${reason}\n\n` : ''}–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥.`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', web_app: { url: `https://t.me/${process.env.WEBAPP_BOT_USERNAME || 'your_webapp_bot'}?startapp` }}]
        ]
      }
    };

    const result = await this.sendMessage(message);
    return !!result;
  }

  /**
   * ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ
   */
  static async sendPaymentReminder(order: OrderData, user: UserData, reminderType: 'first' | 'final'): Promise<boolean> {
    const messages = {
      first: `‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ ‚Ññ${order.id}</b>

–í–∞—à –∑–∞–∫–∞–∑ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.

üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${order.total_amount}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:
<code>${process.env.BANK_CARD_DETAILS || '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}</code>

–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª" üëá`,
      
      final: `‚ö†Ô∏è <b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order.id} –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω—ë–Ω</b>

–ú—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —á–∞—Å–æ–≤, —Ä–µ–∑–µ—Ä–≤ –±—É–¥–µ—Ç —Å–Ω—è—Ç, –∏ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω.

üí≥ –°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${order.total_amount}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:
<code>${process.env.BANK_CARD_DETAILS || '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}</code>`
    };

    const message: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: messages[reminderType],
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí≥ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `order_paid_${order.id}` }]
        ]
      }
    };

    const result = await this.sendMessage(message);
    return !!result;
  }

  /**
   * üìù –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π
   */
  static async sendReviewRequest(order: OrderData, user: UserData): Promise<boolean> {
    const message: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: `üìù <b>–ö–∞–∫ –≤–∞–º –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã?</b>

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—Å–µ –ª–∏ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∑–∞–∫–∞–∑–∞ ‚Ññ${order.id}?

<b>–ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!</b>

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–∞—Ö - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', web_app: { url: `https://t.me/${process.env.WEBAPP_BOT_USERNAME || 'your_webapp_bot'}?startapp=reviews` }}]
        ]
      }
    };

    const result = await this.sendMessage(message);
    return !!result;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
   */
  static async handleOrderCallback(callbackQuery: any): Promise<boolean> {
    const { id: callbackQueryId, data: callbackData, from, message } = callbackQuery;
    
    console.log(`üîÑ [WEBAPP BOT] Handling callback: ${callbackData} from user ${from.id}`);

    if (!callbackData || !callbackData.startsWith('order_')) {
      await this.answerCallbackQuery(callbackQueryId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      return false;
    }

    try {
      const [action, subAction, orderIdStr] = callbackData.split('_');
      const orderId = parseInt(orderIdStr);

      if (isNaN(orderId)) {
        await this.answerCallbackQuery(callbackQueryId, '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞');
        return false;
      }

      switch (subAction) {
        case 'paid':
          // –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª"
          await this.answerCallbackQuery(callbackQueryId, '–£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã...');
          await this.callOrderStatusAPI(orderId, 'paid');
          break;

        case 'approve':
          // –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É
          if (from.id.toString() !== this.ADMIN_CHAT_ID) {
            await this.answerCallbackQuery(callbackQueryId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
            return false;
          }
          await this.answerCallbackQuery(callbackQueryId, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...');
          await this.callOrderStatusAPI(orderId, 'processing');
          break;

        case 'cancel':
          // –ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑
          if (from.id.toString() !== this.ADMIN_CHAT_ID) {
            await this.answerCallbackQuery(callbackQueryId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
            return false;
          }
          await this.answerCallbackQuery(callbackQueryId, '–û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑...');
          await this.callOrderStatusAPI(orderId, 'cancelled');
          break;

        case 'track':
          // –ö—É—Ä—å–µ—Ä –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
          if (from.id.toString() !== this.COURIER_CHAT_ID) {
            await this.answerCallbackQuery(callbackQueryId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
            return false;
          }
          await this.answerCallbackQuery(callbackQueryId, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
          await this.requestTrackingNumber(orderId, from.id, message);
          break;

        default:
          await this.answerCallbackQuery(callbackQueryId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
          return false;
      }

      return true;
    } catch (error) {
      console.error('‚ùå [WEBAPP BOT] Callback error:', error);
      await this.answerCallbackQuery(callbackQueryId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
      return false;
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä —É –∫—É—Ä—å–µ—Ä–∞
   */
  private static async requestTrackingNumber(orderId: number, courierId: number, message: any): Promise<void> {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
    const state = {
      orderId,
      messageId: message.message_id,
      waitingForTrack: true,
      timestamp: Date.now()
    };

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
    (global as any).courierStates = (global as any).courierStates || new Map();
    (global as any).courierStates.set(courierId, state);

    const promptMessage: WebappTelegramMessage = {
      chat_id: courierId,
      text: `üì¶ <b>–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId}</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.`,
      parse_mode: 'HTML'
    };

    await this.sendMessage(promptMessage);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
   */
  static async handleTrackingNumberInput(message: any): Promise<boolean> {
    const courierId = message.from.id;
    const trackingNumber = message.text.trim();

    const state = (global as any).courierStates?.get(courierId);
    
    if (!state || !state.waitingForTrack) {
      return false; // –ù–µ –æ–∂–∏–¥–∞–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ—Ç —ç—Ç–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
      await this.callOrderTrackingAPI(state.orderId, trackingNumber);
      
      // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
      (global as any).courierStates.delete(courierId);
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫—É—Ä—å–µ—Ä—É
      const confirmMessage: WebappTelegramMessage = {
        chat_id: courierId,
        text: `‚úÖ <b>–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>

üì¶ <b>–¢—Ä–µ–∫:</b> ${trackingNumber}
üÜî <b>–ó–∞–∫–∞–∑ ‚Ññ${state.orderId}</b>

–ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º.`,
        parse_mode: 'HTML'
      };

      await this.sendMessage(confirmMessage);
      return true;
    } catch (error) {
      console.error('‚ùå [WEBAPP BOT] Track input error:', error);
      return false;
    }
  }

  /**
   * –í—ã–∑–≤–∞—Ç—å API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  private static async callOrderStatusAPI(orderId: number, newStatus: string): Promise<void> {
    try {
      const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3009';
      const response = await fetch(`${baseUrl}/api/webapp/orders/${orderId}/status`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) {
        throw new Error(`API call failed: ${response.status}`);
      }

      console.log(`‚úÖ [WEBAPP BOT] Order #${orderId} status updated to ${newStatus}`);
    } catch (error) {
      console.error(`‚ùå [WEBAPP BOT] Failed to update order #${orderId}:`, error);
    }
  }

  /**
   * –í—ã–∑–≤–∞—Ç—å API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
   */
  private static async callOrderTrackingAPI(orderId: number, trackingNumber: string): Promise<void> {
    try {
      const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3009';
      const response = await fetch(`${baseUrl}/api/webapp/orders/${orderId}/tracking`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ tracking_number: trackingNumber }),
      });

      if (!response.ok) {
        throw new Error(`API call failed: ${response.status}`);
      }

      console.log(`‚úÖ [WEBAPP BOT] Order #${orderId} tracking updated: ${trackingNumber}`);
    } catch (error) {
      console.error(`‚ùå [WEBAPP BOT] Failed to update tracking #${orderId}:`, error);
    }
  }

  /**
   * –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query
   */
  private static async answerCallbackQuery(callbackQueryId: string, text: string): Promise<void> {
    try {
      await fetch(`${this.WEBAPP_API_URL}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text,
          show_alert: false,
        }),
      });
    } catch (error) {
      console.error('‚ùå [WEBAPP BOT] Callback answer error:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webapp –±–æ—Ç–µ
   */
  static async getBotInfo(): Promise<any> {
    try {
      const response = await fetch(`${this.WEBAPP_API_URL}/getMe`);
      const result = await response.json();
      return result;
    } catch (error: any) {
      console.error('‚ùå [WEBAPP BOT] Bot info error:', error);
      return { error: error.message };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  static async sendWelcomeMessage(userId: string, settings: any): Promise<boolean> {
    const webappUrl = `https://t.me/${settings.webapp_bot_username || 'your_webapp_bot'}?startapp`;
    
    const message: WebappTelegramMessage = {
      chat_id: userId,
      text: settings.welcome_message || `üõí <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url: webappUrl }}],
          [{ text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url: settings.support_url || 'https://t.me/support' }]
        ]
      }
    };

    const result = await this.sendMessage(message);
    return !!result;
  }
} 