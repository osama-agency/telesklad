import { prisma } from '@/libs/prismaDb';
import { TelegramTokenService } from './telegram-token.service';

export class NotificationExecutorService {

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
  static async executePaymentReminder(jobId: number, jobData: any) {
    try {
      console.log(`üîî Executing payment reminder job ${jobId}:`, jobData);
      
      const { order_id, reminder_type } = jobData;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const order = await prisma.orders.findUnique({
        where: { id: BigInt(order_id) },
        include: { users: true }
      });

      if (!order) {
        console.log(`‚ùå Order ${order_id} not found, skipping reminder`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ - –µ—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (order.status !== 0) { // 0 = UNPAID
        console.log(`‚ÑπÔ∏è Order ${order_id} already paid (status: ${order.status}), skipping reminder`);
        return;
      }

      const user = order.users;
      if (!user.tg_id) {
        console.log(`‚ùå User ${user.id} has no telegram ID, skipping reminder`);
        return;
      }

      let message = '';
      
      switch (reminder_type) {
        case 'first':
          message = `üïê –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ ‚Ññ${order_id}
          
–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${order.total_amount}‚ÇΩ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã —É–∂–µ 48 —á–∞—Å–æ–≤.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –∏–Ω–∞—á–µ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.`;
          break;
          
        case 'final':
          message = `‚ö†Ô∏è –ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - –ó–∞–∫–∞–∑ ‚Ññ${order_id}
          
–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${order.total_amount}‚ÇΩ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –û–¢–ú–ï–ù–ï–ù —á–µ—Ä–µ–∑ 21 —á–∞—Å, –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω.

üö® –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑!`;
          break;
          
        case 'cancel':
          // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
          await prisma.orders.update({
            where: { id: BigInt(order_id) },
            data: { status: 4 } // 4 = CANCELLED
          });
          
          message = `‚ùå –ó–∞–∫–∞–∑ ‚Ññ${order_id} –æ—Ç–º–µ–Ω–µ–Ω
          
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${order.total_amount}‚ÇΩ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 72 —á–∞—Å–æ–≤.

–¢–æ–≤–∞—Ä—ã —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ.`;
          break;
      }

      // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ
      let inlineKeyboard;
      
      if (reminder_type === 'first' || reminder_type === 'final') {
        inlineKeyboard = {
          inline_keyboard: [
            [
              {
                text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
                url: `${process.env.WEBAPP_URL || 'https://strattera.ngrok.app/webapp'}/orders/${order_id}`
              }
            ],
            [
              {
                text: "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", 
                url: `${process.env.WEBAPP_URL || 'https://strattera.ngrok.app/webapp'}/orders`
              },
              {
                text: "üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏",
                url: `${process.env.WEBAPP_URL || 'https://strattera.ngrok.app/webapp'}`
              }
            ]
          ]
        };
      } else if (reminder_type === 'cancel') {
        inlineKeyboard = {
          inline_keyboard: [
            [
              {
                text: "üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º",
                url: `${process.env.WEBAPP_URL || 'https://telesklad.ru'}/webapp`
              }
            ]
          ]
        };
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
      await this.sendTelegramNotification(user.tg_id.toString(), message, inlineKeyboard);
      
      console.log(`‚úÖ Payment reminder sent to user ${user.id} (${reminder_type})`);
      
    } catch (error) {
      console.error('‚ùå Error executing payment reminder:', error);
      throw error;
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–∞—Ö
  static async executeBonusNotification(jobId: number, jobData: any) {
    try {
      console.log(`üéÅ Executing bonus notification job ${jobId}:`, jobData);
      
      const { bonus_amount, order_id } = jobData;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const order = await prisma.orders.findUnique({
        where: { id: BigInt(order_id) },
        include: { 
          users: {
            include: { account_tiers: true }
          }
        }
      });

      if (!order || !order.users.tg_id) {
        console.log(`‚ùå Order ${order_id} or user telegram not found`);
        return;
      }

      const user = order.users;
      const tierName = user.account_tiers?.title || '–°—Ç–∞—Ä—Ç';
      
      const message = `üéÅ –ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã!

–ó–∞ –∑–∞–∫–∞–∑ ‚Ññ${order_id} –Ω–∞ —Å—É–º–º—É ${order.total_amount}‚ÇΩ –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${bonus_amount} –±–æ–Ω—É—Å–æ–≤!

üíé –í–∞—à —É—Ä–æ–≤–µ–Ω—å: ${tierName}
üí∞ –ë–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤: ${user.bonus_balance} –±–æ–Ω—É—Å–æ–≤

–ë–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö!`;

      // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–∞—Ö
      const inlineKeyboard = {
        inline_keyboard: [
          [
            {
              text: "üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏",
              url: `${process.env.WEBAPP_URL || 'https://telesklad.ru'}/webapp`
            }
          ],
          [
            {
              text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å –±–æ–Ω—É—Å–∞–º–∏",
              url: `${process.env.WEBAPP_URL || 'https://telesklad.ru'}/webapp/profile`
            }
          ]
        ]
      };

      await this.sendTelegramNotification(user.tg_id.toString(), message, inlineKeyboard);
      
      console.log(`‚úÖ Bonus notification sent to user ${user.id}`);
      
    } catch (error) {
      console.error('‚ùå Error executing bonus notification:', error);
      throw error;
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
  static async executeRestockNotification(jobId: number, jobData: any) {
    try {
      console.log(`üì¶ Executing restock notification job ${jobId}:`, jobData);
      
      const { product_id } = jobData;
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
      const product = await prisma.products.findUnique({
        where: { id: BigInt(product_id) }
      });

      if (!product) {
        console.log(`‚ùå Product ${product_id} not found`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const job = await (prisma as any).notification_jobs.findUnique({
        where: { id: BigInt(jobId) }
      });

      if (!job) {
        console.log(`‚ùå Job ${jobId} not found`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏–∑ –∑–∞–¥–∞—á–∏
      const user = await prisma.users.findUnique({
        where: { id: job.user_id }
      });

      if (!user || !user.tg_id) {
        console.log(`‚ùå User ${job.user_id} or telegram ID not found`);
        return;
      }
      
      const message = `üì¶ –¢–æ–≤–∞—Ä –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —Å–∫–ª–∞–¥!

"${product.name}" —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞!

üí∞ –¶–µ–Ω–∞: ${product.price}‚ÇΩ

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!`;

      // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
      const inlineKeyboard = {
        inline_keyboard: [
          [
            {
              text: "üõí –ó–∞–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å",
              url: `${process.env.WEBAPP_URL || 'https://telesklad.ru'}/webapp/products/${product.id}`
            }
          ],
          [
            {
              text: "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥",
              url: `${process.env.WEBAPP_URL || 'https://telesklad.ru'}/webapp`
            }
          ]
        ]
      };

      await this.sendTelegramNotification(user.tg_id.toString(), message, inlineKeyboard);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
      await (prisma as any).product_subscriptions.deleteMany({
        where: {
          user_id: user.id,
          product_id: BigInt(product_id)
        }
      });
      
      console.log(`‚úÖ Restock notification sent to user ${user.id}`);
      
    } catch (error) {
      console.error('‚ùå Error executing restock notification:', error);
      throw error;
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∞–∫–∫–∞—É–Ω—Ç–∞
  static async executeAccountTierNotification(jobId: number, jobData: any) {
    try {
      console.log(`üéñÔ∏è Executing account tier notification job ${jobId}:`, jobData);
      
      const { tier_name, bonus_percentage } = jobData;
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const job = await (prisma as any).notification_jobs.findUnique({
        where: { id: BigInt(jobId) }
      });

      if (!job) {
        console.log(`‚ùå Job ${jobId} not found`);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏–∑ –∑–∞–¥–∞—á–∏
      const user = await prisma.users.findUnique({
        where: { id: job.user_id }
      });

      if (!user || !user.tg_id) {
        console.log(`‚ùå User ${job.user_id} or telegram ID not found`);
        return;
      }
      
      const message = `üéñÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è!

–í–∞—à –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${tier_name}
üéÅ –ö—ç—à–±–µ–∫: ${bonus_percentage}%

–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤ —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏!

üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.bonus_balance} –±–æ–Ω—É—Å–æ–≤`;

      // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
      const inlineKeyboard = {
        inline_keyboard: [
          [
            {
              text: "üõí –°–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
              url: `${process.env.WEBAPP_URL || 'https://telesklad.ru'}/webapp`
            }
          ],
          [
            {
              text: "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
              url: `${process.env.WEBAPP_URL || 'https://telesklad.ru'}/webapp/profile`
            },
            {
              text: "‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
              url: `${process.env.WEBAPP_URL || 'https://telesklad.ru'}/webapp/support`
            }
          ]
        ]
      };

      await this.sendTelegramNotification(user.tg_id.toString(), message, inlineKeyboard);
      
      console.log(`‚úÖ Account tier notification sent to user ${user.id}`);
      
    } catch (error) {
      console.error('‚ùå Error executing account tier notification:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ webapp –±–æ—Ç–∞ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  private static async getWebappBotToken(): Promise<string | null> {
    return await TelegramTokenService.getWebappBotToken();
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
  private static async sendTelegramNotification(telegramId: string, message: string, replyMarkup?: any) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω webapp –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const webappBotToken = await this.getWebappBotToken();
      
      if (!webappBotToken) {
        console.error('‚ùå WEBAPP_TELEGRAM_BOT_TOKEN not found in database or environment');
        throw new Error('Telegram bot token not configured');
      }

      const url = `https://api.telegram.org/bot${webappBotToken}/sendMessage`;
      
      console.log(`üì± Sending telegram notification to ${telegramId}...`);
      
      const requestBody: any = {
        chat_id: telegramId,
        text: message,
        parse_mode: 'HTML'
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
      if (replyMarkup) {
        requestBody.reply_markup = replyMarkup;
      }
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('‚ùå Telegram API error:', errorData);
        throw new Error(`Telegram API error: ${response.status} - ${errorData}`);
      }

      const result = await response.json();
      console.log('‚úÖ Telegram notification sent successfully:', result.message_id);
      
    } catch (error) {
      console.error('‚ùå Error sending telegram notification:', error);
      throw error;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
  static async executeJob(job: any) {
    try {
      console.log(`üöÄ Executing job ${job.id} of type ${job.job_type}`);
      
      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω—è—é—â—É—é—Å—è
      await (prisma as any).notification_jobs.update({
        where: { id: job.id },
        data: { status: 'executing' }
      });

      let success = false;
      
      switch (job.job_type) {
        case 'payment_reminder_first':
        case 'payment_reminder_final':
        case 'payment_reminder_cancel':
          await this.executePaymentReminder(Number(job.id), job.data);
          success = true;
          break;
          
        case 'bonus_notice':
          await this.executeBonusNotification(Number(job.id), job.data);
          success = true;
          break;
          
        case 'restock_notice':
          await this.executeRestockNotification(Number(job.id), job.data);
          success = true;
          break;
          
        case 'account_tier_notice':
          await this.executeAccountTierNotification(Number(job.id), job.data);
          success = true;
          break;
          
        default:
          console.error(`‚ùå Unknown job type: ${job.job_type}`);
          success = false;
      }

      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω—É—é
      await (prisma as any).notification_jobs.update({
        where: { id: job.id },
        data: { 
          status: success ? 'executed' : 'failed',
          executed_at: new Date()
        }
      });
      
      console.log(`‚úÖ Job ${job.id} completed with status: ${success ? 'executed' : 'failed'}`);
      
    } catch (error) {
      console.error(`‚ùå Error executing job ${job.id}:`, error);
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é
      await (prisma as any).notification_jobs.update({
        where: { id: job.id },
        data: { 
          status: 'failed',
          retry_count: { increment: 1 },
          executed_at: new Date()
        }
      });
      
      throw error;
    }
  }
} 