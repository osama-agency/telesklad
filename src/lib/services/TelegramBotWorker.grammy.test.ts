import { Bot, Context, webhookCallback } from 'grammy';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ grammY
 * –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–µ–π
 */

export class GrammyTest {
  private bot: Bot;

  constructor(token: string) {
    this.bot = new Bot(token);
    this.setupHandlers();
  }

  private setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.command('start', async (ctx) => {
      console.log('‚úÖ grammY: /start command received');
      await ctx.reply('Welcome! grammY is working!');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message:text', async (ctx) => {
      console.log(`‚úÖ grammY: Text message: ${ctx.message.text}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
    this.bot.on('callback_query:data', async (ctx) => {
      const data = ctx.callbackQuery.data;
      console.log(`‚úÖ grammY: Callback received: ${data}`);
      
      await ctx.answerCallbackQuery();
      
      if (data === 'test_button') {
        await ctx.editMessageText('Button clicked!');
      }
    });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
  async sendTestMessage(chatId: number) {
    await this.bot.api.sendMessage(chatId, 'Test message from grammY', {
      reply_markup: {
        inline_keyboard: [[
          { text: 'Test Button', callback_data: 'test_button' }
        ]]
      }
    });
  }

  // Webhook handler –¥–ª—è Express/Next.js
  webhookHandler() {
    return webhookCallback(this.bot, 'express');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  async getMe() {
    return await this.bot.api.getMe();
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
  async setWebhook(url: string, secretToken?: string) {
    await this.bot.api.setWebhook(url, {
      allowed_updates: ['message', 'callback_query'],
      secret_token: secretToken
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
export async function testGrammyBasics() {
  const token = process.env.WEBAPP_TELEGRAM_BOT_TOKEN;
  if (!token) {
    console.error('‚ùå No token found for testing');
    return;
  }

  try {
    const test = new GrammyTest(token);
    const botInfo = await test.getMe();
    console.log('‚úÖ grammY initialized successfully!');
    console.log('ü§ñ Bot info:', botInfo);
    return test;
  } catch (error) {
    console.error('‚ùå grammY test failed:', error);
    throw error;
  }
}
