import { TelegramService } from './TelegramService';
import { TelegramMessageTemplatesService } from './telegram-message-templates.service';
import { prisma } from '@/libs/prismaDb';

interface Order {
  id: bigint;
  user_id: bigint;
  status: number;
  total_amount: any;
  tracking_number?: string | null;
  msg_id?: bigint | null;
  order_items?: any[];
}

interface User {
  id: bigint;
  tg_id: bigint;
  first_name?: string | null;
  last_name?: string | null;
  middle_name?: string | null;
  phone_number?: string | null;
  postal_code?: number | null;
  address?: string | null;
  street?: string | null;
  home?: string | null;
  apartment?: string | null;
  build?: string | null;
}

export class ReportService {
  // –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç–∑—ã–≤–∞ (10 –¥–Ω–µ–π)
  private static readonly REVIEW_WAIT = 10 * 24 * 60 * 60 * 1000; // 10 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–∞–Ω–∞–ª–æ–≥ Rails order.rb after_update)
   */
  static async handleOrderStatusChange(order: Order, previousStatus: number): Promise<void> {
    if (order.status === previousStatus) return;

    console.log(`üìã Order ${order.id} status changed from ${previousStatus} to ${order.status}`);

    switch (order.status) {
      case 0: // unpaid
        await this.onUnpaid(order);
        break;
      case 1: // paid
        await this.onPaid(order);
        break;
      case 2: // processing/shipped
        if (previousStatus === 1) {
          await this.onProcessing(order);
        } else if (order.tracking_number) {
          await this.onShipped(order);
        }
        break;
      case 3: // delivered
        await this.onDelivered(order);
        break;
      case 4: // cancelled
        await this.onCancelled(order);
        break;
      case 5: // refunded
        await this.onRefunded(order);
        break;
      case 6: // overdue
        await this.onOverdue(order);
        break;
    }
  }

  /**
   * UNPAID - –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω
   */
  private static async onUnpaid(order: Order): Promise<void> {
    console.log(`üí∞ Order ${order.id} created (unpaid)`);

    const user = await this.getOrderUser(order);
    if (!user) return;

    const settings = await this.getSettings();
    const orderItems = await this.getOrderItems(order);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    const msgHeader = await TelegramMessageTemplatesService.getMessage('unpaid_msg', { 
      order: order.id.toString() 
    });
    
    const itemsStr = orderItems.map(item => 
      `‚Ä¢ ${item.name || item.products?.name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
    ).join('\n');

    const msgBody = await TelegramMessageTemplatesService.getMessage('unpaid_main', {
      items: itemsStr,
      fio: this.getUserFullName(user),
      address: this.getUserFullAddress(user),
      postal_code: user.postal_code || '–ù–µ —É–∫–∞–∑–∞–Ω',
      phone: user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω',
      price: order.total_amount,
      card: settings.bank_card_details || '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'
    });

    const fullMessage = `${msgHeader}\n\n${msgBody}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await this.sendReport(order, {
      user_msg: fullMessage,
      user_tg_id: user.tg_id.toString(),
      user_markup: 'i_paid'
    });
  }

  /**
   * PAID - –ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑
   */
  private static async onPaid(order: Order): Promise<void> {
    console.log(`‚úÖ Order ${order.id} marked as paid`);

    const user = await this.getOrderUser(order);
    if (!user) return;

    const settings = await this.getSettings();
    const orderItems = await this.getOrderItems(order);

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    const clientMsg = await TelegramMessageTemplatesService.getMessage('paid_client');

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const itemsStr = orderItems.map(item => 
      `‚Ä¢ ${item.name || item.products?.name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
    ).join('\n');

    const adminMsg = await TelegramMessageTemplatesService.getMessage('paid_admin', {
      order: order.id.toString(),
      price: order.total_amount,
      card: settings.bank_card_details || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞',
      items: itemsStr,
      address: this.getUserFullAddress(user),
      fio: this.getUserFullName(user),
      phone: user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await this.sendReport(order, {
      admin_msg: adminMsg,
      admin_markup: 'approve_payment',
      user_msg: clientMsg,
      user_tg_id: user.tg_id.toString()
    });
  }

  /**
   * PROCESSING - –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∑–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
   */
  private static async onProcessing(order: Order): Promise<void> {
    console.log(`üîÑ Order ${order.id} is being processed. Payment confirmed.`);

    const user = await this.getOrderUser(order);
    if (!user) return;

    const orderItems = await this.getOrderItems(order);
    const itemsStr = orderItems.map(item => 
      `‚Ä¢ ${item.name || item.products?.name} ‚Äî ${item.quantity}—à—Ç.`
    ).join('\n');

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
    const courierMsg = await TelegramMessageTemplatesService.getMessage('on_processing_courier', {
      order: order.id.toString(),
      postal_code: user.postal_code || '–ù–µ —É–∫–∞–∑–∞–Ω',
      items: itemsStr,
      address: this.getUserFullAddress(user),
      fio: this.getUserFullName(user),
      phone: user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω'
    });

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    const clientMsg = await TelegramMessageTemplatesService.getMessage('on_processing_client', {
      order: order.id.toString()
    });

    await this.sendReport(order, {
      admin_msg: courierMsg,
      admin_tg_id: 'courier',
      admin_markup: 'submit_tracking',
      user_msg: clientMsg,
      user_tg_id: user.tg_id.toString(),
      user_markup: 'new_order'
    });
  }

  /**
   * SHIPPED - –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
   */
  private static async onShipped(order: Order): Promise<void> {
    console.log(`üì¶ Order ${order.id} has been shipped`);

    const user = await this.getOrderUser(order);
    if (!user) return;

    const orderItems = await this.getOrderItems(order);
    const itemsStr = orderItems.map(item => 
      `‚Ä¢ ${item.name || item.products?.name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
    ).join('\n');

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
    const clientMsg = await TelegramMessageTemplatesService.getMessage('on_shipped_courier', {
      order: order.id.toString(),
      price: order.total_amount,
      items: itemsStr,
      address: this.getUserFullAddress(user),
      fio: this.getUserFullName(user),
      phone: user.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω',
      track: order.tracking_number || '–ù–µ —É–∫–∞–∑–∞–Ω'
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä—É
    const courierMsg = await TelegramMessageTemplatesService.getMessage('track_num_save', {
      order: order.id.toString(),
      fio: this.getUserFullName(user),
      num: order.tracking_number || '–ù–µ —É–∫–∞–∑–∞–Ω'
    });

    await this.sendReport(order, {
      admin_msg: courierMsg,
      admin_tg_id: 'courier',
      user_msg: clientMsg,
      user_tg_id: user.tg_id.toString(),
      user_markup: 'new_order'
    });

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã
    await this.scheduleReviewRequests(order, user);
  }

  /**
   * CANCELLED - –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
   */
  private static async onCancelled(order: Order): Promise<void> {
    console.log(`‚ùå Order ${order.id} has been cancelled`);

    const user = await this.getOrderUser(order);
    if (!user) return;

    const adminMsg = `‚ùå –ó–∞–∫–∞–∑ ‚Ññ${order.id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω!`;
    const userMsg = await TelegramMessageTemplatesService.getMessage('cancel', {
      order: order.id.toString()
    });

    await this.sendReport(order, {
      admin_msg: adminMsg,
      user_msg: userMsg,
      user_tg_id: user.tg_id.toString(),
      user_markup: 'new_order'
    });
  }

  /**
   * DELIVERED - –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
   */
  private static async onDelivered(order: Order): Promise<void> {
    console.log(`‚úÖ Order ${order.id} has been delivered`);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
  }

  /**
   * REFUNDED - –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
   */
  private static async onRefunded(order: Order): Promise<void> {
    const msg = `üí∏ Order ‚Ññ${order.id} has been refunded`;
    console.log(msg);
    await TelegramService.call(msg);
  }

  /**
   * OVERDUE - –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –ø–ª–∞—Ç–µ–∂
   */
  private static async onOverdue(order: Order): Promise<void> {
    console.log(`‚è∞ Order ${order.id} payment is overdue`);

    const user = await this.getOrderUser(order);
    if (!user) return;

    const userMsg = await TelegramMessageTemplatesService.getMessage('unpaid_reminder_overdue', {
      order: order.id.toString()
    });

    await this.sendReport(order, {
      user_msg: userMsg,
      user_tg_id: user.tg_id.toString(),
      user_markup: 'new_order'
    });
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–∑—ã–≤—ã
   */
  private static async scheduleReviewRequests(order: Order, user: User): Promise<void> {
    const orderItems = await this.getOrderItemsWithProducts(order);

    for (let i = 0; i < orderItems.length; i++) {
      const item = orderItems[i];
      const product = item.products;
      
      if (!product) continue;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
      const existingReview = await prisma.reviews.findFirst({
        where: {
          user_id: user.id,
          product_id: product.id
        }
      });

      if (!existingReview) {
        const delay = this.REVIEW_WAIT + (i * 60 * 60 * 1000); // +1 —á–∞—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
        setTimeout(async () => {
          await this.sendReviewRequest(product.id, user.id, order.id);
        }, delay);
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤
   */
  private static async sendReviewRequest(productId: bigint, userId: bigint, orderId: bigint): Promise<void> {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
    console.log(`üìù Sending review request for product ${productId} to user ${userId}`);
    
    // TODO: Implement review request logic
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
   */
  private static async sendReport(order: Order, params: {
    admin_msg?: string;
    admin_tg_id?: string | number;
    admin_markup?: string;
    user_msg?: string;
    user_tg_id?: string | number;
    user_markup?: string;
  }): Promise<void> {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if (params.admin_msg) {
      await TelegramService.call(
        params.admin_msg, 
        params.admin_tg_id || null,
        { markup: params.admin_markup }
      );
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if (order.msg_id && params.user_tg_id) {
      try {
        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ TelegramMsgDelService
        console.log(`Would delete message ${order.msg_id} from chat ${params.user_tg_id}`);
      } catch (error) {
        console.error('Failed to delete old message:', error);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (params.user_msg && params.user_tg_id) {
      const msgId = await TelegramService.call(
        params.user_msg,
        params.user_tg_id,
        { markup: params.user_markup }
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
      if (typeof msgId === 'number') {
        await prisma.orders.update({
          where: { id: order.id },
          data: { msg_id: BigInt(msgId) }
        });
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        await this.notifyAdmin(msgId, order.id);
      }
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  private static async notifyAdmin(error: Error, orderId: bigint): Promise<void> {
    const msg = `–ö–ª–∏–µ–Ω—Ç—É –Ω–µ –ø—Ä–∏—à–ª–æ –±–∏–∑–Ω–µ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ${orderId} –ø–æ –ø—Ä–∏—á–∏–Ω–µ`;
    
    if (error.message.includes('chat not found')) {
      const settings = await this.getSettings();
      await TelegramService.call(
        `${msg} –Ω–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Å—Ç–∞—Ä—Ç!`,
        settings.test_id || settings.admin_ids
      );
    } else if (error.message.includes('bot was blocked')) {
      const settings = await this.getSettings();
      await TelegramService.call(
        `${msg} –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º –±–æ—Ç–∞ –≤ –±–∞–Ω!`,
        settings.test_id || settings.admin_ids
      );
    } else {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email –æ–± –æ—à–∏–±–∫–µ
      console.error(`${msg} ${error.message}`, error);
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  private static async getOrderUser(order: Order): Promise<User | null> {
    return prisma.users.findUnique({
      where: { id: order.user_id }
    });
  }

  private static async getOrderItems(order: Order): Promise<any[]> {
    return prisma.order_items.findMany({
      where: { order_id: order.id },
      include: { products: true }
    });
  }

  private static async getOrderItemsWithProducts(order: Order): Promise<any[]> {
    return prisma.order_items.findMany({
      where: { order_id: order.id },
      include: { products: true }
    });
  }

  private static getUserFullName(user: User): string {
    const parts = [user.first_name, user.middle_name, user.last_name].filter(Boolean);
    return parts.join(' ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  private static getUserFullAddress(user: User): string {
    const parts = [
      user.postal_code,
      user.address,
      user.street,
      user.home && `–¥. ${user.home}`,
      user.build && `–∫–æ—Ä–ø. ${user.build}`,
      user.apartment && `–∫–≤. ${user.apartment}`
    ].filter(Boolean);
    
    return parts.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω';
  }

  private static async getSettings(): Promise<any> {
    const settings = await prisma.settings.findMany();
    return settings.reduce((acc, setting) => {
      if (setting.variable && setting.value) {
        acc[setting.variable] = setting.value;
      }
      return acc;
    }, {} as any);
  }
} 