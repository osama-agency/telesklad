import { TelegramMessageTemplatesService } from './telegram-message-templates.service';

interface WebappTelegramMessage {
  chat_id: number | string;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
  reply_markup?: {
    inline_keyboard: InlineKeyboardButton[][];
  };
}

interface InlineKeyboardButton {
  text: string;
  callback_data?: string;
  web_app?: { url: string };
  url?: string;
}

interface OrderData {
  id: number;
  total_amount: number;
  items: Array<{
    product_name: string;
    quantity: number;
    price: number;
  }>;
  bonus?: number;
}

interface UserData {
  tg_id: string;
  full_name: string;
  full_address: string;
  phone_number: string;
  postal_code?: number;
}

export class WebappTelegramBotService {
  // WEBAPP –ë–û–¢ - –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤
  private static readonly WEBAPP_BOT_TOKEN = '7754514670:AAFswWZxch4OwaLcmQp7LMzr6E3AdJ5woPg';
  private static readonly WEBAPP_API_URL = `https://api.telegram.org/bot${this.WEBAPP_BOT_TOKEN}`;
  
  // ID –¥–ª—è webapp –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ env)
  private static readonly ADMIN_CHAT_ID = process.env.WEBAPP_ADMIN_CHAT_ID || '125861752';
  private static readonly COURIER_CHAT_ID = process.env.WEBAPP_COURIER_CHAT_ID || '7828956680';
  private static readonly GROUP_CHAT_ID = process.env.WEBAPP_GROUP_CHAT_ID || '-4729817036';

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webapp –±–æ—Ç–∞
   */
  private static async sendMessage(message: WebappTelegramMessage): Promise<any> {
    if (!this.WEBAPP_BOT_TOKEN) {
      console.error('‚ùå TELEGRAM_WEBAPP_BOT_TOKEN not configured');
      return null;
    }

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ
    if (process.env.NODE_ENV === 'development') {
      console.log(`üîß [WEBAPP BOT DEV] Would send to ${message.chat_id}:`);
      console.log(`üìù Message: ${message.text.substring(0, 200)}...`);
      return {
        ok: true,
        result: {
          message_id: Math.floor(Math.random() * 10000),
          chat: { id: message.chat_id },
          date: Math.floor(Date.now() / 1000),
          text: message.text
        }
      };
    }

    try {
      console.log(`üì§ [WEBAPP BOT] Sending to ${message.chat_id}:`, message.text.substring(0, 100));
      
      const response = await fetch(`${this.WEBAPP_API_URL}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(message),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Webapp Bot API error: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ [WEBAPP BOT] Message sent, ID:', result.result?.message_id);
      
      return result;
    } catch (error) {
      console.error('‚ùå [WEBAPP BOT] Send error:', error);
      return { error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * üéâ UNPAID - –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Rails project)
   */
  static async sendOrderCreated(order: OrderData, user: UserData, settings: any): Promise<{ success: boolean; messageId?: number }> {
    const webappUrl = `https://t.me/${settings.webapp_bot_username || 'your_webapp_bot'}?startapp`;
    
    const orderItems = order.items.map(item => 
      `‚Ä¢ ${item.product_name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
    ).join('\n');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞–Ω–∞–ª–æ–≥ Rails I18n.t)
    const msgHeader = await TelegramMessageTemplatesService.getMessage('unpaid_msg', { order: order.id });
    const msgBody = await TelegramMessageTemplatesService.getMessage('unpaid_main', {
      items: orderItems,
      fio: user.full_name,
      address: user.full_address,
      postal_code: user.postal_code || '–ù–µ —É–∫–∞–∑–∞–Ω',
      phone: user.phone_number,
      price: order.total_amount,
      card: settings.bank_card_details || '–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'
    });

    const fullMessage = `${msgHeader}\n\n${msgBody}`;

    const message: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: fullMessage,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `order_paid_${order.id}` }],
          [{ text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', web_app: { url: webappUrl }}],
          [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', url: settings.support_url || 'https://t.me/support' }]
        ]
      }
    };

    const result = await this.sendMessage(message);
    
    if (result && result.result) {
      return { success: true, messageId: result.result.message_id };
    }
    
    return { success: false };
  }

  /**
   * üí≥ PAID - –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª"
   */
  static async sendPaymentReceived(order: OrderData, user: UserData, settings: any): Promise<boolean> {
    // –ö–ª–∏–µ–Ω—Ç—É - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    const clientText = await TelegramMessageTemplatesService.getMessage('paid_client');
    
    const clientMessage: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: clientText,
      parse_mode: 'HTML'
    };

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    const orderItems = order.items.map(item => 
      `‚Ä¢ ${item.product_name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
    ).join('\n');

    const adminText = await TelegramMessageTemplatesService.getMessage('paid_admin', {
      order: order.id,
      price: order.total_amount,
      card: settings.bank_card_details || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞',
      items: orderItems,
      address: user.full_address,
      fio: user.full_name,
      phone: user.phone_number
    });

    const adminMessage: WebappTelegramMessage = {
      chat_id: this.ADMIN_CHAT_ID,
      text: adminText,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞', callback_data: `order_approve_${order.id}` },
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `order_cancel_${order.id}` }
          ]
        ]
      }
    };

    const [clientResult, adminResult] = await Promise.all([
      this.sendMessage(clientMessage),
      this.sendMessage(adminMessage)
    ]);

    return !!(clientResult && adminResult);
  }

  /**
   * ‚úÖ PROCESSING - –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
   */
  static async sendOrderProcessing(order: OrderData, user: UserData, settings: any): Promise<boolean> {
    const webappUrl = `https://t.me/${settings.webapp_bot_username || 'your_webapp_bot'}?startapp`;

    // –ö–ª–∏–µ–Ω—Ç—É - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    const clientText = await TelegramMessageTemplatesService.getMessage('on_processing_client', {
      order: order.id
    });

    const clientMessage: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: clientText,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', web_app: { url: webappUrl }}]
        ]
      }
    };

    // –ö—É—Ä—å–µ—Ä—É - –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    const orderItemsForCourier = order.items.map(item => 
      `‚Ä¢ ${item.product_name} ‚Äî ${item.quantity}—à—Ç.`
    ).join('\n');

    const courierText = await TelegramMessageTemplatesService.getMessage('on_processing_courier', {
      order: order.id,
      items: orderItemsForCourier,
      address: user.full_address,
      postal_code: user.postal_code || '–ù–µ —É–∫–∞–∑–∞–Ω',
      fio: user.full_name,
      phone: user.phone_number
    });

    const courierMessage: WebappTelegramMessage = {
      chat_id: this.COURIER_CHAT_ID,
      text: courierText,
      parse_mode: 'Markdown', // –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ backticks `text` –≤ —à–∞–±–ª–æ–Ω–µ
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì¶ –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä', callback_data: `order_track_${order.id}` }]
        ]
      }
    };

    const [clientResult, courierResult] = await Promise.all([
      this.sendMessage(clientMessage),
      this.sendMessage(courierMessage)
    ]);

    return !!(clientResult && courierResult);
  }

  /**
   * üì¶ SHIPPED - –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
   */
  static async sendOrderShipped(order: OrderData, user: UserData, trackingNumber: string): Promise<boolean> {
    const orderItems = order.items.map(item => 
      `‚Ä¢ ${item.product_name} ‚Äî ${item.quantity}—à—Ç. ‚Äî ${item.price}‚ÇΩ`
    ).join('\n');

    // –ö–ª–∏–µ–Ω—Ç—É - —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    const clientText = await TelegramMessageTemplatesService.getMessage('on_shipped_courier', {
      order: order.id,
      track: trackingNumber,
      items: orderItems,
      address: user.full_address,
      fio: user.full_name,
      phone: user.phone_number
    });

    const clientMessage: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: clientText,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', web_app: { url: `https://t.me/${process.env.WEBAPP_BOT_USERNAME || 'your_webapp_bot'}?startapp` }}]
        ]
      }
    };

    // –ö—É—Ä—å–µ—Ä—É - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    const courierText = await TelegramMessageTemplatesService.getMessage('track_num_save', {
      num: trackingNumber,
      order: order.id,
      fio: user.full_name
    });

    const courierConfirmMessage: WebappTelegramMessage = {
      chat_id: this.COURIER_CHAT_ID,
      text: courierText,
      parse_mode: 'HTML'
    };

    const [clientResult, courierResult] = await Promise.all([
      this.sendMessage(clientMessage),
      this.sendMessage(courierConfirmMessage)
    ]);

    return !!(clientResult && courierResult);
  }

  /**
   * ‚ùå CANCELLED - –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
   */
  static async sendOrderCancelled(order: OrderData, user: UserData, reason?: string): Promise<boolean> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const cancelText = await TelegramMessageTemplatesService.getMessage('cancel', {
      order: order.id
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    const fullText = reason ? `${reason}\n\n${cancelText}` : cancelText;

    const message: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: fullText,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', web_app: { url: `https://t.me/${process.env.WEBAPP_BOT_USERNAME || 'your_webapp_bot'}?startapp` }}]
        ]
      }
    };

    const result = await this.sendMessage(message);
    return !!result;
  }

  /**
   * ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Rails)
   */
  static async sendPaymentReminder(order: OrderData, user: UserData, reminderType: 'one' | 'two' | 'overdue'): Promise<boolean> {
    let messageText = '';
    let replyMarkup: any = undefined;

    switch (reminderType) {
      case 'one':
        messageText = await TelegramMessageTemplatesService.getMessage('unpaid_reminder_one', {
          order: order.id
        });
        replyMarkup = {
          inline_keyboard: [
            [{ text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `order_paid_${order.id}` }]
          ]
        };
        break;

      case 'two':
        messageText = await TelegramMessageTemplatesService.getMessage('unpaid_reminder_two', {
          order: order.id
        });
        replyMarkup = {
          inline_keyboard: [
            [{ text: '–Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: `order_paid_${order.id}` }]
          ]
        };
        break;

      case 'overdue':
        messageText = await TelegramMessageTemplatesService.getMessage('unpaid_reminder_overdue', {
          order: order.id
        });
        replyMarkup = {
          inline_keyboard: [
            [{ text: 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', web_app: { url: `https://t.me/${process.env.WEBAPP_BOT_USERNAME || 'your_webapp_bot'}?startapp` }}]
          ]
        };
        break;
    }

    const message: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: messageText,
      parse_mode: 'HTML',
      reply_markup: replyMarkup
    };

    const result = await this.sendMessage(message);
    return !!result;
  }

  /**
   * üìù –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Rails)
   */
  static async sendReviewRequest(order: OrderData, user: UserData, product?: string): Promise<boolean> {
    const templateKey = product === 'mirena' ? 'review_mirena' : 'review';
    
    const reviewText = await TelegramMessageTemplatesService.getMessage(templateKey, {
      product: product || '—Ç–æ–≤–∞—Ä–∞'
    });

    const message: WebappTelegramMessage = {
      chat_id: user.tg_id,
      text: reviewText,
      parse_mode: 'Markdown', // –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ *bold* –≤ —à–∞–±–ª–æ–Ω–µ
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', web_app: { url: `https://t.me/${process.env.WEBAPP_BOT_USERNAME || 'your_webapp_bot'}?startapp=reviews` }}]
        ]
      }
    };

    const result = await this.sendMessage(message);
    return !!result;
  }

  /**
   * üì¶ –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ —É –∫—É—Ä—å–µ—Ä–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Rails)
   */
  static async requestTrackingNumber(orderId: number, user: UserData): Promise<boolean> {
    const trackText = await TelegramMessageTemplatesService.getMessage('set_track_num', {
      order: orderId,
      fio: user.full_name
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
    const state = {
      orderId,
      waitingForTrack: true,
      timestamp: Date.now()
    };

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
    (global as any).courierStates = (global as any).courierStates || new Map();
    (global as any).courierStates.set(this.COURIER_CHAT_ID, state);

    const promptMessage: WebappTelegramMessage = {
      chat_id: this.COURIER_CHAT_ID,
      text: trackText,
      parse_mode: 'HTML'
    };

    const result = await this.sendMessage(promptMessage);
    return !!result;
  }

  /**
   * üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Rails)
   */
  static async sendPaymentApprovalNotification(order: OrderData, user: UserData): Promise<boolean> {
    const approvalText = await TelegramMessageTemplatesService.getMessage('approved_pay', {
      order: order.id,
      fio: user.full_name
    });

    const message: WebappTelegramMessage = {
      chat_id: this.ADMIN_CHAT_ID,
      text: approvalText,
      parse_mode: 'HTML'
    };

    const result = await this.sendMessage(message);
    return !!result;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
   */
  static async handleOrderCallback(callbackQuery: any): Promise<boolean> {
    const { id: callbackQueryId, data: callbackData, from } = callbackQuery;
    
    console.log(`üîÑ [WEBAPP BOT] Handling callback: ${callbackData} from user ${from.id}`);

    if (!callbackData || !callbackData.startsWith('order_')) {
      await this.answerCallbackQuery(callbackQueryId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      return false;
    }

    try {
      const [action, subAction, orderIdStr] = callbackData.split('_');
      const orderId = parseInt(orderIdStr);

      if (isNaN(orderId)) {
        await this.answerCallbackQuery(callbackQueryId, '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞');
        return false;
      }

      switch (subAction) {
        case 'paid':
          // –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª"
          await this.answerCallbackQuery(callbackQueryId, '–£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã...');
          await this.callOrderStatusAPI(orderId, 'paid');
          break;

        case 'approve':
          // –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É
          if (from.id.toString() !== this.ADMIN_CHAT_ID) {
            await this.answerCallbackQuery(callbackQueryId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
            return false;
          }
          await this.answerCallbackQuery(callbackQueryId, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É...');
          await this.callOrderStatusAPI(orderId, 'processing');
          break;

        case 'cancel':
          // –ê–¥–º–∏–Ω –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑
          if (from.id.toString() !== this.ADMIN_CHAT_ID) {
            await this.answerCallbackQuery(callbackQueryId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è');
            return false;
          }
          await this.answerCallbackQuery(callbackQueryId, '–û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑...');
          await this.callOrderStatusAPI(orderId, 'cancelled');
          break;

        default:
          await this.answerCallbackQuery(callbackQueryId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
          return false;
      }

      return true;
    } catch (error) {
      console.error('‚ùå [WEBAPP BOT] Callback error:', error);
      await this.answerCallbackQuery(callbackQueryId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
      return false;
    }
  }

  /**
   * –í—ã–∑–≤–∞—Ç—å API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  private static async callOrderStatusAPI(orderId: number, newStatus: string): Promise<void> {
    try {
      const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3009';
      const response = await fetch(`${baseUrl}/api/webapp/orders/${orderId}/status`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus }),
      });

      if (!response.ok) {
        throw new Error(`API call failed: ${response.status}`);
      }

      console.log(`‚úÖ [WEBAPP BOT] Order #${orderId} status updated to ${newStatus}`);
    } catch (error) {
      console.error(`‚ùå [WEBAPP BOT] Failed to update order #${orderId}:`, error);
    }
  }

  /**
   * –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query
   */
  private static async answerCallbackQuery(callbackQueryId: string, text: string): Promise<void> {
    try {
      await fetch(`${this.WEBAPP_API_URL}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text,
          show_alert: false,
        }),
      });
    } catch (error) {
      console.error('‚ùå [WEBAPP BOT] Callback answer error:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webapp –±–æ—Ç–µ
   */
  static async getBotInfo(): Promise<any> {
    try {
      const response = await fetch(`${this.WEBAPP_API_URL}/getMe`);
      const result = await response.json();
      return result;
    } catch (error: any) {
      console.error('‚ùå [WEBAPP BOT] Bot info error:', error);
      return { error: error.message };
    }
  }
} 