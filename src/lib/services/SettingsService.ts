import { PrismaClient } from '@prisma/client';
import { RedisService } from './redis.service';

const prisma = new PrismaClient();

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã settings
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
 */
export class SettingsService {
  private static cache = new Map<string, string>();
  private static lastCacheUpdate = 0;
  private static cacheExpiry = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  static async get(variable: string, defaultValue?: string): Promise<string | null> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ Redis
      if (RedisService.isAvailable()) {
        const cachedValue = await RedisService.getCache<string>(`setting:${variable}`);
        if (cachedValue !== null) {
          return cachedValue;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
      if (this.cache.has(variable) && Date.now() - this.lastCacheUpdate < this.cacheExpiry) {
        return this.cache.get(variable) || defaultValue || null;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const setting = await prisma.settings.findUnique({
        where: { variable }
      });

      const value = setting?.value || defaultValue || null;

      // –ö—ç—à–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
      if (value !== null) {
        this.cache.set(variable, value);
        if (RedisService.isAvailable()) {
          await RedisService.setCache(`setting:${variable}`, value, 300); // 5 –º–∏–Ω—É—Ç TTL
        }
      }

      return value;
    } catch (error) {
      console.error(`‚ùå Error getting setting ${variable}:`, error);
      return defaultValue || null;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  static async set(variable: string, value: string, description?: string): Promise<boolean> {
    try {
      await prisma.settings.upsert({
        where: { variable },
        update: { 
          value, 
          updated_at: new Date(),
          ...(description && { description })
        },
        create: { 
          variable, 
          value, 
          description: description || `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${variable}`,
          created_at: new Date(),
          updated_at: new Date()
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏
      this.cache.set(variable, value);
      if (RedisService.isAvailable()) {
        await RedisService.setCache(`setting:${variable}`, value, 300);
      }

      return true;
    } catch (error) {
      console.error(`‚ùå Error setting ${variable}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å boolean –Ω–∞—Å—Ç—Ä–æ–π–∫—É
   */
  static async getBoolean(variable: string, defaultValue: boolean = false): Promise<boolean> {
    const value = await this.get(variable, defaultValue.toString());
    return value === 'true' || value === '1';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —á–∏—Å–ª–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
   */
  static async getNumber(variable: string, defaultValue: number = 0): Promise<number> {
    const value = await this.get(variable, defaultValue.toString());
    const num = Number(value);
    return isNaN(num) ? defaultValue : num;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  static async clearCache(): Promise<void> {
    this.cache.clear();
    this.lastCacheUpdate = 0;
    
    if (RedisService.isAvailable()) {
      const redis = await RedisService.getInstance();
      if (redis) {
        const keys = await redis.keys('setting:*');
        if (keys.length > 0) {
          await redis.del(...keys);
        }
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
   */
  static async getBotSettings() {
    const settings = {
      // –¢–æ–∫–µ–Ω—ã –±–æ—Ç–æ–≤
      client_bot_token: await this.get('client_bot_token', process.env.WEBAPP_TELEGRAM_BOT_TOKEN),
      admin_bot_token: await this.get('admin_bot_token', process.env.TELESKLAD_BOT_TOKEN),
      
      // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      admin_chat_id: await this.get('admin_chat_id', '125861752'),
      courier_tg_id: await this.get('courier_tg_id', '7690550402'),
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
      webhook_url: await this.get('webhook_url'),
      webhook_secret: await this.get('webhook_secret'),
      webhook_max_connections: await this.getNumber('webhook_max_connections', 40),
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Grammy
      grammy_enabled: await this.getBoolean('grammy_enabled', true),
      grammy_webhook_endpoint: await this.get('grammy_webhook_endpoint', '/api/telegram/grammy-simple/webhook'),
      grammy_rate_limit: await this.getNumber('grammy_rate_limit', 30),
      grammy_timeout: await this.getNumber('grammy_timeout', 5000),
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      notifications_enabled: await this.getBoolean('notifications_enabled', true),
      admin_notifications: await this.getBoolean('admin_notifications', true),
      courier_notifications: await this.getBoolean('courier_notifications', true),
      client_notifications: await this.getBoolean('client_notifications', true),
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
      delivery_cost: await this.getNumber('delivery_cost', 500),
      free_delivery_threshold: await this.getNumber('free_delivery_threshold', 5000),
      
      // –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
      first_video_id: await this.get('first_video_id'),
      
      // –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π (—Å fallback –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ settings)
      welcome_message: await this.get('preview_msg', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'),
      order_created_message: await this.get('tg_msg_unpaid_msg', 'üéâ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.'),
      order_unpaid_main_message: await this.get('tg_msg_unpaid_main', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:'),
      payment_processing_message: await this.get('tg_msg_paid_client', '–ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã...'),
      payment_received_message: await this.get('tg_msg_on_processing_client', '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É!'),
      order_shipped_message: await this.get('tg_msg_on_shipped_courier', '–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'),
      order_cancelled_message: await this.get('tg_msg_cancel', '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.'),
      track_number_saved_message: await this.get('tg_msg_track_num_save', '–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω.'),
      unpaid_reminder_message: await this.get('tg_msg_unpaid_reminder_one', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ'),
      approved_pay_message: await this.get('tg_msg_approved_pay', '–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'),
      courier_processing_message: await this.get('tg_msg_on_processing_courier', '–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑'),
      admin_payment_check_message: await this.get('tg_msg_paid_admin', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É'),
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫
      bot_btn_title: await this.get('bot_btn_title', 'üõí –ö–∞—Ç–∞–ª–æ–≥'),
      group_btn_title: await this.get('group_btn_title', 'üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏'),
      support_btn_title: await this.get('support_btn_title', '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'),
      
      // –°—Å—ã–ª–∫–∏
      tg_group: await this.get('tg_group'),
      tg_support: await this.get('tg_support'),
      webapp_url: await this.get('webapp_url', process.env.WEBAPP_URL),
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
      tg_msg_unpaid_main: await this.get('tg_msg_unpaid_main'),
      tg_msg_paid_client: await this.get('tg_msg_paid_client'),
      tg_msg_paid_admin: await this.get('tg_msg_paid_admin'),
      tg_msg_on_processing_client: await this.get('tg_msg_on_processing_client'),
      tg_msg_on_processing_courier: await this.get('tg_msg_on_processing_courier'),
      tg_msg_set_track_num: await this.get('tg_msg_set_track_num'),
      tg_msg_on_shipped_client: await this.get('tg_msg_on_shipped_courier'),
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      maintenance_mode: await this.getBoolean('maintenance_mode', false),
      maintenance_message: await this.get('maintenance_message', '–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'),
      debug_mode: await this.getBoolean('debug_mode', false),
      log_level: await this.get('log_level', 'info'),
      environment: await this.get('environment', 'development')
    };

    return settings;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å Grammy –∫ —Ä–∞–±–æ—Ç–µ
   */
  static async isGrammyReady(): Promise<boolean> {
    try {
      const settings = await this.getBotSettings();
      
      const hasTokens = !!(settings.client_bot_token && settings.admin_bot_token);
      const grammyEnabled = settings.grammy_enabled;
      const hasWebhook = !!settings.webhook_url;
      
      return hasTokens && grammyEnabled && hasWebhook;
    } catch (error) {
      console.error('‚ùå Error checking Grammy readiness:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Grammy
   */
  static async getGrammyConfig() {
    const settings = await this.getBotSettings();
    
    return {
      clientBotToken: settings.client_bot_token!,
      adminBotToken: settings.admin_bot_token!,
      webhookUrl: settings.webhook_url,
      webhookEndpoint: settings.grammy_webhook_endpoint,
      rateLimit: settings.grammy_rate_limit,
      timeout: settings.grammy_timeout,
      enabled: settings.grammy_enabled,
      adminChatId: settings.admin_chat_id,
      courierTgId: settings.courier_tg_id
    };
  }

  /**
   * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  static async bulkUpdate(updates: Record<string, string>): Promise<boolean> {
    try {
      for (const [variable, value] of Object.entries(updates)) {
        await this.set(variable, value);
      }
      
      // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await this.clearCache();
      
      return true;
    } catch (error) {
      console.error('‚ùå Error bulk updating settings:', error);
      return false;
    }
  }
}

export default SettingsService; 