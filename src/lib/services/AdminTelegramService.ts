interface AdminTelegramServiceOptions {
  markup?: string;
  markup_url?: string;
  markup_text?: string;
  markup_ext_url?: string;
}

/**
 * AdminTelegramService - —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞: 7612206140:AAHA6sV7VZLyUu0Ua1DAoULiFYehAkAjJK4
 */
export class AdminTelegramService {
  private static readonly MAIN_BOT_TOKEN = '7612206140:AAHA6sV7VZLyUu0Ua1DAoULiFYehAkAjJK4';
  private static readonly ADMIN_CHAT_ID = '125861752'; // ID –≠–ª—å–¥–∞—Ä–∞
  private static readonly MESSAGE_LIMIT = 4090;

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
   */
  static async sendToAdmin(message: string, options: AdminTelegramServiceOptions = {}): Promise<number | Error> {
    console.log(`üì§ AdminTelegramService.sendToAdmin:`, {
      to: this.ADMIN_CHAT_ID,
      markup: options.markup,
      messageLength: message.length
    });

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      let finalMessage = message;
      if (process.env.NODE_ENV === 'development') {
        finalMessage = `‚ÄºÔ∏è‚ÄºÔ∏èDevelopment‚ÄºÔ∏è‚ÄºÔ∏è\n\n${message}`;
      }

      // –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      if (finalMessage.length > this.MESSAGE_LIMIT) {
        finalMessage = finalMessage.substring(0, this.MESSAGE_LIMIT - 10) + '...';
      }

      const url = `https://api.telegram.org/bot${this.MAIN_BOT_TOKEN}/sendMessage`;
      
      const payload: any = {
        chat_id: this.ADMIN_CHAT_ID,
        text: finalMessage,
        parse_mode: 'HTML'
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
      if (options.markup) {
        payload.reply_markup = this.createKeyboard(options);
      }

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      const result = await response.json();

      if (result.ok) {
        console.log(`‚úÖ Message sent to admin via main bot, ID: ${result.result.message_id}`);
        return result.result.message_id;
      } else {
        console.error('‚ùå Failed to send message to admin:', result);
        return new Error(`Telegram API error: ${result.description}`);
      }

    } catch (error) {
      console.error('‚ùå Error sending message to admin:', error);
      return error instanceof Error ? error : new Error('Unknown error');
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private static createKeyboard(options: AdminTelegramServiceOptions): any {
    const keyboard: any[][] = [];

    // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    if (options.markup) {
      switch (options.markup) {
        case 'approve_payment':
          keyboard.push([{
            text: '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞',
            callback_data: 'approve_payment'
          }]);
          break;
        case 'submit_tracking':
          keyboard.push([{
            text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä',
            callback_data: 'submit_tracking'
          }]);
          break;
        default:
          keyboard.push([{
            text: options.markup_text || '–ö–Ω–æ–ø–∫–∞',
            callback_data: options.markup
          }]);
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if (options.markup_url) {
      keyboard.push([{
        text: options.markup_text || '–°—Å—ã–ª–∫–∞',
        url: options.markup_url
      }]);
    }

    if (options.markup_ext_url) {
      keyboard.push([{
        text: '–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞',
        url: options.markup_ext_url
      }]);
    }

    return {
      inline_keyboard: keyboard
    };
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è MarkdownV2
   */
  private static escapeMarkdownV2(text: string): string {
    // –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    const specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    
    let escaped = text;
    for (const char of specialChars) {
      escaped = escaped.replace(new RegExp('\\' + char, 'g'), '\\' + char);
    }
    
    return escaped;
  }
} 