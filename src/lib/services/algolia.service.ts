import algoliasearch from 'algoliasearch/lite';

// Algolia –∫–ª–∏–µ–Ω—Ç
const searchClient = algoliasearch(
  process.env.NEXT_PUBLIC_ALGOLIA_APP_ID || 'YOUR_APP_ID',
  process.env.NEXT_PUBLIC_ALGOLIA_SEARCH_KEY || 'YOUR_SEARCH_KEY'
);

// –ù–∞–∑–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
export const ALGOLIA_INDEXES = {
  PRODUCTS: process.env.NEXT_PUBLIC_ALGOLIA_INDEX_PRODUCTS || 'nextadmin_products',
} as const;

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export { searchClient };

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ Algolia
export interface AlgoliaProduct {
  objectID: string;
  id: number;
  name: string;
  price: number;
  old_price?: number;
  stock_quantity: number;
  image_url?: string;
  category_name?: string;
  category_id?: number;
  ancestry?: string;
  show_in_webapp: boolean;
  description?: string;
  is_in_stock: boolean;
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å Algolia
export class AlgoliaService {
  private static index = searchClient.initIndex(ALGOLIA_INDEXES.PRODUCTS);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è API)
  static async syncProductsFromDatabase(products: any[]) {
    try {
      console.log('üîÑ Starting Algolia products sync from database...');
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Algolia
      const algoliaProducts: AlgoliaProduct[] = products.map((product: any) => ({
        objectID: product.id.toString(),
        id: product.id,
        name: product.name,
        price: Number(product.price),
        old_price: product.old_price ? Number(product.old_price) : undefined,
        stock_quantity: product.stock_quantity,
        image_url: product.image_url,
        category_name: undefined, // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤ —Å—Ö–µ–º–µ
        category_id: undefined,
        ancestry: product.ancestry,
        show_in_webapp: product.show_in_webapp || false,
        description: product.description,
        is_in_stock: product.stock_quantity > 0,
      }));

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Algolia
      const result = await (this.index as any).replaceAllObjects(algoliaProducts);
      console.log('‚úÖ Algolia sync completed:', result);
      
      return result;
    } catch (error) {
      console.error('‚ùå Algolia sync failed:', error);
      throw error;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
  static async syncProducts() {
    try {
      console.log('üîÑ Starting Algolia products sync...');
      
      // –î–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
      const baseUrl = typeof window !== 'undefined' 
        ? window.location.origin 
        : process.env.NEXTAUTH_URL || 'http://localhost:3000';
      
      const response = await fetch(`${baseUrl}/api/webapp/products`);
      
      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
      }
      
      const data = await response.json();
      const products = data.products || [];

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç Algolia
      const algoliaProducts: AlgoliaProduct[] = products.map((product: any) => ({
        objectID: product.id.toString(),
        id: product.id,
        name: product.name,
        price: Number(product.price),
        old_price: product.old_price ? Number(product.old_price) : undefined,
        stock_quantity: product.stock_quantity,
        image_url: product.image_url,
        category_name: product.category_name || undefined,
        category_id: product.category_id || undefined,
        ancestry: product.ancestry,
        show_in_webapp: true, // –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –¥–ª—è WebApp
        description: product.description,
        is_in_stock: product.stock_quantity > 0,
      }));

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Algolia
      const result = await (this.index as any).replaceAllObjects(algoliaProducts);
      console.log('‚úÖ Algolia sync completed:', result);
      
      return result;
    } catch (error) {
      console.error('‚ùå Algolia sync failed:', error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  static async saveProduct(product: any) {
    try {
      const algoliaProduct: AlgoliaProduct = {
        objectID: product.id.toString(),
        id: product.id,
        name: product.name,
        price: Number(product.price),
        old_price: product.old_price ? Number(product.old_price) : undefined,
        stock_quantity: product.stock_quantity,
        image_url: product.image_url,
        category_name: product.category_name || undefined,
        category_id: product.category_id || undefined,
        ancestry: product.ancestry,
        show_in_webapp: product.show_in_webapp || false,
        description: product.description,
        is_in_stock: product.stock_quantity > 0,
      };

      const result = await (this.index as any).saveObject(algoliaProduct);
      console.log('‚úÖ Product saved to Algolia:', result);
      return result;
    } catch (error) {
      console.error('‚ùå Failed to save product to Algolia:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  static async deleteProduct(productId: number) {
    try {
      const result = await (this.index as any).deleteObject(productId.toString());
      console.log('‚úÖ Product deleted from Algolia:', result);
      return result;
    } catch (error) {
      console.error('‚ùå Failed to delete product from Algolia:', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ (fallback –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
  static async searchProducts(query: string, options?: any) {
    try {
      const result = await this.index.search(query, {
        hitsPerPage: options?.limit || 20,
        filters: 'show_in_webapp:true AND is_in_stock:true',
        ...options,
      });
      
      return result.hits as AlgoliaProduct[];
    } catch (error) {
      console.error('‚ùå Algolia search failed:', error);
      throw error;
    }
  }
} 