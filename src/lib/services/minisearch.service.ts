import MiniSearch from 'minisearch';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ
export interface SearchProduct {
  id: number;
  title: string;
  description?: string;
  price: number;
  old_price?: number;
  stock_quantity: number;
  is_in_stock: boolean;
  image_url?: string;
  category_name?: string;
  category_id?: number;
  brand?: string;
  tags?: string[];
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MiniSearch
const searchOptions = {
  fields: ['title', 'description', 'category_name', 'brand', 'tags'], // –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
  storeFields: ['title', 'description', 'price', 'old_price', 'stock_quantity', 'is_in_stock', 'image_url', 'category_name', 'category_id'], // –ø–æ–ª—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
  searchOptions: {
    boost: { title: 2, brand: 1.5 }, // –±—É—Å—Ç–∏–Ω–≥ –¥–ª—è –±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
    fuzzy: 0.2, // –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫
    prefix: true, // –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
  }
};

// –°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ —Å MiniSearch
export class MiniSearchService {
  private static instance: MiniSearch<SearchProduct>;
  private static products: SearchProduct[] = [];

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
  static initialize(products: SearchProduct[] = []) {
    this.instance = new MiniSearch(searchOptions);
    this.products = products;
    
    if (products.length > 0) {
      this.instance.addAll(products);
      console.log(`üîç MiniSearch initialized with ${products.length} products`);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
  static getInstance(): MiniSearch<SearchProduct> {
    if (!this.instance) {
      this.initialize();
    }
    return this.instance;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
  static updateIndex(products: SearchProduct[]) {
    this.products = products;
    this.instance = new MiniSearch(searchOptions);
    this.instance.addAll(products);
    console.log(`üîÑ MiniSearch index updated with ${products.length} products`);
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
  static addProduct(product: SearchProduct) {
    const instance = this.getInstance();
    instance.add(product);
    this.products.push(product);
    console.log(`‚ûï Product added to search index: ${product.title}`);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  static updateProduct(product: SearchProduct) {
    const instance = this.getInstance();
    instance.discard(product.id);
    instance.add(product);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
    const index = this.products.findIndex(p => p.id === product.id);
    if (index !== -1) {
      this.products[index] = product;
    }
    console.log(`üîÑ Product updated in search index: ${product.title}`);
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  static removeProduct(productId: number) {
    const instance = this.getInstance();
    instance.discard(productId);
    this.products = this.products.filter(p => p.id !== productId);
    console.log(`üóëÔ∏è Product removed from search index: ${productId}`);
  }

  // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  static search(query: string, options: {
    limit?: number;
    categoryId?: number;
    inStockOnly?: boolean;
    minPrice?: number;
    maxPrice?: number;
  } = {}): SearchProduct[] {
    if (!query.trim()) {
      return this.getFilteredProducts(options);
    }

    const instance = this.getInstance();
    const {
      limit = 20,
      categoryId,
      inStockOnly = false,
      minPrice,
      maxPrice
    } = options;

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
      const results = instance.search(query, {
        ...searchOptions.searchOptions
      });

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      let products = results.map(result => {
        const product = this.products.find(p => p.id === result.id);
        return product ? { ...product, score: result.score } : null;
      }).filter(Boolean) as (SearchProduct & { score: number })[];

      // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      products = products.slice(0, limit * 2);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      const filteredProducts = this.applyFilters(products, {
        categoryId,
        inStockOnly,
        minPrice,
        maxPrice
      });

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return filteredProducts.slice(0, limit);

    } catch (error) {
      console.error('‚ùå MiniSearch search failed:', error);
      return this.getFilteredProducts(options);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –ø–æ–∏—Å–∫–∞
  private static getFilteredProducts(options: {
    limit?: number;
    categoryId?: number;
    inStockOnly?: boolean;
    minPrice?: number;
    maxPrice?: number;
  }): SearchProduct[] {
    const { limit = 20 } = options;
    
    let products = [...this.products];
    products = this.applyFilters(products, options);
    
    return products.slice(0, limit);
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  private static applyFilters(
    products: SearchProduct[],
    filters: {
      categoryId?: number;
      inStockOnly?: boolean;
      minPrice?: number;
      maxPrice?: number;
    }
  ): SearchProduct[] {
    const { categoryId, inStockOnly, minPrice, maxPrice } = filters;

    return products.filter(product => {
      // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (categoryId && product.category_id !== categoryId) {
        return false;
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é
      if (inStockOnly && !product.is_in_stock) {
        return false;
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
      if (minPrice && product.price < minPrice) {
        return false;
      }

      if (maxPrice && product.price > maxPrice) {
        return false;
      }

      return true;
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  static getSuggestions(query: string, limit: number = 5): string[] {
    if (!query.trim()) return [];

    const instance = this.getInstance();
    
    try {
      const results = instance.search(query, {
        prefix: true,
        fuzzy: 0.1
      });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π
      const suggestions = new Set<string>();
      
      results.forEach(result => {
        const product = this.products.find(p => p.id === result.id);
        if (product) {
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
          suggestions.add(product.title);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
          const words = product.title.toLowerCase().split(/\s+/);
          words.forEach(word => {
            if (word.length > 2 && word.startsWith(query.toLowerCase())) {
              suggestions.add(word);
            }
          });
        }
      });

      return Array.from(suggestions).slice(0, limit);
    } catch (error) {
      console.error('‚ùå MiniSearch suggestions failed:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
  static getStats() {
    return {
      totalProducts: this.products.length,
      indexSize: this.instance ? this.instance.documentCount : 0,
      isInitialized: !!this.instance
    };
  }
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
export const convertProductToSearchFormat = (product: any): SearchProduct => {
  return {
    id: product.id,
    title: product.title || product.name || '',
    description: product.description || '',
    price: Number(product.price) || 0,
    old_price: product.old_price ? Number(product.old_price) : undefined,
    stock_quantity: Number(product.stock_quantity) || 0,
    is_in_stock: Boolean(product.is_in_stock),
    image_url: product.image_url || undefined,
    category_name: product.category?.name || product.category_name || undefined,
    category_id: product.category_id || product.category?.id || undefined,
    brand: product.brand || undefined,
    tags: product.tags || []
  };
};

export default MiniSearchService; 