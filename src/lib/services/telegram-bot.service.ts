interface TelegramMessage {
  chat_id: number | string;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
  reply_markup?: {
    inline_keyboard: InlineKeyboardButton[][];
  };
}

interface InlineKeyboardButton {
  text: string;
  callback_data?: string;
  web_app?: {
    url: string;
  };
  url?: string;
}

interface Purchase {
  id: number;
  totalAmount: number;
  status: string;
  isUrgent?: boolean;
  items: {
    productName: string;
    quantity: number;
    costPrice: number;
    total: number;
  }[];
  createdAt: string;
  supplierName?: string;
  notes?: string;
}

import { TelegramTokenService } from './telegram-token.service';

export class TelegramBotService {
  // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã - —Ç–µ–ø–µ—Ä—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
  private static BOT_TOKEN: string | null = null;
  private static API_URL: string | null = null;
  
  // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID –∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  private static readonly GROUP_CHAT_ID = process.env.TELEGRAM_GROUP_CHAT_ID || '-4729817036';

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ API URL
   */
  private static async initializeToken(): Promise<void> {
    if (!this.BOT_TOKEN || !this.API_URL) {
      this.BOT_TOKEN = await TelegramTokenService.getTelegramBotToken();
      if (this.BOT_TOKEN) {
        this.API_URL = `https://api.telegram.org/bot${this.BOT_TOKEN}`;
      }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  private static async sendMessage(message: TelegramMessage): Promise<any> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await this.initializeToken();
    
    if (!this.BOT_TOKEN || !this.API_URL) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not configured');
      return null;
    }

    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ –≤ –≥—Ä—É–ø–ø—É
    if (process.env.NODE_ENV === 'development' && message.chat_id !== this.GROUP_CHAT_ID) {
      console.log(`üîß DEV MODE: Simulating Telegram message to ${message.chat_id}`);
      console.log(`üìù Message: ${message.text.substring(0, 200)}...`);
      return {
        ok: true,
        result: {
          message_id: Math.floor(Math.random() * 10000),
          chat: { id: message.chat_id },
          date: Math.floor(Date.now() / 1000),
          text: message.text
        }
      };
    }

    try {
      console.log(`üì§ Sending message to ${message.chat_id}:`, message.text.substring(0, 100) + '...');
      
      const response = await fetch(`${this.API_URL!}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Telegram API error: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ Message sent successfully, message_id:', result.result?.message_id);
      return result;
    } catch (error) {
      console.error('‚ùå Error sending Telegram message:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  private static async editMessage(chatId: number | string, messageId: number, text: string, replyMarkup?: any): Promise<any> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await this.initializeToken();
    
    if (!this.BOT_TOKEN || !this.API_URL) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN not configured');
      return null;
    }

    try {
      console.log(`üìù Editing message ${messageId} in chat ${chatId}`);
      
      const response = await fetch(`${this.API_URL!}/editMessageText`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text,
          parse_mode: 'HTML',
          reply_markup: replyMarkup,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Telegram API error: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      console.log('‚úÖ Message edited successfully');
      return result;
    } catch (error) {
      console.error('‚ùå Error editing Telegram message:', error);
      return null;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static formatPurchase(purchase: Purchase, showEditButton: boolean = false): string {
    const items = purchase.items
      .map(item => `‚Ä¢ ${item.productName} - ${item.quantity} —à—Ç. √ó ${item.costPrice} ‚Ç∫ = ${item.total} ‚Ç∫`)
      .join('\n');

    const urgentTag = purchase.isUrgent ? 'üî¥ –°–†–û–ß–ù–û! ' : '';
    const status = this.getStatusText(purchase.status);

    let text = `${urgentTag}<b>–ó–∞–∫—É–ø–∫–∞ #${purchase.id}</b>
<b>–°—Ç–∞—Ç—É—Å:</b> ${status}

<b>–¢–æ–≤–∞—Ä—ã:</b>
${items}

<b>–û–±—â–∞—è —Å—É–º–º–∞:</b> ${purchase.totalAmount} ‚Ç∫
<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${new Date(purchase.createdAt).toLocaleString('ru-RU')}`;

    if (purchase.supplierName) {
      text += `\n<b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> ${purchase.supplierName}`;
    }

    if (purchase.notes) {
      text += `\n<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> ${purchase.notes}`;
    }

    return text;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
   */
  private static getStatusText(status: string): string {
    switch (status) {
      case 'draft': return 'üóíÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫';
      case 'sent_to_supplier': return 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º';
      case 'supplier_editing': return '‚úèÔ∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç';
      case 'awaiting_payment': return 'üí≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É';
      case 'paid': return 'üí∞ –û–ø–ª–∞—á–µ–Ω–æ';
      case 'preparing': return 'üì¶ –ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ';
      case 'shipped': return 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ä–≥–æ';
      case 'in_transit': return 'üõ´ –í –ø—É—Ç–∏';
      case 'delivered': return '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ';
      case 'cancelled': return '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ';
      default: return status;
    }
  }

  /**
   * 1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É –≤ –≥—Ä—É–ø–ø—É –∑–∞–∫—É–ø—â–∏–∫–∞
   */
  static async sendPurchaseToSupplier(purchase: Purchase): Promise<{ success: boolean; messageId?: number }> {
    console.log(`üöÄ Sending purchase #${purchase.id} to group ${this.GROUP_CHAT_ID}`);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ –ª–∏—Ä–∞—Ö
    const totalPrimeCostTry = purchase.items.reduce((sum, item) => sum + (item.costPrice * item.quantity), 0);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤ –ª–∏—Ä–∞—Ö
    const itemsText = purchase.items
      .map(item => {
        const itemTotal = item.costPrice * item.quantity;
        return `‚Ä¢ <b>${item.productName}</b>\n  ${item.quantity} —à—Ç. √ó ‚Ç∫${item.costPrice.toFixed(2)} = <b>‚Ç∫${itemTotal.toFixed(2)}</b>`;
      })
      .join('\n\n');

    const urgentTag = purchase.isUrgent ? 'üî¥ <b>–°–†–û–ß–ù–ê–Ø –ó–ê–ö–£–ü–ö–ê!</b>\n\n' : '';

    const message: TelegramMessage = {
      chat_id: this.GROUP_CHAT_ID,
      text: `${urgentTag}üìã <b>–ù–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞ #${purchase.id}</b>

<b>–¢–æ–≤–∞—Ä—ã –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å:</b>
${itemsText}

üí∞ <b>–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: ‚Ç∫${totalPrimeCostTry.toFixed(2)}</b>

üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${new Date(purchase.createdAt).toLocaleString('ru-RU', { 
        timeZone: 'Europe/Moscow',
        day: '2-digit',
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}${purchase.supplierName ? `\nüè™ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> ${purchase.supplierName}` : ''}${purchase.notes ? `\nüìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> ${purchase.notes}` : ''}

<i>–ó–∞–∫—É–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</i>`,
      parse_mode: 'HTML'
    };

    const result = await this.sendMessage(message);
    
    if (result && result.ok) {
      console.log(`‚úÖ Purchase sent to group, message_id: ${result.result.message_id}`);
      return { success: true, messageId: result.result.message_id };
    }
    
    console.log('‚ùå Failed to send purchase to group');
    return { success: false };
  }











  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static async getBotInfo(): Promise<any> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await this.initializeToken();
    
    if (!this.BOT_TOKEN || !this.API_URL) {
      return { error: 'Bot token not configured' };
    }

    try {
      const response = await fetch(`${this.API_URL}/getMe`);
      const result = await response.json();
      return result;
    } catch (error: any) {
      console.error('‚ùå Error getting bot info:', error);
      return { error: error.message };
    }
  }
} 