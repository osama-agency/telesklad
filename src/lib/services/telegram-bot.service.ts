interface TelegramMessage {
  chat_id: number | string;
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
  reply_markup?: {
    inline_keyboard: InlineKeyboardButton[][];
  };
}

interface InlineKeyboardButton {
  text: string;
  callback_data?: string;
  web_app?: {
    url: string;
  };
  url?: string;
}

interface Purchase {
  id: number;
  totalAmount: number;
  status: string;
  isUrgent: boolean;
  items: {
    productName: string;
    quantity: number;
    costPrice: number;
    total: number;
  }[];
  createdAt: string;
}

export class TelegramBotService {
  private static readonly BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  private static readonly API_URL = `https://api.telegram.org/bot${TelegramBotService.BOT_TOKEN}`;
  
  // ID —á–∞—Ç–æ–≤ (–ø–æ–∫–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  private static readonly SUPPLIER_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID || '125861752'; // –í—Ä–µ–º–µ–Ω–Ω–æ: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
  private static readonly ADMIN_CHAT_ID = process.env.TELEGRAM_ADMIN_CHAT_ID || '125861752'; // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  private static async sendMessage(message: TelegramMessage): Promise<any> {
    if (!this.BOT_TOKEN) {
      console.error('TELEGRAM_BOT_TOKEN not configured');
      return null;
    }

    try {
      const response = await fetch(`${this.API_URL}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(message),
      });

      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.statusText}`);
      }

      const result = await response.json();
      return result;
    } catch (error) {
      console.error('Error sending Telegram message:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  private static async editMessage(chatId: number | string, messageId: number, text: string, replyMarkup?: any): Promise<any> {
    if (!this.BOT_TOKEN) {
      console.error('TELEGRAM_BOT_TOKEN not configured');
      return null;
    }

    try {
      const response = await fetch(`${this.API_URL}/editMessageText`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text,
          parse_mode: 'HTML',
          reply_markup: replyMarkup,
        }),
      });

      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.statusText}`);
      }

      const result = await response.json();
      return result;
    } catch (error) {
      console.error('Error editing Telegram message:', error);
      return null;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫—É–ø–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private static formatPurchase(purchase: Purchase): string {
    const items = purchase.items
      .map(item => `‚Ä¢ ${item.productName} - ${item.quantity} —à—Ç. √ó ${item.costPrice} ‚Ç∫ = ${item.total} ‚Ç∫`)
      .join('\n');

    const urgentTag = purchase.isUrgent ? 'üî¥ –°–†–û–ß–ù–û! ' : '';
    const status = this.getStatusText(purchase.status);
    const testTag = 'üß™ <i>(–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú)</i>';

    return `${urgentTag}<b>–ó–∞–∫—É–ø–∫–∞ #${purchase.id}</b> ${testTag}
<b>–°—Ç–∞—Ç—É—Å:</b> ${status}

<b>–¢–æ–≤–∞—Ä—ã:</b>
${items}

<b>–û–±—â–∞—è —Å—É–º–º–∞:</b> ${purchase.totalAmount} ‚Ç∫
<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${new Date(purchase.createdAt).toLocaleString('ru-RU')}

<i>üìù –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
   */
  private static getStatusText(status: string): string {
    switch (status) {
      case 'draft': return 'üóíÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫';
      case 'sent': return 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ';

      case 'awaiting_payment': return 'üí≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É';
      case 'paid': return 'üí∞ –û–ø–ª–∞—á–µ–Ω–æ';
      case 'in_transit': return 'üöö –í –ø—É—Ç–∏';
      case 'received': return '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ';
      case 'cancelled': return '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ';
      default: return status;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–∫—É–ø–∫—É –∑–∞–∫—É–ø—â–∏–∫—É
   */
  static async sendPurchaseToSupplier(purchase: Purchase): Promise<{ success: boolean; messageId?: number }> {
    if (!this.SUPPLIER_CHAT_ID) {
      console.error('TELEGRAM_SUPPLIER_CHAT_ID not configured');
      return { success: false };
    }

    const webAppUrl = `${process.env.NEXTAUTH_URL}/telegram-webapp/purchase-editor.html?purchaseId=${purchase.id}`;

    const message: TelegramMessage = {
      chat_id: this.SUPPLIER_CHAT_ID,
      text: this.formatPurchase({ ...purchase, status: 'sent' }),
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
              web_app: {
                url: webAppUrl
              }
            }
          ]
        ]
      }
    };

    const result = await this.sendMessage(message);
    
    if (result && result.ok) {
      return { success: true, messageId: result.result.message_id };
    }
    
    return { success: false };
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
   */
  static async notifyAdminPaymentReady(purchase: Purchase, messageId?: number): Promise<boolean> {
    if (!this.ADMIN_CHAT_ID) {
      console.error('TELEGRAM_ADMIN_CHAT_ID not configured');
      return false;
    }

    const adminMessage: TelegramMessage = {
      chat_id: this.ADMIN_CHAT_ID,
      text: `üí∞ <b>–ó–∞–∫—É–ø–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–ø–ª–∞—Ç–µ!</b>

${this.formatPurchase({ ...purchase, status: 'awaiting_payment' })}

–ó–∞–∫—É–ø—â–∏–∫ —Å–æ–±—Ä–∞–ª —Ç–æ–≤–∞—Ä—ã –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.`,
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '‚úÖ –û–ø–ª–∞—Ç–∏–ª',
              callback_data: `pay_purchase_${purchase.id}_${messageId || ''}`
            }
          ]
        ]
      }
    };

    const result = await this.sendMessage(adminMessage);
    return result && result.ok;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ —É –∑–∞–∫—É–ø—â–∏–∫–∞
   */
  static async updateSupplierPurchaseStatus(
    chatId: number | string, 
    messageId: number, 
    purchase: Purchase
  ): Promise<boolean> {
    let keyboard: InlineKeyboardButton[][] = [];

    if (purchase.status === 'sent') {
      const webAppUrl = `${process.env.NEXTAUTH_URL}/telegram-webapp/purchase-editor.html?purchaseId=${purchase.id}&messageId=${messageId}`;
      keyboard = [
        [
          {
            text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
            web_app: {
              url: webAppUrl
            }
          }
        ]
      ];
    } else if (purchase.status === 'paid') {
      keyboard = [
        [
          {
            text: 'üöö –ü–µ—Ä–µ–¥–∞–ª–∏ –≤ –∫–∞—Ä–≥–æ',
            callback_data: `ship_to_cargo_${purchase.id}_${messageId}`
          }
        ]
      ];
    }

    const result = await this.editMessage(
      chatId,
      messageId,
      this.formatPurchase(purchase),
      { inline_keyboard: keyboard }
    );

    return result && result.ok;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫
   */
  static async handleCallback(callbackQuery: any): Promise<boolean> {
    const { data, message, from } = callbackQuery;
    
    if (!data || !message) return false;

    try {
      if (data.startsWith('pay_purchase_')) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        const parts = data.split('_');
        const purchaseId = parseInt(parts[2]);
        const supplierMessageId = parts[3] ? parseInt(parts[3]) : null;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const response = await fetch(`${process.env.NEXTAUTH_URL}/api/purchases/${purchaseId}/status`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status: 'paid' }),
        });

        if (response.ok) {
          const purchase = await response.json();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∑–∞–∫—É–ø—â–∏–∫–∞
          if (supplierMessageId && this.SUPPLIER_CHAT_ID) {
            await this.updateSupplierPurchaseStatus(
              this.SUPPLIER_CHAT_ID,
              supplierMessageId,
              purchase
            );
          }

          // –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
          await this.answerCallbackQuery(callbackQuery.id, '‚úÖ –ó–∞–∫—É–ø–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è!');
          
          return true;
        }
      } else if (data.startsWith('ship_to_cargo_')) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–∞—Ä–≥–æ
        const parts = data.split('_');
        const purchaseId = parseInt(parts[3]);
        const messageId = parseInt(parts[4]);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const response = await fetch(`${process.env.NEXTAUTH_URL}/api/purchases/${purchaseId}/status`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status: 'in_transit' }),
        });

        if (response.ok) {
          const purchase = await response.json();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.updateSupplierPurchaseStatus(
            message.chat.id,
            messageId,
            purchase
          );

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          if (this.ADMIN_CHAT_ID) {
            await this.sendMessage({
              chat_id: this.ADMIN_CHAT_ID,
              text: `üöö <b>–¢–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –∫–∞—Ä–≥–æ!</b>\n\n${this.formatPurchase(purchase)}`,
              parse_mode: 'HTML'
            });
          }

          await this.answerCallbackQuery(callbackQuery.id, 'üöö –¢–æ–≤–∞—Ä—ã –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ –∫–∞—Ä–≥–æ!');
          
          return true;
        }
      }
    } catch (error) {
      console.error('Error handling callback:', error);
      await this.answerCallbackQuery(callbackQuery.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    return false;
  }

  /**
   * –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query
   */
  private static async answerCallbackQuery(callbackQueryId: string, text: string): Promise<void> {
    if (!this.BOT_TOKEN) return;

    try {
      await fetch(`${this.API_URL}/answerCallbackQuery`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text,
          show_alert: false,
        }),
      });
    } catch (error) {
      console.error('Error answering callback query:', error);
    }
  }
} 