import TelegramBot from 'node-telegram-bot-api';
import { prisma } from '@/libs/prismaDb';
import { TelegramTokenService } from './telegram-token.service';
import { TelegramService } from './TelegramService';
import { ReportService } from './report.service';

interface BotSettings {
  tg_token?: string;
  tg_main_bot?: string;
  admin_chat_id?: string;
  courier_tg_id?: string;
  admin_ids?: string;
  test_id?: string;
  preview_msg?: string;
  first_video_id?: string;
  bot_btn_title?: string;
  group_btn_title?: string;
  tg_group?: string;
  tg_support?: string;
}

/**
 * TelegramBotWorker - –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ (–∞–Ω–∞–ª–æ–≥ Rails TelegramBotWorker)
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook'–∏ –æ—Ç Telegram –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export class TelegramBotWorker {
  private bot: TelegramBot | null = null;
  private settings: BotSettings = {};
  private static instance: TelegramBotWorker | null = null;
  
  // –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–Ω–∞–ª–æ–≥ Rails.cache)
  private userStates: Map<string, any> = new Map();
  private TRACK_CACHE_PERIOD = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  private constructor() {}

  static getInstance(): TelegramBotWorker {
    if (!this.instance) {
      this.instance = new TelegramBotWorker();
    }
    return this.instance;
  }

  async initialize(): Promise<void> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      this.settings = {
        tg_token: process.env.TELEGRAM_BOT_TOKEN,
        tg_main_bot: process.env.TELEGRAM_BOT_USERNAME || '@strattera_bot',
        admin_chat_id: process.env.TELEGRAM_ADMIN_CHAT_ID || '125861752',
        courier_tg_id: process.env.TELEGRAM_COURIER_ID || '821810448',
        admin_ids: process.env.TELEGRAM_ADMIN_IDS || '125861752',
        test_id: process.env.TELEGRAM_TEST_ID,
        preview_msg: process.env.TELEGRAM_PREVIEW_MSG,
        first_video_id: process.env.TELEGRAM_FIRST_VIDEO_ID,
        bot_btn_title: process.env.TELEGRAM_BOT_BTN_TITLE || '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        group_btn_title: process.env.TELEGRAM_GROUP_BTN_TITLE || '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ',
        tg_group: process.env.TELEGRAM_GROUP_URL || 'https://t.me/joinchat/your_group',
        tg_support: process.env.TELEGRAM_SUPPORT_URL || 'https://t.me/your_support'
      };
      
      console.log('üìå Bot settings loaded from environment variables');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
      const token = await TelegramTokenService.getTelegramBotToken();
      if (!token) {
        console.error('‚ùå tg_token not specified!');
        throw new Error('Telegram bot token not configured');
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ë–ï–ó polling (—Ç–æ–ª—å–∫–æ webhook)
      this.bot = new TelegramBot(token, { polling: false });
      
      console.log('‚úÖ TelegramBotWorker initialized in webhook mode');
    } catch (error) {
      console.error('‚ùå Failed to initialize TelegramBotWorker:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook update –æ—Ç Telegram
   */
  async processWebhookUpdate(update: any): Promise<void> {
    if (!this.bot) {
      await this.initialize();
    }

    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      if (update.callback_query) {
        await this.handleCallback(update.callback_query);
      } else if (update.message) {
        await this.handleMessage(update.message);
      }
    } catch (error) {
      console.error('‚ùå Error processing webhook update:', error);
      this.processError(error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook URL –≤ Telegram
   */
  async setupWebhook(webhookUrl: string, secretToken?: string): Promise<boolean> {
    if (!this.bot) {
      await this.initialize();
    }

    try {
      const options: any = {
        allowed_updates: ['message', 'callback_query'],
      };

      if (secretToken) {
        options.secret_token = secretToken;
      }

      const result = await this.bot!.setWebHook(webhookUrl, options);
      
      if (result) {
        console.log(`‚úÖ Webhook set successfully: ${webhookUrl}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        const webhookInfo = await this.bot!.getWebHookInfo();
        console.log('üìå Webhook info:', webhookInfo);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå Failed to setup webhook:', error);
      return false;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ webhook (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  async deleteWebhook(): Promise<boolean> {
    if (!this.bot) {
      await this.initialize();
    }

    try {
      const result = await this.bot!.deleteWebHook();
      console.log('‚úÖ Webhook deleted successfully');
      return result;
    } catch (error) {
      console.error('‚ùå Failed to delete webhook:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º webhook
   */
  async getWebhookInfo(): Promise<any> {
    if (!this.bot) {
      await this.initialize();
    }

    try {
      return await this.bot!.getWebHookInfo();
    } catch (error) {
      console.error('‚ùå Failed to get webhook info:', error);
      return null;
    }
  }

  private async loadSettings(): Promise<void> {
    const settings = await prisma.settings.findMany();
    this.settings = settings.reduce((acc, setting) => {
      if (setting.variable && setting.value) {
        acc[setting.variable as keyof BotSettings] = setting.value;
      }
      return acc;
    }, {} as BotSettings);
  }

  private async handleCallback(callbackQuery: TelegramBot.CallbackQuery): Promise<void> {
    if (!this.bot) return;

    const data = callbackQuery.data;
    const message = callbackQuery.message;
    
    if (!data || !message) return;

    console.log(`üì≤ Callback: ${data} from ${callbackQuery.from.id}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∫–∞–∫ –≤ Rails
    switch (data) {
      case 'i_paid':
        await this.handleIPaid(callbackQuery);
        break;
      case 'approve_payment':
        await this.handleApprovePayment(callbackQuery);
        break;
      case 'submit_tracking':
        await this.handleSubmitTracking(callbackQuery);
        break;
      default:
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö callback'–æ–≤
        if (data.startsWith('order_')) {
          await this.handleOrderCallback(callbackQuery);
        }
    }
  }

  private async handleMessage(msg: TelegramBot.Message): Promise<void> {
    if (!this.bot) return;

    const chatId = msg.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫—É—Ä—å–µ—Ä–∞ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
    if (chatId.toString() === this.settings.courier_tg_id) {
      await this.inputTrackingNumber(msg);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (msg.text) {
      await this.processMessage(msg);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start
      if (msg.text !== '/start') {
        await this.sendFirstMsg(chatId);
      }
    } else if (msg.video) {
      await this.savePreviewVideo(msg);
    } else if (msg.photo) {
      await this.savePhoto(msg);
    } else {
      await this.otherMessage(msg);
    }
  }

  private async processMessage(msg: TelegramBot.Message): Promise<void> {
    const tgUser = msg.chat;
    
    // –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.findOrCreateUser(tgUser, true);
    
    if (user && !user.started) {
      await this.unlockUser(user);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ /start
    if (msg.text !== '/start' && user && msg.message_id) {
      try {
        await prisma.messages.create({
          data: {
            tg_id: BigInt(user.tg_id),
            text: msg.text,
            tg_msg_id: BigInt(msg.message_id),
            is_incoming: true,
            created_at: new Date(),
            updated_at: new Date()
          }
        });
      } catch (error) {
        console.error('Error saving message:', error);
      }
    }
  }

  private async findOrCreateUser(tgChat: any, createIfNotExists: boolean): Promise<any> {
    const tgId = tgChat.id.toString();
    
    let user = await prisma.users.findUnique({
      where: { tg_id: BigInt(tgId) }
    });

    if (!user && createIfNotExists) {
      user = await prisma.users.create({
        data: {
          tg_id: BigInt(tgId),
          email: `telegram_${tgId}@telegram.com`, // Required field
          first_name_raw: tgChat.first_name || '',
          last_name_raw: tgChat.last_name || '',
          username: tgChat.username || null,
          created_at: new Date(),
          updated_at: new Date()
        }
      });
    }

    return user;
  }

  private async unlockUser(user: any): Promise<void> {
    const msg = `User ${user.id} started bot`;
    console.log(`üîì ${msg}`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if (this.settings.test_id) {
      await TelegramService.call(msg, this.settings.test_id);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.users.update({
      where: { id: user.id },
      data: {
        started: true,
        is_blocked: false,
        updated_at: new Date()
      }
    });
  }

  private async inputTrackingNumber(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id.toString();
    const userState = this.userStates.get(`user_${chatId}_state`);
    
    if (!userState?.order_id || !msg.text) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const currentOrder = await prisma.orders.findUnique({
        where: { id: userState.order_id },
        select: { status: true }
      });

      if (!currentOrder) return;

      const previousStatus = currentOrder.status;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
      const updatedOrder = await prisma.orders.update({
        where: { id: userState.order_id },
        data: {
          tracking_number: msg.text,
          status: 3, // shipped (–≤ Rails —ç—Ç–æ 3, –Ω–µ 2)
          shipped_at: new Date(),
          updated_at: new Date()
        },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService
      if (previousStatus !== updatedOrder.status) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º msg_id –≤ bigint –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const orderForReport = {
          ...updatedOrder,
          msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
        };
        await ReportService.handleOrderStatusChange(orderForReport as any, previousStatus);
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (this.bot && userState.msg_id && userState.h_msg && msg.message_id) {
        const msgIds = [userState.msg_id, userState.h_msg, msg.message_id];
        
        for (let i = 0; i < msgIds.length; i++) {
          setTimeout(async () => {
            try {
              await this.bot!.deleteMessage(chatId, msgIds[i]);
            } catch (error) {
              console.error(`Failed to delete message ${msgIds[i]}:`, error);
            }
          }, (i + 1) * 1000);
        }
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.userStates.delete(`user_${chatId}_state`);
      
    } catch (error) {
      console.error('Error saving tracking number:', error);
    }
  }

  private async handleIPaid(query: TelegramBot.CallbackQuery): Promise<void> {
    if (!query.from || !query.message) return;

    try {
      const user = await prisma.users.findUnique({
        where: { tg_id: BigInt(query.from.id) }
      });

      if (!user) return;

      // –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const orderNumber = this.parseOrderNumber(query.message.text || '');
      if (!orderNumber) return;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const currentOrder = await prisma.orders.findUnique({
        where: { id: BigInt(orderNumber) },
        select: { status: true }
      });

      if (!currentOrder) return;

      const previousStatus = currentOrder.status;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      const updatedOrder = await prisma.orders.update({
        where: { id: BigInt(orderNumber) },
        data: {
          status: 1, // paid
          updated_at: new Date()
        },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true,
          bank_cards: true
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService
      if (previousStatus !== updatedOrder.status) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º msg_id –≤ bigint –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const orderForReport = {
          ...updatedOrder,
          msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
        };
        await ReportService.handleOrderStatusChange(orderForReport as any, previousStatus);
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      if (this.bot) {
        await this.bot.answerCallbackQuery(query.id, { text: '–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.' });
      }

    } catch (error) {
      console.error('Error handling i_paid:', error);
    }
  }

  private async handleApprovePayment(query: TelegramBot.CallbackQuery): Promise<void> {
    if (!query.message || !this.bot) return;

    try {
      const orderNumber = this.parseOrderNumber(query.message.text || '');
      if (!orderNumber) return;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const currentOrder = await prisma.orders.findUnique({
        where: { id: BigInt(orderNumber) },
        select: { status: true }
      });

      if (!currentOrder) return;

      const previousStatus = currentOrder.status;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      const updatedOrder = await prisma.orders.update({
        where: { id: BigInt(orderNumber) },
        data: {
          status: 2, // processing
          paid_at: new Date(),
          updated_at: new Date()
        },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService
      if (previousStatus !== updatedOrder.status) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º msg_id –≤ bigint –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const orderForReport = {
          ...updatedOrder,
          msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
        };
        await ReportService.handleOrderStatusChange(orderForReport as any, previousStatus);
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.bot.deleteMessage(query.message.chat.id, query.message.message_id);

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      await this.bot.answerCallbackQuery(query.id, { text: '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!' });

    } catch (error) {
      console.error('Error handling approve_payment:', error);
    }
  }

  private async handleSubmitTracking(query: TelegramBot.CallbackQuery): Promise<void> {
    if (!query.message || !this.bot) return;

    try {
      const text = query.message.text || '';
      const orderNumber = this.parseOrderNumber(text);
      const fullName = this.parseFullName(text);
      
      if (!orderNumber) return;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞
      const msg = await this.bot.sendMessage(
        query.message.chat.id,
        `üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ${orderNumber}\nüë§ –§–ò–û: ${fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.saveCache(orderNumber, query.message.message_id, msg.message_id, query.message.chat.id);

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      await this.bot.answerCallbackQuery(query.id, { text: '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ —á–∞—Ç' });

    } catch (error) {
      console.error('Error handling submit_tracking:', error);
    }
  }

  private async handleOrderCallback(query: TelegramBot.CallbackQuery): Promise<void> {
    const data = query.data;
    if (!data) return;

    const [prefix, action, orderIdStr] = data.split('_');
    const orderId = parseInt(orderIdStr);

    if (isNaN(orderId)) return;

    switch (action) {
      case 'paid':
        // –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª"
        await this.handleIPaid(query);
        break;
      case 'approve':
        // –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É
        await this.handleApprovePayment(query);
        break;
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
  }

  private parseOrderNumber(text: string): string | null {
    const match = text.match(/‚Ññ(\d+)/);
    return match ? match[1] : null;
  }

  private parseFullName(text: string): string | null {
    const match = text.match(/–§–ò–û:\s*(.+?)(?:\n|$)/);
    return match ? match[1].trim() : null;
  }

  private saveCache(orderId: string, msgId: number, hMsgId: number, chatId: number): void {
    const key = `user_${chatId}_state`;
    const state = {
      order_id: BigInt(orderId),
      msg_id: msgId,
      h_msg: hMsgId,
      timestamp: Date.now()
    };
    
    this.userStates.set(key, state);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ TRACK_CACHE_PERIOD
    setTimeout(() => {
      this.userStates.delete(key);
    }, this.TRACK_CACHE_PERIOD);
  }

  private async sendFirstMsg(chatId: number): Promise<void> {
    if (!this.bot) return;

    try {
      const firstBtn = this.initializeFirstBtn();
      const markup: TelegramBot.InlineKeyboardMarkup = {
        inline_keyboard: firstBtn
      };
      
      const caption = (this.settings.preview_msg || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!').replace(/\\n/g, '\n');
      
      if (this.settings.first_video_id) {
        await this.bot.sendVideo(chatId, this.settings.first_video_id, {
          caption,
          reply_markup: markup
        });
      } else {
        await this.bot.sendMessage(chatId, caption, {
          reply_markup: markup
        });
      }
    } catch (error) {
      console.error('Error sending first message:', error);
    }
  }

  private initializeFirstBtn(): TelegramBot.InlineKeyboardButton[][] {
    const mainBotUsername = this.settings.tg_main_bot || 'your_bot';
    
    return [
      [{
        text: this.settings.bot_btn_title || '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
        url: `https://t.me/${mainBotUsername}?startapp`
      }],
      [{
        text: this.settings.group_btn_title || '–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞',
        url: this.settings.tg_group || 'https://t.me/your_group'
      }],
      [{
        text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
        url: this.settings.tg_support || 'https://t.me/support'
      }]
    ];
  }

  private async savePreviewVideo(msg: TelegramBot.Message): Promise<void> {
    if (!msg.video || !this.bot) return;

    const adminIds = this.settings.admin_ids?.split(',') || [];
    
    if (adminIds.includes(msg.chat.id.toString())) {
      await this.bot.sendMessage(msg.chat.id, `ID –≤–∏–¥–µ–æ:\n${msg.video.file_id}`);
    }
  }

  private async savePhoto(msg: TelegramBot.Message): Promise<void> {
    if (!msg.photo || msg.photo.length === 0) return;

    const tgId = msg.chat.id;
    const fileId = msg.photo[msg.photo.length - 1].file_id; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    const msgId = msg.message_id;
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    console.log(`üì∏ Photo received from ${tgId}: ${fileId}`);
    
    // TODO: Implement file download and save logic
  }

  private async otherMessage(msg: TelegramBot.Message): Promise<void> {
    const message = `–ù–µ–∏–∑–≤. —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${msg.chat.id}`;
    console.warn(`‚ö†Ô∏è ${message}`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if (this.settings.test_id) {
      await TelegramService.call(message, this.settings.test_id);
    }
    
    await this.sendFirstMsg(msg.chat.id);
  }

  private processError(error: any): void {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error(`‚ùå TelegramBotWorker error: ${errorMessage}`);
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ email –æ–± –æ—à–∏–±–∫–µ
    // EmailService.sendError(errorMessage, error.stack);
  }
}