import TelegramBot from 'node-telegram-bot-api';
import { prisma } from '@/libs/prismaDb';
import { TelegramTokenService } from './telegram-token.service';
import { TelegramService } from './TelegramService';
import { ReportService } from './ReportService';
import { RedisService } from './redis.service';
import { CacheService } from './cache.service';
import { RedisQueueService } from './redis-queue.service';
import { UserService } from './UserService';

interface BotSettings {
  tg_token?: string;
  tg_main_bot?: string;
  admin_chat_id?: string;
  courier_tg_id?: string;
  admin_ids?: string;
  test_id?: string;
  preview_msg?: string;
  first_video_id?: string;
  bot_btn_title?: string;
  group_btn_title?: string;
  tg_group?: string;
  tg_support?: string;
}

/**
 * TelegramBotWorker - –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ (–∞–Ω–∞–ª–æ–≥ Rails TelegramBotWorker)
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook'–∏ –æ—Ç Telegram –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export class TelegramBotWorker {
  private bot: TelegramBot | null = null;
  private settings: BotSettings = {};
  private static instance: TelegramBotWorker | null = null;

  private constructor() {}

  static getInstance(): TelegramBotWorker {
    if (!this.instance) {
      this.instance = new TelegramBotWorker();
    }
    return this.instance;
  }

  async initialize(): Promise<void> {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
      await RedisService.initialize();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º Redis Queue Worker –µ—Å–ª–∏ Redis –¥–æ—Å—Ç—É–ø–µ–Ω
      if (RedisService.isAvailable()) {
        await RedisQueueService.startWorker();
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      await this.loadSettings();
      
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (!this.settings.tg_main_bot) {
        this.settings = {
          ...this.settings,
          tg_main_bot: process.env.TELEGRAM_BOT_USERNAME || '@strattera_bot',
          admin_chat_id: process.env.TELEGRAM_ADMIN_CHAT_ID || '125861752',
          courier_tg_id: process.env.TELEGRAM_COURIER_ID || '821810448',
          admin_ids: process.env.TELEGRAM_ADMIN_IDS || '125861752',
          test_id: process.env.TELEGRAM_TEST_ID,
          preview_msg: process.env.TELEGRAM_PREVIEW_MSG || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
          first_video_id: process.env.TELEGRAM_FIRST_VIDEO_ID,
          bot_btn_title: process.env.TELEGRAM_BOT_BTN_TITLE || '–ö–∞—Ç–∞–ª–æ–≥',
          group_btn_title: process.env.TELEGRAM_GROUP_BTN_TITLE || '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ',
          tg_group: process.env.TELEGRAM_GROUP_URL || 'https://t.me/+2rTVT8IxtFozNDY0',
          tg_support: process.env.TELEGRAM_SUPPORT_URL || 'https://t.me/strattera_help'
        };
        console.log('üìå Bot settings loaded from environment variables');
      } else {
        console.log('üìã Loaded settings:', {
          tg_main_bot: this.settings.tg_main_bot,
          bot_btn_title: this.settings.bot_btn_title,
          group_btn_title: this.settings.group_btn_title,
          has_preview_msg: !!this.settings.preview_msg,
          has_first_video_id: !!this.settings.first_video_id
        });
        console.log('üìå Bot settings loaded from database');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
      const token = await TelegramTokenService.getTelegramBotToken();
      if (!token) {
        console.error('‚ùå tg_token not specified!');
        throw new Error('Telegram bot token not configured');
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ë–ï–ó polling (—Ç–æ–ª—å–∫–æ webhook)
      this.bot = new TelegramBot(token, { polling: false });
      
      console.log('‚úÖ TelegramBotWorker initialized in webhook mode');
    } catch (error) {
      console.error('‚ùå Failed to initialize TelegramBotWorker:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook update –æ—Ç Telegram
   */
  async processWebhookUpdate(update: any): Promise<void> {
    if (!this.bot) {
      await this.initialize();
    }

    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      if (update.callback_query) {
        await this.handleCallback(update.callback_query);
      } else if (update.message) {
        await this.handleMessage(update.message);
      }
    } catch (error) {
      console.error('‚ùå Error processing webhook update:', error);
      this.processError(error);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook URL –≤ Telegram
   */
  async setupWebhook(webhookUrl: string, secretToken?: string): Promise<boolean> {
    if (!this.bot) {
      await this.initialize();
    }

    try {
      const options: any = {
        allowed_updates: ['message', 'callback_query'],
      };

      if (secretToken) {
        options.secret_token = secretToken;
      }

      const result = await this.bot!.setWebHook(webhookUrl, options);
      
      if (result) {
        console.log(`‚úÖ Webhook set successfully: ${webhookUrl}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        const webhookInfo = await this.bot!.getWebHookInfo();
        console.log('üìå Webhook info:', webhookInfo);
      }
      
      return result;
    } catch (error) {
      console.error('‚ùå Failed to setup webhook:', error);
      return false;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ webhook (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
   */
  async deleteWebhook(): Promise<boolean> {
    if (!this.bot) {
      await this.initialize();
    }

    try {
      const result = await this.bot!.deleteWebHook();
      console.log('‚úÖ Webhook deleted successfully');
      return result;
    } catch (error) {
      console.error('‚ùå Failed to delete webhook:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º webhook
   */
  async getWebhookInfo(): Promise<any> {
    if (!this.bot) {
      await this.initialize();
    }

    try {
      return await this.bot!.getWebHookInfo();
    } catch (error) {
      console.error('‚ùå Failed to get webhook info:', error);
      return null;
    }
  }

  private async loadSettings(): Promise<void> {
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫—ç—à–∞
    const cachedSettings = await CacheService.getBotSettings();
    
    if (Object.keys(cachedSettings).length > 0) {
      this.settings = cachedSettings as BotSettings;
    } else {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç
      const settings = await prisma.settings.findMany();
      this.settings = settings.reduce((acc, setting) => {
        if (setting.variable && setting.value) {
          acc[setting.variable as keyof BotSettings] = setting.value;
        }
        return acc;
      }, {} as BotSettings);
    }
  }

  private async handleCallback(callbackQuery: TelegramBot.CallbackQuery): Promise<void> {
    if (!this.bot) return;

    const data = callbackQuery.data;
    const message = callbackQuery.message;
    
    if (!data || !message) return;

    console.log(`üì≤ Callback: ${data} from ${callbackQuery.from.id}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∫–∞–∫ –≤ Rails
    switch (data) {
      case 'i_paid':
        await this.handleIPaid(callbackQuery);
        break;
      case 'approve_payment':
        await this.handleApprovePayment(callbackQuery);
        break;
      case 'submit_tracking':
        await this.handleSubmitTracking(callbackQuery);
        break;
      default:
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö callback'–æ–≤
        if (data.startsWith('order_')) {
          await this.handleOrderCallback(callbackQuery);
        }
    }
  }

  private async handleMessage(msg: TelegramBot.Message): Promise<void> {
    if (!this.bot) return;

    const chatId = msg.chat.id;
    console.log(`üì• Handling message from ${chatId}: ${msg.text || 'non-text message'}`);
    
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis
    if (RedisService.isAvailable()) {
      await RedisQueueService.addAnalyticsJob('user_activity', {
        userId: chatId.toString(),
        action: 'message',
        text: msg.text || 'non-text'
      });
      console.log(`üìä User activity logged to Redis for ${chatId}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫—É—Ä—å–µ—Ä–∞ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
    if (chatId.toString() === this.settings.courier_tg_id) {
      console.log(`üì¶ Courier message detected from ${chatId}`);
      await this.inputTrackingNumber(msg);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (msg.text) {
      console.log(`üí¨ Processing text message: "${msg.text}"`);
      await this.processMessage(msg);
    } else if (msg.video) {
      console.log(`üé• Processing video message`);
      await this.savePreviewVideo(msg);
    } else if (msg.photo) {
      console.log(`üì∏ Processing photo message`);
      await this.savePhoto(msg);
    } else {
      console.log(`‚ùì Processing other message type`);
      await this.otherMessage(msg);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞)
    const text = msg.text?.toLowerCase();
    const adminIds = this.settings.admin_ids?.split(',').map(id => id.trim()) || ['125861752'];
    const isAdmin = adminIds.includes(chatId.toString());
    const isAdminCommand = isAdmin && (text === '/admin' || text === '/settings' || text === '/test');
    
    console.log(`üîç Admin check: isAdmin=${isAdmin}, isAdminCommand=${isAdminCommand}, text="${text}"`);
    
    if (!isAdminCommand) {
      console.log(`‚úâÔ∏è Sending welcome message to ${chatId}`);
      await this.sendFirstMsg(chatId);
    } else {
      console.log(`‚è≠Ô∏è Skipping welcome message for admin command`);
    }
  }

  private async processMessage(msg: TelegramBot.Message): Promise<void> {
    if (!msg.text) return;

    const chatId = msg.chat.id;
    const text = msg.text.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const adminIds = this.settings.admin_ids?.split(',').map(id => id.trim()) || ['125861752'];
    const isAdmin = adminIds.includes(chatId.toString());
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (text === '/start') {
      await this.handleStartCommand(msg);
      return;
    }
    
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (isAdmin) {
      if (text === '/admin' || text === '/settings') {
        await this.sendAdminInfo(chatId);
        return;
      }
      
      if (text === '/test') {
        await this.sendFirstMsg(chatId);
        return;
      }
    }
    
    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    console.log(`üí¨ Message from ${chatId}: ${msg.text}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  private async handleStartCommand(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const tgUser = {
      id: msg.from?.id,
      first_name: msg.from?.first_name,
      last_name: msg.from?.last_name,
      username: msg.from?.username
    };

    try {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ —á–µ—Ä–µ–∑ UserService
      const user = await UserService.handleTelegramStart(tgUser);
      console.log(`üîì User ${user.id} started bot (tg_id: ${user.tg_id})`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π)
      const timeDiff = user.updated_at.getTime() - user.created_at.getTime();
      if (timeDiff < 1000) { // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ —Å–µ–∫—É–Ω–¥—ã)
        await this.notifyAdminNewUser(user);
      }
      
    } catch (error) {
      console.error('‚ùå Error handling /start command:', error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ handleMessage
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   */
  private async notifyAdminNewUser(user: any): Promise<void> {
    if (!this.settings.test_id) return;

    const message = `üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n` +
      `üë§ ID: ${user.id}\n` +
      `üì± Telegram ID: ${user.tg_id}\n` +
      `üëã –ò–º—è: ${user.first_name_raw} ${user.last_name_raw}\n` +
      `üîó Username: ${user.username ? '@' + user.username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.created_at.toLocaleString('ru-RU')}`;

    try {
      await TelegramService.call(message, this.settings.test_id);
    } catch (error) {
      console.error('‚ùå Failed to notify admin about new user:', error);
    }
  }

  private async sendAdminInfo(chatId: number): Promise<void> {
    if (!this.bot) return;

    const responseText = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n` +
      `ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${this.settings.tg_main_bot || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üîò –ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: ${this.settings.bot_btn_title || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üë• –ö–Ω–æ–ø–∫–∞ –≥—Ä—É–ø–ø—ã: ${this.settings.group_btn_title || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: ${this.settings.tg_group || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üí¨ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É: ${this.settings.tg_support || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
      `üìπ ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ: ${this.settings.first_video_id || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üìù –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${this.settings.preview_msg ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ'}\n\n` +
      `üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
      `/admin - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n` +
      `/test - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
      `üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ - –ø–æ–ª—É—á–∏—Ç—å file_id\n` +
      `üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - –ø–æ–ª—É—á–∏—Ç—å file_id\n\n` +
      `üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω–∫—É`;

    await this.bot.sendMessage(chatId, responseText);
  }

  private async findOrCreateUser(tgChat: any, createIfNotExists: boolean): Promise<any> {
    const tgId = tgChat.id.toString();
    
    let user = await prisma.users.findUnique({
      where: { tg_id: BigInt(tgId) }
    });

    if (!user && createIfNotExists) {
      user = await prisma.users.create({
        data: {
          tg_id: BigInt(tgId),
          email: `telegram_${tgId}@telegram.com`, // Required field
          first_name_raw: tgChat.first_name || '',
          last_name_raw: tgChat.last_name || '',
          username: tgChat.username || null,
          created_at: new Date(),
          updated_at: new Date()
        }
      });
    }

    return user;
  }

  private async unlockUser(user: any): Promise<void> {
    const msg = `User ${user.id} started bot`;
    console.log(`üîì ${msg}`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if (this.settings.test_id) {
      await TelegramService.call(msg, this.settings.test_id);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.users.update({
      where: { id: user.id },
      data: {
        started: true,
        is_blocked: false,
        updated_at: new Date()
      }
    });
  }

  private async inputTrackingNumber(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id.toString();
    const userState = await RedisService.getUserState<{
      order_id: bigint;
      msg_id?: number;
      h_msg?: number;
    }>(`user_${chatId}_state`);
    
    if (!userState?.order_id || !msg.text) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const currentOrder = await prisma.orders.findUnique({
        where: { id: userState.order_id },
        select: { status: true }
      });

      if (!currentOrder) return;

      const previousStatus = currentOrder.status;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
      const updatedOrder = await prisma.orders.update({
        where: { id: userState.order_id },
        data: {
          tracking_number: msg.text,
          status: 3, // shipped (–≤ Rails —ç—Ç–æ 3, –Ω–µ 2)
          shipped_at: new Date(),
          updated_at: new Date()
        },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService
      if (previousStatus !== updatedOrder.status) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º msg_id –≤ bigint –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const orderForReport = {
          ...updatedOrder,
          msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
        };
        await ReportService.handleOrderStatusChange(orderForReport as any, previousStatus);
      }

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (this.bot && userState.msg_id && userState.h_msg && msg.message_id) {
        const msgIds = [userState.msg_id, userState.h_msg, msg.message_id];
        
        for (let i = 0; i < msgIds.length; i++) {
          setTimeout(async () => {
            try {
              await this.bot!.deleteMessage(chatId, msgIds[i]);
            } catch (error) {
              console.error(`Failed to delete message ${msgIds[i]}:`, error);
            }
          }, (i + 1) * 1000);
        }
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      await RedisService.clearUserState(`user_${chatId}_state`);
      
    } catch (error) {
      console.error('Error saving tracking number:', error);
    }
  }

  private async handleIPaid(query: TelegramBot.CallbackQuery): Promise<void> {
    if (!query.from || !query.message) return;

    try {
      const user = await prisma.users.findUnique({
        where: { tg_id: BigInt(query.from.id) }
      });

      if (!user) return;

      // –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const orderNumber = this.parseOrderNumber(query.message.text || '');
      if (!orderNumber) return;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const currentOrder = await prisma.orders.findUnique({
        where: { id: BigInt(orderNumber) },
        select: { status: true }
      });

      if (!currentOrder) return;

      const previousStatus = currentOrder.status;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      const updatedOrder = await prisma.orders.update({
        where: { id: BigInt(orderNumber) },
        data: {
          status: 1, // paid
          updated_at: new Date()
        },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true,
          bank_cards: true
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService
      if (previousStatus !== updatedOrder.status) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º msg_id –≤ bigint –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const orderForReport = {
          ...updatedOrder,
          msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
        };
        await ReportService.handleOrderStatusChange(orderForReport as any, previousStatus);
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      if (this.bot) {
        await this.bot.answerCallbackQuery(query.id, { text: '–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.' });
      }

    } catch (error) {
      console.error('Error handling i_paid:', error);
    }
  }

  private async handleApprovePayment(query: TelegramBot.CallbackQuery): Promise<void> {
    if (!query.message || !this.bot) return;

    try {
      const orderNumber = this.parseOrderNumber(query.message.text || '');
      if (!orderNumber) return;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
      const currentOrder = await prisma.orders.findUnique({
        where: { id: BigInt(orderNumber) },
        select: { status: true }
      });

      if (!currentOrder) return;

      const previousStatus = currentOrder.status;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      const updatedOrder = await prisma.orders.update({
        where: { id: BigInt(orderNumber) },
        data: {
          status: 2, // processing
          paid_at: new Date(),
          updated_at: new Date()
        },
        include: {
          order_items: {
            include: {
              products: true
            }
          },
          users: true
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ReportService
      if (previousStatus !== updatedOrder.status) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º msg_id –≤ bigint –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const orderForReport = {
          ...updatedOrder,
          msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
        };
        await ReportService.handleOrderStatusChange(orderForReport as any, previousStatus);
      }

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.bot.deleteMessage(query.message.chat.id, query.message.message_id);

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      await this.bot.answerCallbackQuery(query.id, { text: '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!' });

    } catch (error) {
      console.error('Error handling approve_payment:', error);
    }
  }

  private async handleSubmitTracking(query: TelegramBot.CallbackQuery): Promise<void> {
    if (!query.message || !this.bot) return;

    try {
      const text = query.message.text || '';
      const orderNumber = this.parseOrderNumber(text);
      const fullName = this.parseFullName(text);
      
      if (!orderNumber) return;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ
      const msg = await this.bot.sendMessage(
        query.message.chat.id,
        `–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ${orderNumber}\n\nüë§ –§–ò–û:\n${fullName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n–≤ —á–∞—Ç:`
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.saveCache(orderNumber, query.message.message_id, msg.message_id, query.message.chat.id);

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      await this.bot.answerCallbackQuery(query.id, { text: '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤ —á–∞—Ç' });

    } catch (error) {
      console.error('Error handling submit_tracking:', error);
    }
  }

  private async handleOrderCallback(query: TelegramBot.CallbackQuery): Promise<void> {
    const data = query.data;
    if (!data) return;

    const [prefix, action, orderIdStr] = data.split('_');
    const orderId = parseInt(orderIdStr);

    if (isNaN(orderId)) return;

    switch (action) {
      case 'paid':
        // –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª"
        await this.handleIPaid(query);
        break;
      case 'approve':
        // –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É
        await this.handleApprovePayment(query);
        break;
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
  }

  private parseOrderNumber(text: string): string | null {
    const match = text.match(/‚Ññ(\d+)/);
    return match ? match[1] : null;
  }

  private parseFullName(text: string): string | null {
    const match = text.match(/–§–ò–û:\s*(.+?)(?:\n|$)/);
    return match ? match[1].trim() : null;
  }

  private async saveCache(orderId: string, msgId: number, hMsgId: number, chatId: number): Promise<void> {
    const key = `user_${chatId}_state`;
    const state = {
      order_id: BigInt(orderId),
      msg_id: msgId,
      h_msg: hMsgId,
      timestamp: Date.now()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis —Å TTL 5 –º–∏–Ω—É—Ç
    await RedisService.setUserState(key, state, 300);
  }

  private async sendFirstMsg(chatId: number): Promise<void> {
    if (!this.bot) return;

    try {
      const firstBtn = this.initializeFirstBtn();
      const markup: TelegramBot.InlineKeyboardMarkup = {
        inline_keyboard: firstBtn
      };
      
      const caption = (this.settings.preview_msg || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!').replace(/\\n/g, '\n');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—Å—Ç—å video_id
      if (this.settings.first_video_id) {
        try {
          await this.bot.sendVideo(chatId, this.settings.first_video_id, {
            caption,
            reply_markup: markup
          });
          console.log(`‚úÖ Welcome video sent to ${chatId}`);
          return;
        } catch (videoError) {
          console.error('‚ùå Failed to send video, falling back to text message:', videoError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å)
      await this.bot.sendMessage(chatId, caption, {
        reply_markup: markup
      });
      console.log(`‚úÖ Welcome message sent to ${chatId}`);
      
    } catch (error) {
      console.error('Error sending first message:', error);
    }
  }

  private initializeFirstBtn(): TelegramBot.InlineKeyboardButton[][] {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –Ω–æ–≤–æ–≥–æ webapp –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ –±–æ—Ç–∞
    const webappUrl = process.env.WEBAPP_URL || 'https://strattera.ngrok.app/webapp';
    
    return [
      [{
        text: this.settings.bot_btn_title || '–ö–∞—Ç–∞–ª–æ–≥',
        web_app: { url: webappUrl }
      }],
      [{
        text: this.settings.group_btn_title || '–ù–∞—à–∞ –≥—Ä—É–ø–ø–∞',
        url: this.settings.tg_group || 'https://t.me/+2rTVT8IxtFozNDY0'
      }],
      [{
        text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
        url: this.settings.tg_support || 'https://t.me/strattera_help'
      }]
    ];
  }

  private async savePreviewVideo(msg: TelegramBot.Message): Promise<void> {
    if (!this.bot || !msg.video) return;

    const chatId = msg.chat.id;
    const video = msg.video;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const adminIds = this.settings.admin_ids?.split(',').map(id => id.trim()) || ['125861752'];
    const isAdmin = adminIds.includes(chatId.toString());
    
    if (isAdmin) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º file_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      const responseText = `üìπ *–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n` +
        `üÜî *File ID:* \`${video.file_id}\`\n` +
        `üìè *–†–∞–∑–º–µ—Ä:* ${video.width}x${video.height}\n` +
        `‚è± *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* ${video.duration} —Å–µ–∫\n` +
        `üì¶ *–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:* ${Math.round((video.file_size || 0) / 1024)} KB\n\n` +
        `üí° *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n` +
        `1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ File ID –≤—ã—à–µ\n` +
        `2. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n` +
        `3. –ù–∞–π–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä \`first_video_id\`\n` +
        `4. –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID\n` +
        `5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è`;

      await this.bot.sendMessage(chatId, responseText, {
        parse_mode: 'Markdown',
        reply_to_message_id: msg.message_id
      });
      
      console.log(`üìπ Video file_id sent to admin ${chatId}: ${video.file_id}`);
    } else {
      // –û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendFirstMsg(chatId);
    }
  }

  private async savePhoto(msg: TelegramBot.Message): Promise<void> {
    if (!this.bot || !msg.photo) return;

    const chatId = msg.chat.id;
    const photos = msg.photo;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const adminIds = this.settings.admin_ids?.split(',').map(id => id.trim()) || ['125861752'];
    const isAdmin = adminIds.includes(chatId.toString());
    
    if (isAdmin) {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
      const bestPhoto = photos[photos.length - 1];
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º file_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      const responseText = `üñº *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!*\n\n` +
        `üÜî *File ID:* \`${bestPhoto.file_id}\`\n` +
        `üìè *–†–∞–∑–º–µ—Ä:* ${bestPhoto.width}x${bestPhoto.height}\n` +
        `üì¶ *–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:* ${Math.round((bestPhoto.file_size || 0) / 1024)} KB\n\n` +
        `üìã *–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã:*\n` +
        photos.map((photo, index) => 
          `${index + 1}. ${photo.width}x${photo.height} - \`${photo.file_id}\``
        ).join('\n') +
        `\n\nüí° *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–∏–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π ID)*`;

      await this.bot.sendMessage(chatId, responseText, {
        parse_mode: 'Markdown',
        reply_to_message_id: msg.message_id
      });
      
      console.log(`üñº Photo file_id sent to admin ${chatId}: ${bestPhoto.file_id}`);
    } else {
      // –û–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendFirstMsg(chatId);
    }
  }

  private async otherMessage(msg: TelegramBot.Message): Promise<void> {
    const message = `–ù–µ–∏–∑–≤. —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${msg.chat.id}`;
    console.warn(`‚ö†Ô∏è ${message}`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    if (this.settings.test_id) {
      await TelegramService.call(message, this.settings.test_id);
    }
    
    await this.sendFirstMsg(msg.chat.id);
  }

  private processError(error: any): void {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error(`‚ùå TelegramBotWorker error: ${errorMessage}`);
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ email –æ–± –æ—à–∏–±–∫–µ
    // EmailService.sendError(errorMessage, error.stack);
  }
}