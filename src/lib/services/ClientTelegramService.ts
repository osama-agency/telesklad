import { SettingsService } from './SettingsService';

interface ClientTelegramServiceOptions {
  markup?: string;
  markup_url?: string;
}

/**
 * ClientTelegramService - —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º
 * –í development: –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ—Ç @strattera_test_bot
 * –í production: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç @telesklad_bot
 */
export class ClientTelegramService {
  private static readonly MESSAGE_LIMIT = 4090;

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–æ—Ç
   * –í–°–ï–ì–î–ê @strattera_test_bot –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
   */
  static async sendToClient(message: string, userTgId: string, options: ClientTelegramServiceOptions = {}): Promise<number | Error> {
    console.log(`üì§ ClientTelegramService.sendToClient:`, {
      to: userTgId,
      bot: '@strattera_test_bot (ALWAYS)',
      markup: options.markup,
      messageLength: message.length
    });

    try {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–ª–∏–µ–Ω—Ç—ã –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É—é—Ç @strattera_test_bot
      const token = await SettingsService.get('client_bot_token', process.env.WEBAPP_TELEGRAM_BOT_TOKEN);
      if (!token) {
        throw new Error('Client bot token not available');
      }
      
      console.log('üîë ClientTelegramService using WEBAPP_TELEGRAM_BOT_TOKEN (@strattera_test_bot) for client');

      // ‚úÖ –£–ë–ò–†–ê–ï–ú –ø—Ä–µ—Ñ–∏–∫—Å Development - –∫–ª–∏–µ–Ω—Ç—ã –≤—Å–µ–≥–¥–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –±–æ—Ç–µ
      const finalMessage = message; // –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const markup = this.formMarkup(options);
      
      const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: userTgId,
          text: this.escape(finalMessage),
          parse_mode: 'MarkdownV2',
          reply_markup: markup
        }),
      });

      if (!response.ok) {
        const errorData = await response.text();
        throw new Error(`Telegram API error: ${response.status} - ${errorData}`);
      }

      const result = await response.json();
      const messageId = result.result.message_id;
      console.log(`‚úÖ Client message sent to ${userTgId}, ID: ${messageId}`);
      
      return messageId;
      
    } catch (error) {
      console.error(`‚ùå Failed to send client message: ${error}`);
      return error instanceof Error ? error : new Error('Unknown error');
    }
  }

  private static escape(text: string): string {
    // –£–¥–∞–ª—è–µ–º ANSI escape –∫–æ–¥—ã –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    return text
      .replace(/\[[0-9;]*m/g, '') // —É–¥–∞–ª—è–µ–º ANSI –∫–æ–¥—ã
      .replace(/([-_\[\]()~>#+=|{}.!])/g, '\\$1'); // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
  }

  private static formMarkup(options: ClientTelegramServiceOptions): any {
    if (!options.markup && !options.markup_url) {
      return undefined;
    }

    const buttons: any[][] = [];
    
    if (options.markup) {
      buttons.push([{
        text: this.getButtonText(options.markup),
        callback_data: options.markup
      }]);
      
      if (options.markup === 'i_paid') {
        buttons.push([{
          text: '–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
          url: `https://t.me/strattera_bot?startapp`
        }]);
        buttons.push([{
          text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
          url: 'https://t.me/your_support'
        }]);
      }
    }
    
    if (options.markup_url) {
      buttons.push([{
        text: '–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É',
        url: options.markup_url
      }]);
    }
    
    return buttons.length > 0 ? { inline_keyboard: buttons } : undefined;
  }

  private static getButtonText(markup: string): string {
    const buttonTexts: { [key: string]: string } = {
      'i_paid': '–Ø –æ–ø–ª–∞—Ç–∏–ª',
      'approve_payment': '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞',
      'submit_tracking': '–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä',
      'resend_tracking': '–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä',
      'track_package': '–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É',
      'new_order': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
      'mailing': '–†–∞—Å—Å—ã–ª–∫–∞'
    };
    
    return buttonTexts[markup] || markup;
  }
} 