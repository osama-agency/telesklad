import { prisma } from '@/libs/prismaDb'

export class UserService {
  /**
   * –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
   */
  static async findOrCreateTelegramUser(tgUser: any) {
    const tgId = BigInt(tgUser.id)
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üì± Telegram user data:', tgUser)
    
    let user = await prisma.users.findUnique({
      where: { tg_id: tgId }
    })

    if (!user) {
      user = await prisma.users.create({
        data: {
          tg_id: tgId,
          email: `telegram_${tgUser.id}@telegram.com`,
          first_name_raw: tgUser.first_name || '',
          last_name_raw: tgUser.last_name || '',
          username: tgUser.username || null,
          photo_url: tgUser.photo_url || null,
          started: true,
          created_at: new Date(),
          updated_at: new Date()
        }
      })
      
      console.log(`‚úÖ New user created: ${user.id} (tg_id: ${tgId})`)
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ
      user = await prisma.users.update({
        where: { tg_id: tgId },
        data: {
          first_name_raw: tgUser.first_name || user.first_name_raw,
          last_name_raw: tgUser.last_name || user.last_name_raw,
          username: tgUser.username || user.username,
          photo_url: tgUser.photo_url || user.photo_url,
          started: true,
          is_blocked: false,
          updated_at: new Date()
        }
      })
    }

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ Telegram (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å)
    if (!user.photo_url || (Date.now() - new Date(user.updated_at).getTime() > 24 * 60 * 60 * 1000)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      this.updateUserPhotoFromTelegram(tgId).catch(error => {
        console.error('Failed to update user photo:', error)
      })
    }

    return user
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
   */
  static async getUserByTelegramId(tgId: string | bigint) {
    return await prisma.users.findUnique({
      where: { tg_id: BigInt(tgId) },
      include: {
        orders: {
          orderBy: { created_at: 'desc' },
          take: 10
        }
      }
    })
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
   */
  static async handleTelegramStart(tgUser: any) {
    const user = await this.findOrCreateTelegramUser(tgUser)
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
    await prisma.users.update({
      where: { id: user.id },
      data: {
        started: true,
        is_blocked: false,
        updated_at: new Date()
      }
    })

    return user
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
   */
  static async getUserById(id: number | bigint) {
    return await prisma.users.findUnique({
      where: { id: BigInt(id) }
    })
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram initData
   */
  static validateTelegramInitData(initData: string): boolean {
    const crypto = require('crypto')
    const botToken = process.env.TELEGRAM_BOT_TOKEN || process.env.WEBAPP_TELEGRAM_BOT_TOKEN
    
    if (!botToken) {
      console.error('‚ùå Bot token not found for validation')
      return false
    }

    try {
      const params = new URLSearchParams(initData)
      const hash = params.get('hash')
      params.delete('hash')
      
      const dataCheckString = Array.from(params.entries())
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([key, value]) => `${key}=${value}`)
        .join('\n')
      
      const secretKey = crypto.createHmac('sha256', 'WebAppData').update(botToken).digest()
      const calculatedHash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex')
      
      return calculatedHash === hash
    } catch (error) {
      console.error('‚ùå Error validating Telegram initData:', error)
      return false
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initData
   */
  static parseTelegramInitData(initData: string) {
    try {
      const params = new URLSearchParams(initData)
      const userParam = params.get('user')
      
      if (!userParam) {
        throw new Error('No user data in initData')
      }
      
      return JSON.parse(userParam)
    } catch (error) {
      console.error('‚ùå Error parsing Telegram initData:', error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Bot API
   */
  static async updateUserPhotoFromTelegram(tgId: string | bigint) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –∏–∑ –Ω–∞—à–∏—Ö –±–æ—Ç–æ–≤)
      const botToken = process.env.TELESKLAD_BOT_TOKEN || process.env.WEBAPP_TELEGRAM_BOT_TOKEN
      if (!botToken) {
        console.error('‚ùå Bot token not found for getting user photos')
        return null
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Bot API
      const response = await fetch(`https://api.telegram.org/bot${botToken}/getUserProfilePhotos`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: tgId.toString(),
          limit: 1 // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ
        }),
      })

      if (!response.ok) {
        console.error('‚ùå Failed to get user profile photos:', await response.text())
        return null
      }

      const result = await response.json()
      
      if (!result.ok || !result.result.photos || result.result.photos.length === 0) {
        console.log('üì∑ No profile photos found for user:', tgId)
        return null
      }

      // –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
      const photos = result.result.photos[0] // –ü–µ—Ä–≤–∞—è (—Å–∞–º–∞—è –Ω–æ–≤–∞—è) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
      const largestPhoto = photos[photos.length - 1] // –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
      const fileResponse = await fetch(`https://api.telegram.org/bot${botToken}/getFile`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          file_id: largestPhoto.file_id
        }),
      })

      if (!fileResponse.ok) {
        console.error('‚ùå Failed to get file info:', await fileResponse.text())
        return null
      }

      const fileResult = await fileResponse.json()
      
      if (!fileResult.ok || !fileResult.result.file_path) {
        console.error('‚ùå No file path in response')
        return null
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
      const photoUrl = `https://api.telegram.org/file/bot${botToken}/${fileResult.result.file_path}`
      
      // –û–±–Ω–æ–≤–ª—è–µ–º photo_url –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await prisma.users.update({
        where: { tg_id: BigInt(tgId) },
        data: {
          photo_url: photoUrl,
          updated_at: new Date()
        }
      })

      console.log('‚úÖ User photo updated:', tgId, photoUrl)
      return photoUrl

    } catch (error) {
      console.error('‚ùå Error updating user photo:', error)
      return null
    }
  }
} 