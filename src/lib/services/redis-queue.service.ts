import { RedisService } from './redis.service';
import { NotificationExecutorService } from './notification-executor.service';

/**
 * Redis Queue Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
 */
export class RedisQueueService {
  private static isRunning = false;
  private static pollingInterval = 5000; // 5 —Å–µ–∫—É–Ω–¥

  /**
   * –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
   */
  static async startWorker(): Promise<void> {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Queue worker already running');
      return;
    }

    if (!RedisService.isAvailable()) {
      console.log('‚ö†Ô∏è Redis not available, queue worker disabled');
      return;
    }

    this.isRunning = true;
    console.log('üöÄ Starting Redis Queue Worker');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
    this.processQueue();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
   */
  static stopWorker(): void {
    this.isRunning = false;
    console.log('‚èπÔ∏è Stopping Redis Queue Worker');
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
   */
  private static async processQueue(): Promise<void> {
    while (this.isRunning) {
      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await this.processNotificationQueue();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await this.processAnalyticsQueue();
        
      } catch (error) {
        console.error('‚ùå Queue processing error:', error);
      }

      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
      await this.sleep(this.pollingInterval);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private static async processNotificationQueue(): Promise<void> {
    try {
      const jobs = await RedisService.getQueueJobs('notifications', 10);
      
      for (const job of jobs) {
        try {
          console.log(`üì® Processing notification job: ${job.id}`);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          await this.handleNotificationJob(job);
          
          // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
          await RedisService.removeFromQueue('notifications', job);
          
          console.log(`‚úÖ Notification job ${job.id} completed`);
          
        } catch (error) {
          console.error(`‚ùå Failed to process notification job ${job.id}:`, error);
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
          job.retryCount = (job.retryCount || 0) + 1;
          
          // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
          if (job.retryCount >= 3) {
            await RedisService.removeFromQueue('notifications', job);
            console.log(`‚ùå Notification job ${job.id} failed after 3 attempts`);
          } else {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            await RedisService.removeFromQueue('notifications', job);
            await RedisService.addToQueue('notifications', job.data, 60 * job.retryCount);
            console.log(`üîÑ Notification job ${job.id} rescheduled, attempt ${job.retryCount}`);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Error processing notification queue:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private static async handleNotificationJob(job: any): Promise<void> {
    const { type, data } = job.data;
    
    switch (type) {
      case 'payment_reminder':
        await this.handlePaymentReminder(data);
        break;
        
      case 'bonus_notification':
        await this.handleBonusNotification(data);
        break;
        
      case 'restock_notification':
        await this.handleRestockNotification(data);
        break;
        
      case 'order_status_update':
        await this.handleOrderStatusUpdate(data);
        break;
        
      case 'order_status_change':
        await this.handleOrderStatusChange(data);
        break;
        
      default:
        console.warn(`‚ö†Ô∏è Unknown notification type: ${type}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
   */
  private static async handlePaymentReminder(data: any): Promise<void> {
    const { orderId, reminderType } = data;
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ
    const jobData = {
      order_id: orderId,
      reminder_type: reminderType
    };
    
    await NotificationExecutorService.executePaymentReminder(Date.now(), jobData);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–∞—Ö
   */
  private static async handleBonusNotification(data: any): Promise<void> {
    const { orderId, bonusAmount } = data;
    
    const jobData = {
      order_id: orderId,
      bonus_amount: bonusAmount
    };
    
    await NotificationExecutorService.executeBonusNotification(Date.now(), jobData);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
   */
  private static async handleRestockNotification(data: any): Promise<void> {
    const { productId, userId } = data;
    
    const jobData = {
      product_id: productId,
      user_id: userId
    };
    
    await NotificationExecutorService.executeRestockNotification(Date.now(), jobData);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  private static async handleOrderStatusUpdate(data: any): Promise<void> {
    const { orderId, status, userId } = data;
    
    // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userId) {
      await RedisService.increment(`activity:${new Date().toISOString().split('T')[0]}:${userId}`, 86400);
    }
    
    console.log(`üìã Order ${orderId} status updated to ${status}`);
  }

  /**
   * –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ ReportService
   */
  private static async handleOrderStatusChange(data: any): Promise<void> {
    try {
      const { order, previousStatus } = data;
      
      console.log(`üìã Processing order status change: ${order.id} (${previousStatus} -> ${order.status})`);
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ReportService –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      const { ReportService } = await import('./ReportService');
      
      // –í—ã–∑—ã–≤–∞–µ–º ReportService.handleOrderStatusChange
      await ReportService.handleOrderStatusChange(order, previousStatus);
      
      console.log(`‚úÖ Order status change processed for order ${order.id}`);
      
    } catch (error) {
      console.error('‚ùå Error handling order status change:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  private static async processAnalyticsQueue(): Promise<void> {
    try {
      const jobs = await RedisService.getQueueJobs('analytics', 3);
      
      for (const job of jobs) {
        try {
          console.log(`üìä Processing analytics job: ${job.id}`);
          
          await this.handleAnalyticsJob(job);
          
          await RedisService.removeFromQueue('analytics', job);
          
        } catch (error) {
          console.error(`‚ùå Failed to process analytics job ${job.id}:`, error);
          await RedisService.removeFromQueue('analytics', job);
        }
      }
    } catch (error) {
      console.error('‚ùå Error processing analytics queue:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
   */
  private static async handleAnalyticsJob(job: any): Promise<void> {
    const { type, data } = job.data;
    
    switch (type) {
      case 'user_activity':
        const today = new Date().toISOString().split('T')[0];
        await RedisService.increment(`activity:${today}:${data.userId}`, 86400);
        break;
        
      case 'product_view':
        await RedisService.increment(`product_views:${data.productId}`, 86400);
        break;
        
      case 'order_created':
        await RedisService.increment('orders_today', 86400);
        break;
        
      default:
        console.warn(`‚ö†Ô∏è Unknown analytics job type: ${type}`);
    }
  }

  // === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  static async addNotification(type: string, data: any, delay: number = 0): Promise<boolean> {
    return await RedisService.addToQueue('notifications', { type, data }, delay);
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
   */
  static async addAnalyticsJob(type: string, data: any, delay: number = 0): Promise<boolean> {
    return await RedisService.addToQueue('analytics', { type, data }, delay);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π
   */
  static async getQueueStats(): Promise<{
    notifications: number;
    analytics: number;
    redis: { status: string; latency?: number; error?: string };
  }> {
    try {
      const redis = await RedisService.getInstance();
      if (!redis) {
        return {
          notifications: 0,
          analytics: 0,
          redis: { status: 'unavailable' }
        };
      }

      const [notifications, analytics, redisHealth] = await Promise.all([
        redis.zcard('queue:notifications'),
        redis.zcard('queue:analytics'),
        RedisService.healthCheck()
      ]);

      return {
        notifications,
        analytics,
        redis: redisHealth
      };
    } catch (error) {
      console.error('‚ùå Error getting queue stats:', error);
      return {
        notifications: 0,
        analytics: 0,
        redis: { status: 'error', error: error instanceof Error ? error.message : 'Unknown error' }
      };
    }
  }

  /**
   * –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private static sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞
   */
  static isWorkerRunning(): boolean {
    return this.isRunning;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
   */
  static async clearAllQueues(): Promise<void> {
    try {
      const redis = await RedisService.getInstance();
      if (!redis) return;

      await Promise.all([
        redis.del('queue:notifications'),
        redis.del('queue:analytics')
      ]);

      console.log('üßπ All queues cleared');
    } catch (error) {
      console.error('‚ùå Error clearing queues:', error);
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  static async addNotificationJob(type: string, data: any): Promise<void> {
    await this.addNotification(type, data);
  }
} 