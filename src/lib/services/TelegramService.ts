import { TelegramTokenService } from './telegram-token.service';
import { prisma } from '@/libs/prismaDb';

interface TelegramServiceOptions {
  markup?: string;
  markup_url?: string;
  markup_text?: string;
  markup_ext_url?: string;
}

interface InlineKeyboardButton {
  text: string;
  callback_data?: string;
  url?: string;
}

/**
 * TelegramService - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è Rails TelegramService
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MarkdownV2
 */
export class TelegramService {
  private static readonly MESSAGE_LIMIT = 4090;
  
  private bot_token: string | null = null;
  private chat_id: string;
  private message: string;
  private message_id: number | null = null;
  private markup?: string;
  private markup_url?: string;
  private markup_text: string;
  private markup_ext_url?: string;
  private settings: any = {};

  constructor(message: string, id: string | number | null = null, options: TelegramServiceOptions = {}) {
    this.message = message;
    this.markup = options.markup;
    this.markup_url = options.markup_url;
    this.markup_text = options.markup_text || '–ö–Ω–æ–ø–∫–∞';
    this.markup_ext_url = options.markup_ext_url;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
    if (id === 'courier') {
      this.chat_id = process.env.TELEGRAM_COURIER_ID || '821810448';
    } else if (id) {
      this.chat_id = id.toString();
    } else {
      this.chat_id = process.env.TELEGRAM_ADMIN_CHAT_ID || '125861752';
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.settings = {
      tg_main_bot: process.env.TELEGRAM_BOT_USERNAME || '@strattera_bot',
      tg_support: process.env.TELEGRAM_SUPPORT_URL || 'https://t.me/your_support',
      bot_btn_title: process.env.TELEGRAM_BOT_BTN_TITLE || '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
      group_btn_title: process.env.TELEGRAM_GROUP_BTN_TITLE || '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ'
    };
  }

  /**
   * –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  static async call(message: string, id: string | number | null = null, options: TelegramServiceOptions = {}): Promise<number | Error> {
    console.log(`üì§ TelegramService.call:`, {
      to: id || 'admin',
      markup: options.markup,
      messageLength: message.length
    });
    const service = new TelegramService(message, id, options);
    return await service.report();
  }

  async report(): Promise<number | Error> {
    if (await this.botReady()) {
      return await this.tgSend();
    }
    return new Error('Bot not ready');
  }

  private async loadSettings(): Promise<void> {
    try {
      const settings = await prisma.settings.findMany();
      this.settings = settings.reduce((acc, setting) => {
        if (setting.variable && setting.value) {
          acc[setting.variable] = setting.value;
        }
        return acc;
      }, {} as any);
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to load settings from database:', error);
      this.settings = {};
    }
  }

  private async botReady(): Promise<boolean> {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    const isAdminOrCourier = this.chat_id === '125861752' || // –∞–¥–º–∏–Ω
                            this.chat_id === process.env.TELEGRAM_COURIER_ID || // –∫—É—Ä—å–µ—Ä
                            this.chat_id === '7690550402'; // –∫—É—Ä—å–µ—Ä (—Ö–∞—Ä–¥–∫–æ–¥ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    
    if (isAdminOrCourier) {
      // –ê–¥–º–∏–Ω—É –∏ –∫—É—Ä—å–µ—Ä—É –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ @telesklad_bot
      this.bot_token = await TelegramTokenService.getTelegramBotToken();
      console.log('üîë Using TELESKLAD_BOT_TOKEN (@telesklad_bot) for admin/courier');
    } else if (process.env.NODE_ENV === 'development') {
      // –ö–ª–∏–µ–Ω—Ç–∞–º –≤ development –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ @strattera_test_bot
      this.bot_token = await TelegramTokenService.getWebappBotToken();
      console.log('üîë Using WEBAPP_TELEGRAM_BOT_TOKEN (@strattera_test_bot) for client in development');
    } else {
      // –í production –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ @telesklad_bot
      this.bot_token = await TelegramTokenService.getTelegramBotToken();
      console.log('üîë Using TELESKLAD_BOT_TOKEN (@telesklad_bot) for production');
    }
    
    if (this.bot_token && this.chat_id && this.message) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∫ –≤ Rails
      if (process.env.NODE_ENV === 'development') {
        this.message = `‚ÄºÔ∏è‚ÄºÔ∏èDevelopment‚ÄºÔ∏è‚ÄºÔ∏è\n\n${this.message}`;
      }
      return true;
    } else {
      console.error('‚ùå Telegram chat ID or bot token not set!');
      return false;
    }
  }

  private escape(text: string): string {
    // –£–¥–∞–ª—è–µ–º ANSI escape –∫–æ–¥—ã –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    return text
      .replace(/\[[0-9;]*m/g, '') // —É–¥–∞–ª—è–µ–º ANSI –∫–æ–¥—ã
      .replace(/([-_\[\]()~>#+=|{}.!])/g, '\\$1'); // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
  }

  private async tgSend(): Promise<number | Error> {
    const messageCount = Math.ceil(this.message.length / TelegramService.MESSAGE_LIMIT);
    const markup = this.formMarkup();
    
    for (let i = 0; i < messageCount; i++) {
      const textPart = this.nextTextPart();
      const result = await this.sendTelegramMessage(textPart, markup);
      if (result instanceof Error) {
        return result;
      }
    }
    
    return this.message_id || 0;
  }

  private async sendTelegramMessage(textPart: string, markup: any): Promise<number | Error> {
    const chatIds = this.chat_id.split(',');
    
    for (const userId of chatIds) {
      try {
        const response = await fetch(`https://api.telegram.org/bot${this.bot_token}/sendMessage`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: userId.trim(),
            text: this.escape(textPart),
            parse_mode: 'MarkdownV2',
            reply_markup: markup
          }),
        });

        if (!response.ok) {
          const errorData = await response.text();
          throw new Error(`Telegram API error: ${response.status} - ${errorData}`);
        }

        const result = await response.json();
        this.message_id = result.result.message_id;
        console.log(`‚úÖ Message sent to ${userId}, ID: ${this.message_id}`);
        
      } catch (error) {
        console.error(`‚ùå Failed to send message to bot: ${error}`);
        return error instanceof Error ? error : new Error('Unknown error');
      }
    }
    
    return this.message_id || 0;
  }

  private formKeyboard(): InlineKeyboardButton[][] {
    const buttons: InlineKeyboardButton[][] = [];
    
    if (this.markup !== 'new_order' && this.markup !== 'mailing' && this.markup !== 'track_package') {
      if (this.markup) {
        buttons.push([{
          text: this.getButtonText(this.markup),
          callback_data: this.markup
        }]);
      }
      
      if (this.markup === 'i_paid') {
        buttons.push(this.orderBtn('–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'));
        buttons.push(this.askBtn());
      }
    } else if (this.markup === 'track_package') {
      // –ö–Ω–æ–ø–∫–∞ "–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É" —Å URL –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      if (this.markup_url) {
        buttons.push([{
          text: '–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É',
          url: this.markup_url
        }]);
      }
      buttons.push(this.orderBtn('–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'));
    } else {
      const textBtn = this.markup === 'mailing' 
        ? (this.settings.bot_btn_title || '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑') 
        : '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑';
      buttons.push(this.orderBtn(textBtn));
      buttons.push(this.askBtn());
    }
    
    return buttons;
  }

  private formUrlKeyboard(): InlineKeyboardButton[][] {
    const url = this.markup_ext_url || 
      `https://t.me/${this.settings.tg_main_bot}?startapp=url=${this.markup_url}`;
    
    return [[{
      text: this.markup_text,
      url: url
    }]];
  }

  private orderBtn(btnText: string): InlineKeyboardButton[] {
    const url = `https://t.me/${this.settings.tg_main_bot}?startapp`;
    return [{
      text: btnText,
      url: url
    }];
  }

  private askBtn(): InlineKeyboardButton[] {
    return [{
      text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å',
      url: this.settings.tg_support || ''
    }];
  }

  private formMarkup(): any {
    if (!this.markup && !this.markup_url && !this.markup_ext_url) {
      return undefined;
    }

    const keyboard = this.markup ? this.formKeyboard() : this.formUrlKeyboard();
    
    return {
      inline_keyboard: keyboard
    };
  }

  private nextTextPart(): string {
    const part = this.message.substring(0, TelegramService.MESSAGE_LIMIT);
    this.message = this.message.substring(TelegramService.MESSAGE_LIMIT) || '';
    return part;
  }

  private getButtonText(markup: string): string {
    // –ú–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–µ (ru.yml tg_btn)
    const buttonTexts: { [key: string]: string } = {
      'i_paid': '–Ø –æ–ø–ª–∞—Ç–∏–ª',
      'approve_payment': '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞',
      'submit_tracking': '–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä',
      'resend_tracking': '–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä',
      'track_package': '–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É',
      'new_order': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
      'mailing': '–†–∞—Å—Å—ã–ª–∫–∞'
    };
    
    return buttonTexts[markup] || markup;
  }
}