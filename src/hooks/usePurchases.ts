import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { get, post, put, del, queryKeys } from '@/lib/api';

// –¢–∏–ø—ã –¥–ª—è –∑–∞–∫—É–ø–æ–∫
export interface Purchase {
  id: number;
  totalAmount: number;
  isUrgent: boolean;
  expenses?: number;
  status: "draft" | "sent" | "awaiting_payment" | "paid" | "in_transit" | "received" | "cancelled";
  items: PurchaseItem[];
  createdAt: string;
  updatedAt: string;
}

export interface PurchaseItem {
  id: number;
  productId: number;
  quantity: number;
  costPrice: number;
  total: number;
  productName?: string; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ productName –∏–∑ API
  product?: {
    id: number;
    name: string;
  };
}

export interface PurchasesParams {
  page?: number;
  limit?: number;
  search?: string;
  status?: string;
  period?: string;
  productId?: number;
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫—É–ø–æ–∫
export function usePurchases(params: PurchasesParams = {}) {
  const queryParams = {
    ...params,
    page: params.page || 1,
    limit: params.limit || 10,
  };

  return useQuery({
    queryKey: queryKeys.purchasesList(queryParams),
    queryFn: async () => {
      const searchParams = new URLSearchParams();
      Object.entries(queryParams).forEach(([key, value]) => {
        if (value !== undefined && value !== '') {
          searchParams.append(key, String(value));
        }
      });
      
      const endpoint = `/purchases?${searchParams.toString()}`;
      console.log('üîç usePurchases: Making request to:', endpoint);
      
      try {
        const result = await get<any>(endpoint);
        console.log('‚úÖ usePurchases: Received data:', result);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        if (result && result.purchases) {
          // –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
          return result.purchases as Purchase[];
        } else if (Array.isArray(result)) {
          // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤
          return result as Purchase[];
        } else {
          console.warn('‚ö†Ô∏è Unexpected API response structure:', result);
          return [];
        }
      } catch (error) {
        console.error('‚ùå usePurchases: Error:', error);
        throw error;
      }
    },
    staleTime: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    gcTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç –≤ –∫—ç—à–µ
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–∫—É–ø–∫–∏
export function usePurchase(id: number) {
  return useQuery({
    queryKey: queryKeys.purchase(id),
    queryFn: () => get<Purchase>(`/purchases/${id}`),
    enabled: !!id,
    staleTime: 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
  });
}

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏
export function useCreatePurchase() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (purchaseData: Partial<Purchase>) => post<Purchase>('/purchases', purchaseData),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: queryKeys.purchases });
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤
      queryClient.invalidateQueries({ queryKey: queryKeys.productsAnalytics() });
    },
  });
}

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∏
export function useUpdatePurchase() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ id, data }: { id: number; data: Partial<Purchase> }) => 
      put<Purchase>(`/purchases/${id}`, data),
    onSuccess: (data, variables) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–∫—É–ø–∫–∏
      queryClient.setQueryData(queryKeys.purchase(variables.id), data);
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫
      queryClient.invalidateQueries({ queryKey: queryKeys.purchases });
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤
      queryClient.invalidateQueries({ queryKey: queryKeys.productsAnalytics() });
    },
  });
}

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫—É–ø–∫–∏
export function useDeletePurchase() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id: number) => del(`/purchases/${id}`),
    onSuccess: (_, id) => {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–∫—É–ø–∫—É
      queryClient.removeQueries({ queryKey: queryKeys.purchase(id) });
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫
      queryClient.invalidateQueries({ queryKey: queryKeys.purchases });
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤
      queryClient.invalidateQueries({ queryKey: queryKeys.productsAnalytics() });
    },
  });
}

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∫–∏
export function useUpdatePurchaseStatus() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ id, status }: { id: number; status: Purchase['status'] }) => 
      put<Purchase>(`/purchases/${id}/status`, { status }),
    onSuccess: (data, variables) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–∫—É–ø–∫–∏
      queryClient.setQueryData(queryKeys.purchase(variables.id), data);
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫
      queryClient.invalidateQueries({ queryKey: queryKeys.purchases });
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤
      queryClient.invalidateQueries({ queryKey: queryKeys.productsAnalytics() });
    },
  });
}

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫—É–ø–∫–∏ –≤ Telegram
export function useSendPurchaseToTelegram() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id: number) => post(`/purchases/${id}/send-telegram`, {}),
    onSuccess: (_, id) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ –Ω–∞ "ordered"
      queryClient.invalidateQueries({ queryKey: queryKeys.purchase(id) });
      queryClient.invalidateQueries({ queryKey: queryKeys.purchases });
    },
  });
}

// –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏
export function useReceivePurchase() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ id, data }: { 
      id: number; 
      data: {
        items: Array<{
          id: number;
          receivedQuantity: number;
        }>;
        logisticsExpense?: number;
        receivedAt: string;
        notes?: string;
      };
    }) => post(`/purchases/${id}/receive`, data),
    onSuccess: (_, variables) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–∫—É–ø–∫–∏
      queryClient.invalidateQueries({ queryKey: queryKeys.purchase(variables.id) });
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫
      queryClient.invalidateQueries({ queryKey: queryKeys.purchases });
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–æ–≤
      queryClient.invalidateQueries({ queryKey: queryKeys.productsAnalytics() });
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã
      queryClient.invalidateQueries({ queryKey: queryKeys.expenses });
    },
  });
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
export const PURCHASE_STATUSES = {
  draft: 'üóíÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫',
  sent: 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
  awaiting_payment: 'üí≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É',
  paid: 'üí∞ –û–ø–ª–∞—á–µ–Ω–æ',
  in_transit: 'üöö –í –ø—É—Ç–∏',
  received: '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ',
  cancelled: '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ',
} as const;

export function getPurchaseStatusLabel(status: Purchase['status']): string {
  return PURCHASE_STATUSES[status] || status;
} 