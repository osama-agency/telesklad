"use client";

import { SearchIcon, StatisticsChartIcon, DollarIcon, ArrowUpIcon, ArrowDownIcon, DesignToolsIcon, TrashIcon, PencilSquareIcon } from "@/assets/icons";
import { useState, useEffect } from "react";
import { useProducts, Product } from "@/hooks/useProducts";
import { AbcXyzMatrix } from "@/components/Charts/AbcXyzMatrix";
import { useDateRange } from "@/context/DateRangeContext";
import { Tooltip } from "@/components/ui/Tooltip";

// Интерфейсы для ABC/XYZ анализа
interface AbcXyzData {
  productId: number;
  productName: string;
  revenue: number;
  salesCount: number;
  abc: 'A' | 'B' | 'C';
  xyz: 'X' | 'Y' | 'Z';
  coefficientOfVariation: number;
  revenueShare: number;
}

interface AbcXyzMatrixData {
  AX: number;
  AY: number;
  AZ: number;
  BX: number;
  BY: number;
  BZ: number;
  CX: number;
  CY: number;
  CZ: number;
}

interface AbcXyzMatrixWithProductsData {
  AX: { count: number; products: string[] };
  AY: { count: number; products: string[] };
  AZ: { count: number; products: string[] };
  BX: { count: number; products: string[] };
  BY: { count: number; products: string[] };
  BZ: { count: number; products: string[] };
  CX: { count: number; products: string[] };
  CY: { count: number; products: string[] };
  CZ: { count: number; products: string[] };
}

interface ProductWithAnalytics extends Product {
  abc?: 'A' | 'B' | 'C';
  xyz?: 'X' | 'Y' | 'Z';
}



// Интерфейс для метрик
interface Metrics {
  totalProducts: number;
  totalPurchaseValue: number;
  averageMargin: number;
  criticalStock: number;
}

const statusOptions = [
  { value: "all", label: "Все товары" },
  { value: "in-stock", label: "В наличии" },
  { value: "low-stock", label: "Скоро кончатся" },
  { value: "critical", label: "Критичные" },
  { value: "need-order", label: "Нужна закупка" },
];

export default function ProductsPage() {
  const { dateRange, formatDateRange } = useDateRange();
  const [searchQuery, setSearchQuery] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [sortField, setSortField] = useState<"name" | "price" | "stock_quantity" | null>("name");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("asc");
  const [currentPage, setCurrentPage] = useState(1);
  const [showHidden, setShowHidden] = useState(false);
  const [selectedProducts, setSelectedProducts] = useState<number[]>([]);

  // Состояния для ABC/XYZ анализа
  const [abcXyzData, setAbcXyzData] = useState<AbcXyzData[]>([]);
  const [abcXyzLoading, setAbcXyzLoading] = useState(false);
  const [abcXyzMatrix, setAbcXyzMatrix] = useState<AbcXyzMatrixData>({
    AX: 0, AY: 0, AZ: 0,
    BX: 0, BY: 0, BZ: 0,
    CX: 0, CY: 0, CZ: 0
  });
  const [abcXyzMatrixWithProducts, setAbcXyzMatrixWithProducts] = useState<AbcXyzMatrixWithProductsData>({
    AX: { count: 0, products: [] },
    AY: { count: 0, products: [] },
    AZ: { count: 0, products: [] },
    BX: { count: 0, products: [] },
    BY: { count: 0, products: [] },
    BZ: { count: 0, products: [] },
    CX: { count: 0, products: [] },
    CY: { count: 0, products: [] },
    CZ: { count: 0, products: [] }
  });


  const {
    products,
    pagination,
    stats,
    loading,
    error,
    searchProducts,
    filterByStatus,
    syncProducts,
    fetchProducts,
    toggleProductVisibility,
    toggleShowHidden,
  } = useProducts({
    page: currentPage,
    limit: 25,
    sortBy: sortField || 'name',
    sortOrder: sortDirection,
    initialFilters: {
      search: searchQuery,
      status: statusFilter === 'all' ? undefined : statusFilter as any,
      showHidden,
    },
  });

  // Set document title
  useEffect(() => {
    document.title = "Товары | NextAdmin - Next.js Dashboard Kit";
  }, []);

  // Обновление поиска с задержкой
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      searchProducts(searchQuery);
    }, 500);
    
    return () => clearTimeout(timeoutId);
  }, [searchQuery, searchProducts]);

  // Обновление фильтра по статусу
  useEffect(() => {
    filterByStatus(statusFilter);
  }, [statusFilter, filterByStatus]);

  // Обновление фильтра показа скрытых товаров
  useEffect(() => {
    toggleShowHidden(showHidden);
  }, [showHidden, toggleShowHidden]);

  // Загрузка ABC/XYZ данных при изменении диапазона дат
  useEffect(() => {
    if (dateRange.from && dateRange.to) {
      fetchAbcXyzData();
    }
  }, [dateRange.from, dateRange.to]);



  const getStatusBadge = (stock: number) => {
    const baseClasses = "inline-flex items-center px-3 py-1 rounded-full text-xs font-medium";
    
    if (stock >= 20) {
      return { classes: `${baseClasses} bg-green/10 text-green border border-green/20`, text: "В наличии" };
    } else if (stock >= 10) {
      return { classes: `${baseClasses} bg-yellow-dark/10 text-yellow-dark border border-yellow-dark/20`, text: "Скоро кончится" };
    } else {
      return { classes: `${baseClasses} bg-red/10 text-red border border-red/20`, text: "Критичный" };
    }
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(price);
  };

  const calculateProfit = (price: number, primeCost: number, stock: number, avgPurchasePrice?: number) => {
    // Используем среднюю закупочную цену если есть, иначе обычную себестоимость
    const costPrice = avgPurchasePrice || primeCost;
    const profitPerUnit = price - costPrice;
    const totalProfit = profitPerUnit * stock;
    return formatPrice(totalProfit);
  };

  const handleSort = (field: "name" | "price" | "stock_quantity") => {
    if (sortField === field) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortDirection("asc");
    }
  };

  const SortIcon = ({ field }: { field: "name" | "price" | "stock_quantity" }) => {
    if (sortField !== field) {
      return <span className="text-gray-400">↕</span>;
    }
    return sortDirection === "asc" ? <ArrowUpIcon className="w-4 h-4" /> : <ArrowDownIcon className="w-4 h-4" />;
  };

  const handleSync = async () => {
    try {
      await syncProducts();
    } catch (error) {
      console.error('Error syncing products:', error);
    }
  };

  const handleRefresh = async () => {
    try {
      await fetchProducts();
    } catch (error) {
      console.error('Error refreshing products:', error);
    }
  };

  const handleToggleVisibility = async (productId: number, isVisible: boolean) => {
    try {
      await toggleProductVisibility(productId, isVisible);
    } catch (error) {
      console.error('Error toggling product visibility:', error);
      // Можно добавить уведомление об ошибке
    }
  };

  // Функции для работы с выбранными товарами
  const handleSelectProduct = (productId: number) => {
    setSelectedProducts(prev => 
      prev.includes(productId) 
        ? prev.filter(id => id !== productId)
        : [...prev, productId]
    );
  };

  const handleSelectAll = () => {
    if (selectedProducts.length === productsWithAnalytics.length) {
      setSelectedProducts([]);
    } else {
      setSelectedProducts(productsWithAnalytics.map(p => p.id));
    }
  };

  const handleClearSelection = () => {
    setSelectedProducts([]);
  };

  const handleBulkToggleVisibility = async () => {
    try {
      const selectedProductsData = products.filter(p => selectedProducts.includes(p.id));
      
      // Если включен режим "показать только скрытые", то все товары скрыты
      // и мы всегда делаем их видимыми
      if (showHidden) {
        for (const product of selectedProductsData) {
          await toggleProductVisibility(product.id, true);
        }
      } else {
        // В обычном режиме переключаем видимость
        const allVisible = selectedProductsData.every(p => p.is_visible);
        for (const product of selectedProductsData) {
          await toggleProductVisibility(product.id, !allVisible);
        }
      }
      
      setSelectedProducts([]);
    } catch (error) {
      console.error('Error bulk toggling visibility:', error);
    }
  };

  const getSelectedProductsData = () => {
    return productsWithAnalytics.filter((p: ProductWithAnalytics) => selectedProducts.includes(p.id));
  };

  // Функции для ABC/XYZ анализа
  const fetchAbcXyzData = async () => {
    setAbcXyzLoading(true);
    try {
      const params = new URLSearchParams({
        from: dateRange.from?.toISOString() || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),
        to: dateRange.to?.toISOString() || new Date().toISOString(),
      });

      const response = await fetch(`/api/analytics/abcxyz?${params}`);
      const result = await response.json();

      if (result.success) {
        setAbcXyzData(result.data.products || []);
        setAbcXyzMatrix(result.data.matrix || {
          AX: 0, AY: 0, AZ: 0,
          BX: 0, BY: 0, BZ: 0,
          CX: 0, CY: 0, CZ: 0
        });
        setAbcXyzMatrixWithProducts(result.data.matrixWithProducts || {
          AX: { count: 0, products: [] },
          AY: { count: 0, products: [] },
          AZ: { count: 0, products: [] },
          BX: { count: 0, products: [] },
          BY: { count: 0, products: [] },
          BZ: { count: 0, products: [] },
          CX: { count: 0, products: [] },
          CY: { count: 0, products: [] },
          CZ: { count: 0, products: [] }
        });
      }
    } catch (error) {
      console.error('Error fetching ABC/XYZ data:', error);
    } finally {
      setAbcXyzLoading(false);
    }
  };

  const getAbcBadge = (abc?: 'A' | 'B' | 'C') => {
    if (!abc) return { classes: '', text: '—' };
    
    const baseClasses = "inline-flex items-center px-2 py-1 rounded text-xs font-medium";
    
    switch (abc) {
      case 'A':
        return { classes: `${baseClasses} bg-green/10 text-green border border-green/20`, text: 'A' };
      case 'B':
        return { classes: `${baseClasses} bg-yellow-dark/10 text-yellow-dark border border-yellow-dark/20`, text: 'B' };
      case 'C':
        return { classes: `${baseClasses} bg-red/10 text-red border border-red/20`, text: 'C' };
      default:
        return { classes: '', text: '—' };
    }
  };

  const getXyzBadge = (xyz?: 'X' | 'Y' | 'Z') => {
    if (!xyz) return { classes: '', text: '—' };
    
    const baseClasses = "inline-flex items-center px-2 py-1 rounded text-xs font-medium";
    
    switch (xyz) {
      case 'X':
        return { classes: `${baseClasses} bg-blue/10 text-blue border border-blue/20`, text: 'X' };
      case 'Y':
        return { classes: `${baseClasses} bg-purple/10 text-purple border border-purple/20`, text: 'Y' };
      case 'Z':
        return { classes: `${baseClasses} bg-orange/10 text-orange border border-orange/20`, text: 'Z' };
      default:
        return { classes: '', text: '—' };
    }
  };

  // Функция для объединения товаров с ABC/XYZ данными
  const getProductsWithAnalytics = (): ProductWithAnalytics[] => {
    return products.map(product => {
      const analytics = abcXyzData.find(item => item.productId === product.id);
      return {
        ...product,
        abc: analytics?.abc,
        xyz: analytics?.xyz
      };
    });
  };

  const productsWithAnalytics = getProductsWithAnalytics();

  return (
    <div className="mx-auto max-w-7xl">
      {/* Статистика */}
      {stats && (
        <div className="mb-7.5 grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4 2xl:gap-7.5">
          <div className="rounded-[10px] bg-white p-6 shadow-1 dark:bg-gray-dark dark:shadow-card">
            <div className="mb-4"><DesignToolsIcon /></div>
            <h4 className="mb-2 text-heading-6 font-bold text-dark dark:text-white">
              {stats.totalProducts}
            </h4>
            <p className="mb-2 text-sm font-medium text-dark-6">Всего товаров</p>
            <div className="flex items-center gap-1.5">
              <span className="flex items-center gap-1 text-xs font-medium text-green">
                <ArrowUpIcon />
                <span>+12%</span>
              </span>
              <span className="text-xs text-dark-6">за неделю</span>
            </div>
          </div>

          <div className="rounded-[10px] bg-white p-6 shadow-1 dark:bg-gray-dark dark:shadow-card">
            <div className="mb-4"><DollarIcon /></div>
            <h4 className="mb-2 text-heading-6 font-bold text-dark dark:text-white">
              {formatPrice(stats.totalPurchaseValue)}
            </h4>
            <p className="mb-2 text-sm font-medium text-dark-6">Сумма закупки</p>
            <div className="flex items-center gap-1.5">
              <span className="flex items-center gap-1 text-xs font-medium text-red">
                <ArrowDownIcon />
                <span>-3%</span>
              </span>
              <span className="text-xs text-dark-6">за неделю</span>
            </div>
          </div>

          <div className="rounded-[10px] bg-white p-6 shadow-1 dark:bg-gray-dark dark:shadow-card">
            <div className="mb-4"><StatisticsChartIcon /></div>
            <h4 className="mb-2 text-heading-6 font-bold text-dark dark:text-white">
              {stats.averageMargin}%
            </h4>
            <p className="mb-2 text-sm font-medium text-dark-6">Средняя маржа</p>
            <div className="flex items-center gap-1.5">
              <span className="flex items-center gap-1 text-xs font-medium text-green">
                <ArrowUpIcon />
                <span>+8%</span>
              </span>
              <span className="text-xs text-dark-6">за неделю</span>
            </div>
          </div>

          <div className="rounded-[10px] bg-white p-6 shadow-1 dark:bg-gray-dark dark:shadow-card">
            <div className="mb-4"><DollarIcon /></div>
            <h4 className="mb-2 text-heading-6 font-bold text-dark dark:text-white">
              {stats.criticalStock}
            </h4>
            <p className="mb-2 text-sm font-medium text-dark-6">Критичные остатки</p>
            <div className="flex items-center gap-1.5">
              <span className="flex items-center gap-1 text-xs font-medium text-red">
                <ArrowDownIcon />
                <span>-15%</span>
              </span>
              <span className="text-xs text-dark-6">за неделю</span>
            </div>
          </div>
        </div>
      )}

      {/* ABC/XYZ Матрица */}
      <div className="mb-7.5">
        <AbcXyzMatrix 
          data={abcXyzMatrix}
          matrixWithProducts={abcXyzMatrixWithProducts}
          className="w-full"
        />
      </div>

      {/* Фильтры и управление */}
      <div className="mb-7.5 rounded-[10px] bg-white p-6 shadow-1 dark:bg-gray-dark dark:shadow-card">
        <div className="flex flex-col gap-4 lg:flex-row lg:items-end lg:justify-between">
          {/* Статус фильтр */}
          <div className="w-full max-w-[250px]">
            <label className="block text-body-sm font-medium text-dark dark:text-white mb-3">
              Статус товара
            </label>
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="w-full appearance-none rounded-lg border border-stroke bg-transparent px-5 py-3 text-dark dark:text-white outline-none focus:ring-gradient dark:border-dark-3 dark:bg-dark-2"
            >
              {statusOptions.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* Чекбокс показа скрытых товаров */}
          <div className="flex items-center gap-3">
            <label className="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                checked={showHidden}
                onChange={(e) => setShowHidden(e.target.checked)}
                className="w-4 h-4 text-primary bg-transparent border-2 border-stroke rounded focus:ring-primary focus:ring-2 dark:border-dark-3"
              />
              <span className="text-sm font-medium text-dark dark:text-white">
                Показать только скрытые товары
              </span>
            </label>
          </div>

          {/* Поиск */}
          <div className="relative w-full max-w-[400px]">
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full rounded-lg border border-stroke bg-transparent px-5 py-3 outline-none focus:ring-gradient dark:border-dark-3 dark:bg-dark-2 text-dark dark:text-white"
              placeholder="Поиск товаров..."
            />
            <button className="absolute right-0 top-0 flex h-12 w-12 items-center justify-center rounded-r-lg bg-primary text-white">
              <SearchIcon className="size-5" />
            </button>
          </div>

          {/* Кнопки управления */}
          <div className="flex gap-2">
            <button
              onClick={handleSync}
              disabled={loading}
              className="flex items-center gap-2 rounded-lg bg-green px-4 py-3 text-sm font-medium text-white hover:bg-green/90 disabled:opacity-50"
            >
              <svg className={`size-4 ${loading ? 'animate-spin' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              Синхронизация
            </button>
          </div>
        </div>
      </div>

      {/* Таблица товаров */}
      <div className="rounded-[10px] bg-white shadow-1 dark:bg-gray-dark dark:shadow-card">
        {loading && (
          <div className="flex items-center justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            <span className="ml-2 text-dark-6">Загрузка товаров...</span>
          </div>
        )}

        {error && (
          <div className="flex items-center justify-center py-8">
            <div className="text-center">
              <p className="text-red mb-4">❌ {error}</p>
              <button 
                onClick={handleRefresh} 
                className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90"
              >
                Попробовать снова
              </button>
            </div>
          </div>
        )}

        {!loading && !error && (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-stroke dark:border-dark-3">
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    <div className="flex items-center gap-3">
                      <input
                        type="checkbox"
                        checked={selectedProducts.length === productsWithAnalytics.length && productsWithAnalytics.length > 0}
                        onChange={handleSelectAll}
                        className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary focus:ring-2"
                      />
                      <button
                        onClick={() => handleSort("name")}
                        className="flex items-center gap-2 hover:text-primary"
                      >
                        Название
                        <SortIcon field="name" />
                      </button>
                    </div>
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    <button
                      onClick={() => handleSort("stock_quantity")}
                      className="flex items-center gap-2 hover:text-primary"
                    >
                      Остатки
                      <SortIcon field="stock_quantity" />
                    </button>
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    Продано
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    <button
                      onClick={() => handleSort("price")}
                      className="flex items-center gap-2 hover:text-primary"
                    >
                      Цена
                      <SortIcon field="price" />
                    </button>
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    Средняя себестоимость
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    Прибыль
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    Расходы на 1 шт
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    Чистая прибыль с 1 шт
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    ABC
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    XYZ
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-dark dark:text-white">
                    Статус
                  </th>
                </tr>
              </thead>
              <tbody>
                {productsWithAnalytics.length === 0 ? (
                  <tr>
                    <td colSpan={11} className="px-6 py-12 text-center">
                      <div className="text-dark-6">
                        {searchQuery ? 'Товары не найдены' : 
                         showHidden ? 'Нет скрытых товаров' : 
                         'Нет товаров для отображения'}
                      </div>
                    </td>
                  </tr>
                ) : (
                  productsWithAnalytics.map((product) => {
                    const status = getStatusBadge(product.stock_quantity);
                    const isSelected = selectedProducts.includes(product.id);
                    return (
                      <tr
                        key={product.id}
                        className={`border-b border-stroke hover:bg-gray-2/30 dark:border-dark-3 dark:hover:bg-dark-3/30 ${
                          isSelected ? 'bg-primary/5 dark:bg-primary/10' : ''
                        }`}
                      >
                        <td className="px-6 py-4">
                          <div className="flex items-center gap-3">
                            <input
                              type="checkbox"
                              checked={isSelected}
                              onChange={() => handleSelectProduct(product.id)}
                              className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary focus:ring-2"
                            />
                            <div className="flex items-center gap-2">
                              <div className="font-medium text-dark dark:text-white">
                                {product.name}
                              </div>
                              {!product.is_visible && (
                                <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300">
                                  Скрыт
                                </span>
                              )}
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4">
                          <span className={`font-medium ${
                            product.stock_quantity < 15 ? 'text-red' : 'text-dark dark:text-white'
                          }`}>
                            {product.stock_quantity} шт
                          </span>
                        </td>
                        <td className="px-6 py-4">
                          <span className="font-medium text-green-600 dark:text-green-400">
                            {product.soldQuantity || 0} шт
                          </span>
                        </td>
                        <td className="px-6 py-4">
                          <span className="font-medium text-dark dark:text-white">
                            {formatPrice(product.price)}
                          </span>
                        </td>
                        <td className="px-6 py-4">
                          <span className="font-medium text-blue-600 dark:text-blue-400">
                            {product.avgPurchasePriceRub ? formatPrice(product.avgPurchasePriceRub) : '—'}
                          </span>
                        </td>
                        <td className="px-6 py-4">
                          <span className="font-medium text-green">
                            {calculateProfit(product.price, product.prime_cost, product.stock_quantity, product.avgPurchasePriceRub)}
                          </span>
                        </td>
                        <td className="px-6 py-4">
                          <Tooltip
                            content={
                              <div className="text-xs">
                                <div>Себестоимость: {formatPrice((product.baseCost || 0) / Math.max(product.soldQuantity || 1, 1))}</div>
                                <div>Доля расходов: {formatPrice((product.expenseShare || 0) / Math.max(product.soldQuantity || 1, 1))}</div>
                                <div>Доставка: {formatPrice(350)}</div>
                              </div>
                            }
                            position="top"
                          >
                            <span className="font-medium text-red-600 dark:text-red-400 cursor-help">
                              {(product.soldQuantity || 0) > 0 ? formatPrice((product.totalCosts || 0) / (product.soldQuantity || 1)) : '—'}
                            </span>
                          </Tooltip>
                        </td>
                                               <td className="px-6 py-4">
                                 <span className="font-medium text-blue-600 dark:text-blue-400">
                                   {product.netProfitPerUnit !== undefined ? formatPrice(product.netProfitPerUnit) : '—'}
                                 </span>
                               </td>
                               <td className="px-6 py-4">
                                 {(() => {
                                   const badge = getAbcBadge(product.abc);
                                   return badge.classes ? (
                                     <span className={badge.classes}>
                                       {badge.text}
                                     </span>
                                   ) : (
                                     <span className="text-dark-6">{badge.text}</span>
                                   );
                                 })()}
                               </td>
                               <td className="px-6 py-4">
                                 {(() => {
                                   const badge = getXyzBadge(product.xyz);
                                   return badge.classes ? (
                                     <span className={badge.classes}>
                                       {badge.text}
                                     </span>
                                   ) : (
                                     <span className="text-dark-6">{badge.text}</span>
                                   );
                                 })()}
                               </td>
                               <td className="px-6 py-4">
                                 <span className={status.classes}>
                                   {status.text}
                                 </span>
                               </td>
                              </tr>
                            );
                          })
                        )}
                      </tbody>
                    </table>
                  </div>
                )}

                {/* Пагинация */}
                {pagination && !loading && !error && (
                  <div className="flex items-center justify-between border-t border-stroke px-6 py-4 dark:border-dark-3">
                    <div className="text-sm text-dark-6">
                      Показано {productsWithAnalytics.length} из {pagination.totalCount} товаров
                    </div>
                    <div className="flex items-center gap-2">
                      <button 
                        onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                        disabled={!pagination.hasPrevPage}
                        className="flex h-8 w-8 items-center justify-center rounded border border-stroke text-dark hover:bg-primary hover:text-white dark:border-dark-3 dark:text-white disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        ←
                      </button>
                      <span className="flex h-8 w-8 items-center justify-center rounded bg-primary text-white">
                        {pagination.page}
                      </span>
                      <button 
                        onClick={() => setCurrentPage(prev => prev + 1)}
                        disabled={!pagination.hasNextPage}
                        className="flex h-8 w-8 items-center justify-center rounded border border-stroke text-dark hover:bg-primary hover:text-white dark:border-dark-3 dark:text-white disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        →
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Плавающее меню действий */}
            {selectedProducts.length > 0 && (
              <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-50">
                <div className="bg-white dark:bg-gray-dark rounded-lg shadow-lg border border-stroke dark:border-dark-3 px-6 py-4 flex items-center gap-4 animate-in slide-in-from-bottom-2 duration-300">
                  <div className="flex items-center gap-2 text-sm font-medium text-dark dark:text-white">
                    <span className="flex h-6 w-6 items-center justify-center rounded-full bg-primary text-white text-xs">
                      {selectedProducts.length}
                    </span>
                    {selectedProducts.length === 1 ? 'товар выбран' : 'товаров выбрано'}
                  </div>
                  
                  <div className="h-6 w-px bg-stroke dark:bg-dark-3"></div>
                  
                  <div className="flex items-center gap-2">
                    <button
                      onClick={handleBulkToggleVisibility}
                      className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-dark dark:text-white hover:bg-gray-2 dark:hover:bg-dark-3 rounded-lg transition-colors"
                    >
                      {(() => {
                        // Если включен режим "показать только скрытые", то все товары скрыты
                        // и кнопка должна всегда показывать "Показать"
                        if (showHidden) {
                          return (
                            <>
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                              </svg>
                              Показать
                            </>
                          );
                        }
                        
                        // В обычном режиме проверяем состояние выбранных товаров
                        const selectedProductsData = getSelectedProductsData();
                        const allVisible = selectedProductsData.every(p => p.is_visible);
                        return (
                          <>
                            {allVisible ? (
                              <>
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <circle cx="12" cy="12" r="10" strokeWidth={2}/>
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="m15 9-6 6"/>
                                </svg>
                                Скрыть
                              </>
                            ) : (
                              <>
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                </svg>
                                Показать
                              </>
                            )}
                          </>
                        );
                      })()}
                    </button>
                    
                    <button
                      className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-dark dark:text-white hover:bg-gray-2 dark:hover:bg-dark-3 rounded-lg transition-colors"
                    >
                      <PencilSquareIcon className="w-4 h-4" />
                      Редактировать
                    </button>
                    
                    <button
                      className="flex items-center gap-2 px-3 py-2 text-sm font-medium text-red hover:bg-red/10 rounded-lg transition-colors"
                    >
                      <TrashIcon className="w-4 h-4" />
                      Удалить
                    </button>
                  </div>
                  
                  <div className="h-6 w-px bg-stroke dark:bg-dark-3"></div>
                  
                  <button
                    onClick={handleClearSelection}
                    className="flex items-center justify-center w-8 h-8 text-dark-6 hover:text-dark dark:hover:text-white hover:bg-gray-2 dark:hover:bg-dark-3 rounded-lg transition-colors"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
            )}
          </div>
        );
      }
    </div>
  );
} 