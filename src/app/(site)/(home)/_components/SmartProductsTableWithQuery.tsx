"use client";

import { useState, useEffect, Suspense } from "react";
import { useDateRange } from "@/context/DateRangeContext";
import { useProductsAnalytics, useExchangeRate, useUpdateProduct } from "@/hooks/useProductsAnalytics";
import { PurchaseCartModal } from "./PurchaseCartModal";
import { EditablePriceTRY } from "./EditablePriceTRY";
import { EditableField } from "@/components/ui/EditableField";
import toast from 'react-hot-toast';

interface ProductAnalytics {
  id: number;
  name: string;
  brand: string;
  
  // –û–°–¢–ê–¢–ö–ò –ò –ó–ê–ü–ê–°–´
  currentStock: number;
  inTransitQuantity: number;
  totalAvailable: number;
  
  // –°–ö–û–†–û–°–¢–¨ –ü–†–û–î–ê–ñ
  avgDailySales: number;
  daysUntilZero: number;
  stockStatus: 'critical' | 'low' | 'normal' | 'excess';
  
  // –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ó–ê–ö–£–ü–ö–ê–ú
  recommendedOrderQuantity: number;
  optimalStockLevel: number;
  
  // –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò
  avgPurchasePrice: number;
  avgpurchasepricetry: number;
  prime_cost: number;
  avgSalePrice: number;
  oldPrice?: number; // —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
  profitMargin: number;
  profitMarginBasic: number;
  deliveryCostPerUnit: number;
  allocatedExpensesPerUnit: number;
  profitPerUnit: number;
  totalRealProfit: number;
  roi: number;
  
  // –î–ò–ù–ê–ú–ò–ö–ê –ò –¢–†–ï–ù–î–´
  salesTrend: 'growing' | 'stable' | 'declining';
  salesVariability: 'stable' | 'moderate' | 'volatile';
  seasonalityFactor: number;
  
  // ABC/XYZ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø
  abcClass: 'A' | 'B' | 'C';
  xyzClass: 'X' | 'Y' | 'Z';
  
  // –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –û–ë–û–†–ê–ß–ò–í–ê–ï–ú–û–°–¢–ò
  inventoryTurnover: number;
  avgInventoryValue: number;
  daysInInventory: number;
}

interface CartItem {
  id: number;
  name: string;
  brand: string;
  quantity: number;
  costPrice: number; // —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
  costPriceTRY: number; // —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ª–∏—Ä–∞—Ö
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å –±–µ–π–¥–∂–∞ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤
function StockStatusBadge({ status, daysUntilZero }: { status: string, daysUntilZero: number }) {
  const statusConfig = {
    critical: { 
      color: 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400', 
      icon: 'üî¥', 
      text: `–ö—Ä–∏—Ç–∏—á–Ω–æ (${daysUntilZero}–¥)` 
    },
    low: { 
      color: 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400', 
      icon: 'üü°', 
      text: `–ú–∞–ª–æ (${daysUntilZero}–¥)` 
    },
    normal: { 
      color: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400', 
      icon: 'üü¢', 
      text: `–ù–æ—Ä–º–∞ (${daysUntilZero}–¥)` 
    },
    excess: { 
      color: 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400', 
      icon: 'üîµ', 
      text: `–ò–∑–±—ã—Ç–æ–∫ (${daysUntilZero}–¥)` 
    }
  };
  
  const config = statusConfig[status as keyof typeof statusConfig];
  
  return (
    <span className={`inline-flex items-center rounded-full px-2.5 py-1 text-xs font-medium ${config.color}`}>
      <span className="mr-1">{config.icon}</span>
      {config.text}
    </span>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–∞–∂
function SalesTrendBadge({ trend }: { trend: string }) {
  const trendConfig = {
    growing: { color: 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400', icon: 'üìà', text: '–†–∞—Å—Ç–µ—Ç' },
    stable: { color: 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400', icon: '‚û°Ô∏è', text: '–°—Ç–∞–±–∏–ª—å–Ω–æ' },
    declining: { color: 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400', icon: 'üìâ', text: '–ü–∞–¥–∞–µ—Ç' }
  };
  
  const config = trendConfig[trend as keyof typeof trendConfig];
  
  return (
    <span className={`inline-flex items-center rounded-full px-2.5 py-1 text-xs font-medium ${config.color}`}>
      <span className="mr-1">{config.icon}</span>
      {config.text}
    </span>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ABC/XYZ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
function ClassificationBadge({ abcClass, xyzClass }: { abcClass: string, xyzClass: string }) {
  const getABCColor = (cls: string) => {
    switch (cls) {
      case 'A': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      case 'B': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
      case 'C': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };
  
  const getXYZColor = (cls: string) => {
    switch (cls) {
      case 'X': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';
      case 'Y': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';
      case 'Z': return 'bg-pink-100 text-pink-800 dark:bg-pink-900/20 dark:text-pink-400';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };
  
  return (
    <div className="flex flex-col gap-1">
      <span className={`inline-flex items-center rounded px-1.5 py-0.5 text-xs font-medium ${getABCColor(abcClass)}`}>
        {abcClass}
      </span>
      <span className={`inline-flex items-center rounded px-1.5 py-0.5 text-xs font-medium ${getXYZColor(xyzClass)}`}>
        {xyzClass}
      </span>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã
interface ProductCartActionsProps {
  product: ProductAnalytics;
  cartItems: CartItem[];
  onAddToCart: (product: ProductAnalytics, quantity: number) => void;
  onUpdateQuantity: (id: number, quantity: number) => void;
  onRemoveFromCart: (id: number) => void;
}

function ProductCartActions({ 
  product, 
  cartItems, 
  onAddToCart, 
  onUpdateQuantity, 
  onRemoveFromCart 
}: ProductCartActionsProps) {
  const [quantity, setQuantity] = useState(product.recommendedOrderQuantity || 1);
  const [isAdding, setIsAdding] = useState(false);
  
  const cartItem = cartItems.find(item => item.id === product.id);
  const isInCart = !!cartItem;
  
  const handleAddToCart = async () => {
    setIsAdding(true);
    
    try {
      onAddToCart(product, quantity);
      toast.success(
        `${product.name} (${quantity} —à—Ç.) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É`,
        {
          duration: 2000,
          icon: 'üõí',
          style: {
            borderRadius: '10px',
            background: '#1A6DFF',
            color: '#fff',
          },
        }
      );
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É');
    } finally {
      setIsAdding(false);
    }
  };
  
  const handleQuantityChange = (newQuantity: number) => {
    if (newQuantity >= 1 && newQuantity <= 9999) {
      setQuantity(newQuantity);
    }
  };
  
  if (isInCart) {
    return (
      <button className="w-full px-3 py-2 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded-lg text-green-700 dark:text-green-300 font-medium text-sm transition-colors hover:bg-green-100 dark:hover:bg-green-900/30">
        <div className="flex items-center justify-center gap-2">
          <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
          </svg>
          <span>‚úì –í –∫–æ—Ä–∑–∏–Ω–µ ({cartItem.quantity} —à—Ç.)</span>
        </div>
      </button>
    );
  }
  
  return (
    <button
      onClick={handleAddToCart}
      disabled={isAdding}
      className={`
        w-full px-3 py-2 rounded-lg font-medium text-sm transition-all duration-200 hover:shadow-md transform hover:scale-105 active:scale-95 group
        ${product.recommendedOrderQuantity > 0 
          ? 'bg-gradient-to-r from-[#1A6DFF] to-[#00C5FF] text-white hover:opacity-90' 
          : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 hover:bg-gray-200 dark:hover:bg-gray-600'
        }
        ${isAdding ? 'opacity-50 cursor-not-allowed' : ''}
      `}
    >
      <div className="flex items-center justify-center gap-2">
        {isAdding ? (
          <>
            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
            <span>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...</span>
          </>
        ) : (
          <>
            {/* –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π stepper –≤ –∫–Ω–æ–ø–∫—É */}
            <div className="flex items-center gap-1">
              <div
                onClick={(e) => {
                  e.stopPropagation();
                  if (quantity > 1) {
                    handleQuantityChange(quantity - 1);
                  }
                }}
                className={`w-6 h-6 flex items-center justify-center rounded border border-white/30 text-white/80 hover:bg-white/20 transition-colors cursor-pointer select-none ${
                  quantity <= 1 ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                ‚àí
              </div>
              <span className="mx-2 min-w-[20px] text-center font-bold">{quantity}</span>
              <div
                onClick={(e) => {
                  e.stopPropagation();
                  handleQuantityChange(quantity + 1);
                }}
                className="w-6 h-6 flex items-center justify-center rounded border border-white/30 text-white/80 hover:bg-white/20 transition-colors cursor-pointer select-none"
              >
                +
              </div>
            </div>
            <span className="ml-2">üõí –≤ –∫–æ—Ä–∑–∏–Ω—É</span>
          </>
        )}
      </div>
    </button>
  );
}

function SmartProductsTableContent() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
  const [globalFilter, setGlobalFilter] = useState('');
  const [currentPage, setCurrentPage] = useState(0);
  const [pageSize] = useState(50);
  const [sortBy, setSortBy] = useState<keyof ProductAnalytics>('stockStatus');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [isCartOpen, setIsCartOpen] = useState(false);

  const { dateRange } = useDateRange();

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
  const period = dateRange.from && dateRange.to 
    ? Math.max(1, Math.ceil((dateRange.to.getTime() - dateRange.from.getTime()) / (1000 * 60 * 60 * 24)))
    : 31;

  // React Query hooks
  const { data: analyticsData, isLoading: loading, error } = useProductsAnalytics(period);
  const { data: exchangeRateData } = useExchangeRate('TRY');
  const updateProductMutation = useUpdateProduct();

  const products = analyticsData?.products || [];
  const summary = analyticsData?.summary;
  const exchangeRate = exchangeRateData?.rateWithBuffer;

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(globalFilter.toLowerCase()) ||
    product.brand.toLowerCase().includes(globalFilter.toLowerCase())
  );

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const sortedProducts = [...filteredProducts].sort((a, b) => {
    const aValue = a[sortBy];
    const bValue = b[sortBy];
    
    if (typeof aValue === 'string' && typeof bValue === 'string') {
      return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
    }
    
    if (typeof aValue === 'number' && typeof bValue === 'number') {
      return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;
    }
    
    return 0;
  });

  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const totalPages = Math.ceil(sortedProducts.length / pageSize);
  const startIndex = currentPage * pageSize;
  const paginatedProducts = sortedProducts.slice(startIndex, startIndex + pageSize);

  const handleSort = (column: keyof ProductAnalytics) => {
    if (sortBy === column) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortBy(column);
      setSortOrder('asc');
    }
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π
  const addToCart = (product: ProductAnalytics, quantity: number = 1) => {
    const existingItem = cartItems.find(item => item.id === product.id);
    
    if (existingItem) {
      setCartItems(prev => prev.map(item => 
        item.id === product.id 
          ? { ...item, quantity: item.quantity + quantity }
          : item
      ));
    } else {
      const newItem: CartItem = {
        id: product.id,
        name: product.name,
        brand: product.brand,
        quantity,
        costPrice: product.avgPurchasePrice || 0,
        costPriceTRY: 0 // –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
      };
      setCartItems(prev => [...prev, newItem]);
    }
  };

  const updateCartQuantity = (id: number, quantity: number) => {
    setCartItems(prev => prev.map(item => 
      item.id === id ? { ...item, quantity } : item
    ));
  };

  const updateCartCostPrice = (id: number, costPrice: number) => {
    setCartItems(prev => prev.map(item => 
      item.id === id ? { ...item, costPrice } : item
    ));
  };

  const removeFromCart = (id: number) => {
    setCartItems(prev => prev.filter(item => item.id !== id));
  };

  const openCartModal = () => {
    setIsCartOpen(true);
  };

  const createPurchase = async (items: CartItem[], totalTRY: number, totalRUB: number, supplierName: string = '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –¢—É—Ä—Ü–∏—è', notes: string = '') => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –ª–∏—Ä—ã
      const currentExchangeRate = exchangeRate || 2.02;

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –≤ –ª–∏—Ä–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const itemsWithTRY = items.map(item => ({
        ...item,
        costPriceTRY: item.costPrice / currentExchangeRate
      }));

      const response = await fetch('/api/purchases/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          items: itemsWithTRY,
          totalTRY,
          totalRUB,
          supplierName,
          notes,
          exchangeRate: currentExchangeRate,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫—É–ø–∫–∏');
      }

      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
      setCartItems([]);
      
      toast.success(`–ó–∞–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: ${result.data.id}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error);
      toast.error(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫—É–ø–∫–∏');
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const handleUpdateStock = async (productId: number, newStock: number) => {
    try {
      await updateProductMutation.mutateAsync({
        id: productId,
        data: { stock_quantity: newStock },
        period,
      });
      toast.success('–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–∞');
      throw error;
    }
  };

  const handleUpdatePrice = async (productId: number, newPrice: number) => {
    try {
      await updateProductMutation.mutateAsync({
        id: productId,
        data: { price: newPrice },
        period,
      });
      toast.success('–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã');
      throw error;
    }
  };

  const handleUpdateOldPrice = async (productId: number, newOldPrice: number) => {
    try {
      await updateProductMutation.mutateAsync({
        id: productId,
        data: { old_price: newOldPrice },
        period,
      });
      toast.success('–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–π —Ü–µ–Ω—ã');
      throw error;
    }
  };

  if (loading) {
    return (
      <section className="data-table-common rounded-[10px] bg-white shadow-1 dark:bg-gray-dark dark:shadow-card">
        <div className="flex items-center justify-center py-16">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          <span className="ml-3 text-dark dark:text-white">–ó–∞–≥—Ä—É–∑–∫–∞ —É–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...</span>
        </div>
      </section>
    );
  }

  if (error) {
    return (
      <section className="data-table-common rounded-[10px] bg-white shadow-1 dark:bg-gray-dark dark:shadow-card">
        <div className="flex items-center justify-center py-16">
          <div className="text-red-500 dark:text-red-400">–û—à–∏–±–∫–∞: {error.message}</div>
        </div>
      </section>
    );
  }

  return (
    <section className="data-table-common rounded-[10px] bg-white shadow-1 dark:bg-gray-dark dark:shadow-card">
      {/* –°–≤–æ–¥–∫–∞ */}
      {summary && (
        <div className="border-b border-stroke px-7.5 py-4.5 dark:border-dark-3">
          <div className="grid grid-cols-2 lg:grid-cols-5 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-red-500">{summary.criticalStock}</div>
              <div className="text-xs text-gray-500">–ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-500">{summary.lowStock}</div>
              <div className="text-xs text-gray-500">–ú–∞–ª–æ —Ç–æ–≤–∞—Ä–∞</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-500">{summary.needsReorder}</div>
              <div className="text-xs text-gray-500">–ù—É–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-500">{summary.avgProfitMargin}%</div>
              <div className="text-xs text-gray-500">–°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-dark dark:text-white">{summary.totalProducts}</div>
              <div className="text-xs text-gray-500">–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</div>
            </div>
          </div>
        </div>
      )}

      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="flex flex-col gap-4 border-b border-stroke px-7.5 py-4.5 dark:border-dark-3 sm:flex-row-reverse sm:items-center sm:justify-between sm:gap-x-4 sm:gap-y-0">
        <div className="flex items-center gap-4">
          <div className="relative z-20 w-full max-w-[414px]">
            <input
              type="text"
              value={globalFilter}
              onChange={(e) => {
                setGlobalFilter(e.target.value);
                setCurrentPage(0);
              }}
              className="w-full rounded-lg border border-stroke bg-transparent px-5 py-2.5 outline-none focus:border-primary dark:border-dark-3 dark:bg-dark-2 dark:focus:border-primary dark:text-white"
              placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
            />
            <button className="absolute right-0 top-0 flex h-11.5 w-11.5 items-center justify-center rounded-r-md bg-primary text-white hover:bg-opacity-90 transition-colors duration-200">
              <svg width="18" height="18" viewBox="0 0 18 18" fill="currentColor" className="size-4.5">
                <path fillRule="evenodd" clipRule="evenodd" d="M8.625 2.0625C5.00063 2.0625 2.0625 5.00063 2.0625 8.625C2.0625 12.2494 5.00063 15.1875 8.625 15.1875C12.2494 15.1875 15.1875 12.2494 15.1875 8.625C15.1875 5.00063 12.2494 2.0625 8.625 2.0625ZM0.9375 8.625C0.9375 4.37931 4.37931 0.9375 8.625 0.9375C12.8707 0.9375 16.3125 4.37931 16.3125 8.625C16.3125 10.5454 15.6083 12.3013 14.4441 13.6487L16.8977 16.1023C17.1174 16.3219 17.1174 16.6781 16.8977 16.8977C16.6781 17.1174 16.3219 17.1174 16.1023 16.8977L13.6487 14.4441C12.3013 15.6083 10.5454 16.3125 8.625 16.3125C4.37931 16.3125 0.9375 12.8707 0.9375 8.625Z" />
              </svg>
            </button>
          </div>
          
          {/* –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã */}
          <button
            onClick={openCartModal}
            className="relative px-4 py-2.5 bg-gradient-to-r from-[#1A6DFF] to-[#00C5FF] text-white rounded-lg hover:opacity-90 transition-all duration-200 hover:shadow-md flex items-center gap-2"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4m1.6 8L6 5H4m1 8v5a2 2 0 002 2h10a2 2 0 002-2v-5m-12 0h12" />
            </svg>
            <span className="hidden sm:inline">–ö–æ—Ä–∑–∏–Ω–∞</span>
            {cartItems.length > 0 && (
              <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                {cartItems.length}
              </span>
            )}
          </button>
        </div>
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ */}
      <div className="overflow-x-auto">
        <table className="w-full text-sm">
          <thead>
            <tr className="border-t border-stroke dark:border-dark-3">
              <th className="cursor-pointer px-4 py-4 text-left font-medium text-dark dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800" onClick={() => handleSort('name')}>
                –¢–æ–≤–∞—Ä ‚ÜïÔ∏è
              </th>
              <th className="cursor-pointer px-4 py-4 text-left font-medium text-dark dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800" onClick={() => handleSort('stockStatus')}>
                –°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞—Ç–∫–æ–≤ ‚ÜïÔ∏è
              </th>
              <th className="cursor-pointer px-4 py-4 text-left font-medium text-dark dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800" onClick={() => handleSort('avgDailySales')}>
                –ü—Ä–æ–¥–∞–∂–∏/–¥–µ–Ω—å ‚ÜïÔ∏è
              </th>
              <th className="cursor-pointer px-4 py-4 text-left font-medium text-dark dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800" onClick={() => handleSort('recommendedOrderQuantity')}>
                –ö –∑–∞–∫–∞–∑—É ‚ÜïÔ∏è
              </th>
              <th className="cursor-pointer px-4 py-4 text-left font-medium text-dark dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800" onClick={() => handleSort('salesTrend')}>
                –¢—Ä–µ–Ω–¥ ‚ÜïÔ∏è
              </th>
              <th className="cursor-pointer px-4 py-4 text-left font-medium text-dark dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800" onClick={() => handleSort('profitMargin')} title="–†–µ–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: –¥–æ—Å—Ç–∞–≤–∫–∞ (350‚ÇΩ/—à—Ç) + –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã">
                –†–µ–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ ‚ÜïÔ∏è
              </th>
              <th className="cursor-pointer px-4 py-4 text-left font-medium text-dark dark:text-white hover:bg-gray-50 dark:hover:bg-gray-800" onClick={() => handleSort('abcClass')}>
                ABC/XYZ ‚ÜïÔ∏è
              </th>
              <th className="px-4 py-4 text-left font-medium text-dark dark:text-white">
                –î–µ–π—Å—Ç–≤–∏—è
              </th>
            </tr>
          </thead>
          <tbody>
            {paginatedProducts.length === 0 ? (
              <tr>
                <td colSpan={8} className="py-12 text-center font-medium text-dark-5 dark:text-dark-6">
                  {globalFilter ? '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É' : '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                </td>
              </tr>
            ) : (
              paginatedProducts.map((product) => (
                <tr key={product.id} className="border-t border-stroke hover:bg-gray-50 dark:border-dark-3 dark:hover:bg-gray-800 transition-colors">
                  <td className="px-4 py-4">
                    <div>
                      <div className="font-medium text-dark dark:text-white mb-2">{product.name}</div>
                      
                      {/* –¶–µ–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                      <div className="space-y-1.5">
                        {/* –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ */}
                        <div className="flex items-center gap-2">
                          <span className="text-purple-600 dark:text-purple-400">üè∑Ô∏è</span>
                          <EditableField
                            value={product.avgSalePrice}
                            label="—Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏"
                            suffix="‚ÇΩ"
                            type="decimal"
                            min={0}
                            onSave={(value) => handleUpdatePrice(product.id, value)}
                            isLoading={updateProductMutation.isPending}
                            displayClassName="text-purple-600 dark:text-purple-400"
                            formatDisplay={(value) => `${value.toLocaleString()} ‚ÇΩ (–ø—Ä–æ–¥–∞–∂–∞)`}
                          />
                        </div>

                        {/* –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
                        {product.oldPrice !== undefined && product.oldPrice > 0 && (
                          <div className="flex items-center gap-2">
                            <span className="text-gray-500">üí∏</span>
                            <EditableField
                              value={product.oldPrice}
                              label="—Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É"
                              suffix="‚ÇΩ"
                              type="decimal"
                              min={0}
                              onSave={(value) => handleUpdateOldPrice(product.id, value)}
                              isLoading={updateProductMutation.isPending}
                              displayClassName="text-gray-500 line-through"
                              formatDisplay={(value) => `${value.toLocaleString()} ‚ÇΩ (—Å—Ç–∞—Ä–∞—è)`}
                            />
                          </div>
                        )}

                        {/* –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç */}
                        {(!product.oldPrice || product.oldPrice === 0) && (
                          <button
                            onClick={() => handleUpdateOldPrice(product.id, product.avgSalePrice)}
                            className="text-xs text-blue-500 hover:text-blue-700 underline"
                          >
                            + –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É
                          </button>
                        )}

                        {/* –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ) */}
                        {exchangeRate && (
                          <>
                            <div className="text-xs text-green-600 dark:text-green-400">
                              üí∞ {Math.round(product.prime_cost * exchangeRate).toLocaleString()} ‚ÇΩ (—Å–µ–±–µ—Å—Ç.)
                            </div>
                            <div className="text-xs text-blue-600 dark:text-blue-400">
                              üí∏ ‚Ç∫{product.prime_cost.toFixed(2)}
                            </div>
                          </>
                        )}
                      </div>

                      {/* –û—Å—Ç–∞—Ç–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                      <div className="mt-2 flex items-center gap-2">
                        <span className="text-xs text-gray-400">–û—Å—Ç–∞—Ç–æ–∫:</span>
                        <EditableField
                          value={product.currentStock}
                          label="–æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞"
                          suffix="—à—Ç."
                          type="integer"
                          min={0}
                          onSave={(value) => handleUpdateStock(product.id, value)}
                          isLoading={updateProductMutation.isPending}
                          displayClassName="text-xs"
                          formatDisplay={(value) => `${value} —à—Ç.`}
                        />
                        <span className="text-xs text-gray-400">+ {product.inTransitQuantity} –≤ –ø—É—Ç–∏</span>
                      </div>
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <StockStatusBadge status={product.stockStatus} daysUntilZero={product.daysUntilZero} />
                  </td>
                  <td className="px-4 py-4">
                    <div className="font-medium text-dark dark:text-white">{product.avgDailySales} —à—Ç</div>
                    <div className="text-xs text-gray-500">‚âà {(product.avgDailySales * 30).toFixed(0)} –≤ –º–µ—Å—è—Ü</div>
                  </td>
                  <td className="px-4 py-4">
                    {product.recommendedOrderQuantity > 0 ? (
                      <div>
                        <div className="font-bold text-blue-600 dark:text-blue-400">{product.recommendedOrderQuantity} —à—Ç</div>
                        <div className="text-xs text-gray-500">–û–ø—Ç–∏–º—É–º: {product.optimalStockLevel}</div>
                      </div>
                    ) : (
                      <span className="text-gray-500">–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ</span>
                    )}
                  </td>
                  <td className="px-4 py-4">
                    <SalesTrendBadge trend={product.salesTrend} />
                    <div className="text-xs text-gray-500 mt-1">–í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {product.salesVariability}</div>
                  </td>
                  <td className="px-4 py-4">
                    <div className="font-medium text-dark dark:text-white" title={`–†–µ–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤:\n‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: ${product.deliveryCostPerUnit}‚ÇΩ/—à—Ç\n‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${product.allocatedExpensesPerUnit}‚ÇΩ/—à—Ç\n‚Ä¢ –ë–µ–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤: ${product.profitMarginBasic}%\n‚Ä¢ –ü—Ä–∏–±—ã–ª—å —Å –µ–¥–∏–Ω–∏—Ü—ã: ${product.profitPerUnit}‚ÇΩ`}>
                      {product.profitMargin}%
                    </div>
                    <div className="text-xs text-gray-500">
                      <span title={`–ü—Ä–∏–±—ã–ª—å —Å –µ–¥–∏–Ω–∏—Ü—ã: ${product.profitPerUnit}‚ÇΩ`}>
                        üí∞ {product.profitPerUnit}‚ÇΩ/—à—Ç
                      </span>
                    </div>
                    <div className="text-xs text-gray-400">
                      <span title={`–î–æ—Å—Ç–∞–≤–∫–∞: ${product.deliveryCostPerUnit}‚ÇΩ + –û–±—â–∏–µ: ${product.allocatedExpensesPerUnit}‚ÇΩ`}>
                        üì¶ {product.deliveryCostPerUnit}‚ÇΩ + üìä {product.allocatedExpensesPerUnit}‚ÇΩ
                      </span>
                    </div>
                    <div className="text-xs text-gray-400">
                      ROI: {product.roi}%
                    </div>
                  </td>
                  <td className="px-4 py-4">
                    <ClassificationBadge abcClass={product.abcClass} xyzClass={product.xyzClass} />
                  </td>
                  <td className="px-4 py-4">
                    <ProductCartActions 
                      product={product}
                      cartItems={cartItems}
                      onAddToCart={addToCart}
                      onUpdateQuantity={updateCartQuantity}
                      onRemoveFromCart={removeFromCart}
                    />
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      <div className="flex flex-col gap-4 px-7.5 py-7 sm:flex-row sm:items-center sm:justify-between sm:gap-0">
        <div className="flex items-center">
          <button
            className="flex items-center justify-center rounded-[3px] p-[7px] hover:bg-primary hover:text-white disabled:pointer-events-none disabled:opacity-50 transition-colors duration-200 text-dark-5 dark:text-dark-6"
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 0}
          >
            <svg width={18} height={18} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth={2}>
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>

          {Array.from({ length: totalPages }, (_, index) => index).map((pageIndex) => (
            <button
              key={pageIndex}
              onClick={() => handlePageChange(pageIndex)}
              className={`mx-1 flex items-center justify-center rounded-[3px] p-1.5 px-[15px] font-medium transition-colors duration-200 hover:bg-primary hover:text-white ${
                currentPage === pageIndex
                  ? "bg-primary text-white"
                  : "text-dark-5 dark:text-dark-6"
              }`}
            >
              {pageIndex + 1}
            </button>
          ))}

          <button
            className="flex items-center justify-center rounded-[3px] p-[7px] hover:bg-primary hover:text-white disabled:pointer-events-none disabled:opacity-50 transition-colors duration-200 text-dark-5 dark:text-dark-6"
            onClick={() => handlePageChange(currentPage + 1)}
            disabled={currentPage >= totalPages - 1}
          >
            <svg width={18} height={18} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth={2}>
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
          </button>
        </div>

        <p className="font-medium text-dark dark:text-white">
          –ü–æ–∫–∞–∑–∞–Ω–æ {Math.min(startIndex + 1, sortedProducts.length)} - {Math.min(startIndex + pageSize, sortedProducts.length)} –∏–∑{" "}
          {sortedProducts.length} –∑–∞–ø–∏—Å–µ–π
          {globalFilter && ` (–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –∏–∑ ${products.length})`}
        </p>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ—Ä–∑–∏–Ω—ã */}
      <PurchaseCartModal
        isOpen={isCartOpen}
        onClose={() => setIsCartOpen(false)}
        cartItems={cartItems}
        onUpdateQuantity={updateCartQuantity}
        onUpdateCostPrice={updateCartCostPrice}
        onRemoveItem={removeFromCart}
        onCreatePurchase={createPurchase}
      />
    </section>
  );
}

export function SmartProductsTable() {
  return (
    <Suspense fallback={
      <section className="data-table-common rounded-[10px] bg-white shadow-1 dark:bg-gray-dark dark:shadow-card">
        <div className="flex items-center justify-center py-16">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          <span className="ml-3 text-dark dark:text-white">–ó–∞–≥—Ä—É–∑–∫–∞ —É–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...</span>
        </div>
      </section>
    }>
      <SmartProductsTableContent />
    </Suspense>
  );
} 