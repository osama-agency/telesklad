import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/libs/prismaDb';

export async function GET(request: NextRequest) {
  try {
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    // const session = await getServerSession();
    // if (!session?.user?.email) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    console.log('üîß Expenses API: Starting...');

    const { searchParams } = new URL(request.url);
    const from = searchParams.get('from');
    const to = searchParams.get('to');

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞–±–ª–∏—Ü
    let expenses = [];
    
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º expenses
      const whereConditions: any = {};
      
      // –ü–æ—Å–∫–æ–ª—å–∫—É –ø–æ–ª–µ date –∏–º–µ–µ—Ç —Ç–∏–ø String, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—é
    if (from || to) {
      whereConditions.date = {};
      if (from) {
          const fromDateStr = new Date(from).toISOString().split('T')[0]; // YYYY-MM-DD
        whereConditions.date.gte = fromDateStr;
      }
      if (to) {
          const toDateStr = new Date(to).toISOString().split('T')[0]; // YYYY-MM-DD
        whereConditions.date.lte = toDateStr;
      }
        console.log('üìÖ Date filter conditions:', whereConditions);
    }

      expenses = await (prisma as any).expenses.findMany({
      where: whereConditions,
      orderBy: [
        { date: 'desc' },
          { createdat: 'desc' }
        ],
        take: 100 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      });
      console.log(`‚úÖ Found expenses table with ${expenses.length} records`);
    } catch (expensesError) {
      console.log('‚ùå expenses table error:', expensesError);
      
      try {
        // –ü—Ä–æ–±—É–µ–º expense (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ)
        expenses = await (prisma as any).expense.findMany({
          orderBy: {
            createdat: 'desc'
          },
          take: 100
        });
        console.log('‚úÖ Found expense table');
      } catch (expenseError) {
        console.log('‚ùå expense table not found:', expenseError);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç
        console.log('üìù Returning empty expenses array');
        return NextResponse.json([]);
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const serializedExpenses = expenses.map((expense: any) => ({
      ...expense,
      id: expense.id ? expense.id.toString() : null,
      user_id: expense.user_id ? expense.user_id.toString() : null,
      userid: expense.userid ? expense.userid.toString() : null,
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –æ–∂–∏–¥–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      date: expense.date || new Date().toISOString().split('T')[0],
      category: expense.category || '–ü—Ä–æ—á–µ–µ',
      description: expense.description || '–†–∞—Å—Ö–æ–¥',
      amount: expense.amount || 0
    }));

    console.log(`‚úÖ Expenses API: Found ${serializedExpenses.length} expenses`);
    console.log('üìã Sample expense:', serializedExpenses[0]);
    return NextResponse.json(serializedExpenses);
  } catch (error) {
    console.error('‚ùå Error fetching expenses:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ UI
    return NextResponse.json([]);
  }
}

export async function POST(request: NextRequest) {
  try {
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    // const session = await getServerSession();
    // if (!session?.user?.email) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    console.log('üîß Expenses POST API: Starting...');

    const body = await request.json();
    const { date, category, description, amount } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!date || !category || !description || !amount) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    if (typeof amount !== 'number' || amount <= 0) {
      return NextResponse.json(
        { error: 'Amount must be a positive number' },
        { status: 400 }
      );
    }

    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const teleskladUser = await (prisma as any).telesklad_user.findFirst({
      where: { email: 'go@osama.agency' }
    });

    if (!teleskladUser) {
      return NextResponse.json({ error: 'Telesklad user not found' }, { status: 404 });
    }

    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users (–¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞)
    const user = await (prisma as any).users.findFirst({
      where: { email: 'go@osama.agency' }
    });

    if (!user) {
      return NextResponse.json({ error: 'User not found in users table' }, { status: 404 });
    }

    let expense;
    try {
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ expenses
      expense = await (prisma as any).expenses.create({
      data: {
        date,
        category,
        description,
        amount,
          userid: user.id  // –ò—Å–ø–æ–ª—å–∑—É–µ–º userid –≤–º–µ—Å—Ç–æ userId
        }
      });
      console.log('‚úÖ Created expense in expenses table');
    } catch (expensesError) {
      console.log('‚ùå Failed to create in expenses table:', expensesError);
      
      try {
        // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ expense
        expense = await (prisma as any).expense.create({
          data: {
            date,
            category,
            description,
            amount,
            userid: user.id  // –ò—Å–ø–æ–ª—å–∑—É–µ–º userid –≤–º–µ—Å—Ç–æ userId
      }
    });
        console.log('‚úÖ Created expense in expense table');
      } catch (expenseError) {
        console.log('‚ùå Failed to create in expense table:', expenseError);
        return NextResponse.json(
          { error: 'Expenses table not found' },
          { status: 500 }
        );
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const serializedExpense = {
      ...expense,
      id: expense.id ? expense.id.toString() : null,
      user_id: expense.user_id ? expense.user_id.toString() : null,
      userid: expense.userid ? expense.userid.toString() : null,
    };

    console.log('‚úÖ Expense created successfully');
    return NextResponse.json(serializedExpense, { status: 201 });
  } catch (error) {
    console.error('‚ùå Error creating expense:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
} 