import { NextRequest, NextResponse } from 'next/server';
import { ReportService } from '@/lib/services/ReportService';
import { prisma } from '@/libs/prismaDb';

export async function POST(request: NextRequest) {
  try {
    console.log('üß™ Test Telegram notifications endpoint called');

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0 (unpaid) –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "–Ø –æ–ø–ª–∞—Ç–∏–ª"
    const testOrder = await prisma.orders.findFirst({
      where: {
        status: 0 // –¢–æ–ª—å–∫–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      },
      include: {
        users: true,
        order_items: {
          include: {
            products: true
          }
        },
        bank_cards: true
      },
      orderBy: {
        created_at: 'desc'
      }
    });

    if (!testOrder) {
      return NextResponse.json({
        success: false,
        message: 'No unpaid orders found for testing. Create a new order first.'
      }, { status: 404 });
    }

    console.log(`üß™ Testing with order: ${testOrder.id}`);
    console.log('üß™ Simulating "I paid" notification...');

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É, –æ–∂–∏–¥–∞–µ–º–æ–º—É ReportService
    const formattedOrder = {
      ...testOrder,
      total_amount: Number(testOrder.total_amount), // Decimal -> number
      deliverycost: testOrder.deliverycost ? Number(testOrder.deliverycost) : null,
      order_items: testOrder.order_items.map(item => ({
        ...item,
        price: Number(item.price), // Decimal -> number
        products: {
          ...item.products,
          price: Number(item.products.price) // Decimal -> number
        }
      }))
    };

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const previousStatus = testOrder.status;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "paid" (1) –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedOrder = await prisma.orders.update({
      where: { id: testOrder.id },
      data: { 
        status: 1, // paid
        updated_at: new Date()
      },
      include: {
        users: true,
        order_items: {
          include: {
            products: true
          }
        },
        bank_cards: true
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    const formattedUpdatedOrder = {
      ...updatedOrder,
      total_amount: Number(updatedOrder.total_amount),
      deliverycost: updatedOrder.deliverycost ? Number(updatedOrder.deliverycost) : null,
      order_items: updatedOrder.order_items.map(item => ({
        ...item,
        price: Number(item.price),
        products: {
          ...item.products,
          price: Number(item.products.price)
        }
      }))
    };

    console.log('üß™ Calling ReportService.handleOrderStatusChange...');
    await ReportService.handleOrderStatusChange(formattedUpdatedOrder as any, previousStatus);

    console.log('‚úÖ Test notification sent successfully');

    return NextResponse.json({
      success: true,
      message: 'Test notification sent',
      order_id: updatedOrder.id.toString(), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É
      user_id: updatedOrder.users.tg_id.toString(),
      status_change: `${previousStatus} -> ${updatedOrder.status} (paid)`
    });

  } catch (error) {
    console.error('‚ùå Test notification error:', error);
    return NextResponse.json({
      success: false,
      message: 'Failed to send test notification',
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Telegram notifications test endpoint',
    note: 'Use POST to test notifications',
    endpoints: {
      test: 'POST /api/test-telegram-notifications'
    }
  });
} 