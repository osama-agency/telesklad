import { NextRequest, NextResponse } from 'next/server';
import { headers } from 'next/headers';
import { TelegramBotWorker } from '@/lib/services/TelegramBotWorker';
import crypto from 'crypto';

// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Ä–∫–µ—Ä–∞
const botWorker = TelegramBotWorker.getInstance();

// –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let isInitialized = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
async function ensureBotInitialized() {
  if (!isInitialized) {
    try {
      await botWorker.initialize();
      isInitialized = true;
      console.log('‚úÖ Main bot initialized in webhook handler');
    } catch (error) {
      console.error('‚ùå Failed to initialize main bot:', error);
      throw error;
    }
  }
}

export const dynamic = 'force-dynamic';
export const runtime = 'nodejs';

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –æ—Ç Telegram
 */
function verifyTelegramWebhook(secretToken: string, requestBody: string, telegramSignature: string): boolean {
  const hash = crypto.createHmac('sha256', secretToken).update(requestBody).digest('hex');
  return `sha256=${hash}` === telegramSignature;
}

export async function POST(request: NextRequest) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    await ensureBotInitialized();
    
    const headersList = await headers();
    const telegramSignature = headersList.get('x-telegram-bot-api-secret-token');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    const requestBody = await request.text();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    const secretToken = process.env.TELEGRAM_WEBHOOK_SECRET;
    if (secretToken && telegramSignature) {
      const isValid = verifyTelegramWebhook(secretToken, requestBody, telegramSignature);
      if (!isValid) {
        console.warn('‚ö†Ô∏è Invalid main bot webhook signature');
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }
    } else {
      console.log('üîì Main bot webhook working without secret token verification');
    }

    // –ü–∞—Ä—Å–∏–º JSON
    const update = JSON.parse(requestBody);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    console.log('üì® [MAIN BOT] Telegram webhook update:', JSON.stringify(update, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
    if (update.callback_query?.message?.from?.id === 7612206140) {
      console.log('‚úÖ [MAIN BOT] Confirmed callback from @telesklad_bot');
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update —á–µ—Ä–µ–∑ worker
      await botWorker.processWebhookUpdate(update);
    } else {
      console.warn('‚ö†Ô∏è [MAIN BOT] Received callback not from main bot, ignoring');
    }
    
    // Telegram –æ–∂–∏–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 200 –∏ –ª—é–±–æ–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({ ok: true });
    
  } catch (error) {
    console.error('‚ùå Main bot webhook error:', error);
    
    // –í–∞–∂–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
    return NextResponse.json({ ok: false });
  }
}

// GET - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webhook
export async function GET() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    await ensureBotInitialized();
    
    return NextResponse.json({ 
      status: 'ok', 
      message: 'Main bot webhook is ready',
      bot: '@telesklad_bot',
      timestamp: new Date().toISOString(),
      mode: 'webhook',
      initialized: isInitialized
    });
  } catch (error) {
    return NextResponse.json({ 
      status: 'error',
      message: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
} 