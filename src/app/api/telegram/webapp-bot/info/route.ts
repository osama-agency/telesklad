import { NextRequest, NextResponse } from 'next/server';
import { WebappTelegramBotService } from '@/lib/services/webapp-telegram-bot.service';

// GET - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webapp –±–æ—Ç–µ
export async function GET() {
  try {
    const botInfo = await WebappTelegramBotService.getBotInfo();
    
    if (botInfo.error) {
      return NextResponse.json({
        success: false,
        error: botInfo.error,
        status: 'Bot connection failed'
      }, { status: 500 });
    }

    return NextResponse.json({
      success: true,
      bot: botInfo.result,
      status: 'Bot is working',
      token_preview: '7754514670:AAF***',
      webhook_url: `${process.env.NEXTAUTH_URL || 'http://localhost:3009'}/api/telegram/webapp-webhook`,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Bot info error:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
      status: 'Bot info failed'
    }, { status: 500 });
  }
}

// POST - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
export async function POST(request: NextRequest) {
  try {
    const { test_user_id, message } = await request.json();
    
    if (!test_user_id) {
      return NextResponse.json({
        success: false,
        error: 'test_user_id is required'
      }, { status: 400 });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testMessage = {
      chat_id: test_user_id,
      text: message || `üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç webapp –±–æ—Ç–∞</b>

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`,
      parse_mode: 'HTML' as const
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ sendMessage —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const result = await (WebappTelegramBotService as any).sendMessage(testMessage);
    
    if (result && result.result) {
      return NextResponse.json({
        success: true,
        message: 'Test message sent successfully',
        message_id: result.result.message_id,
        chat_id: result.result.chat.id
      });
    } else {
      return NextResponse.json({
        success: false,
        error: result?.error || 'Failed to send test message'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå Test message error:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 