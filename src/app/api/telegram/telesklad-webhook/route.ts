import { NextResponse } from 'next/server';
import { TelegramBotWorker } from '@/lib/services/TelegramBotWorker';
import { TelegramTokenService } from '@/lib/services/telegram-token.service';

const TELESKLAD_BOT_ID = 7612206140; // @telesklad_bot

// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Ä–∫–µ—Ä–∞
const botWorker = TelegramBotWorker.getInstance();

// –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let isInitialized = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
async function ensureBotInitialized() {
  if (!isInitialized) {
    try {
      await botWorker.initialize();
      isInitialized = true;
      console.log('‚úÖ Telesklad bot initialized in webhook handler');
    } catch (error) {
      console.error('‚ùå Failed to initialize telesklad bot:', error);
      throw error;
    }
  }
}

export async function POST(request: Request) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await ensureBotInitialized();

    const update = await request.json();
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üì® [TELESKLAD BOT] Webhook received:', JSON.stringify(update, null, 2));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    await botWorker.processWebhookUpdate(update);

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('‚ùå Error processing telesklad bot webhook:', error);
    return NextResponse.json({ ok: false, error: 'Internal server error' }, { status: 500 });
  }
} 