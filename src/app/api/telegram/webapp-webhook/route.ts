import { NextRequest, NextResponse } from 'next/server';
import { TelegramBotWorker } from '@/lib/services/TelegramBotWorker';
import { TelegramService } from '@/lib/services/TelegramService';
import { prisma } from '@/libs/prismaDb';

const STRATTERA_TEST_BOT_ID = 7754514670; // @strattera_test_bot

// –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Ä–∫–µ—Ä–∞
const botWorker = TelegramBotWorker.getInstance();

// –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let isInitialized = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
async function ensureBotInitialized() {
  if (!isInitialized) {
    try {
      await botWorker.initialize();
      isInitialized = true;
      console.log('‚úÖ Strattera test bot initialized in webhook handler');
    } catch (error) {
      console.error('‚ùå Failed to initialize strattera test bot:', error);
      throw error;
    }
  }
}

// POST - –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç WEBAPP –±–æ—Ç–∞
export async function POST(request: NextRequest) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    await ensureBotInitialized();

    const body = await request.json();
    console.log('üì® [WEBAPP BOT] Webhook received:', JSON.stringify(body, null, 2));

    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º bot ID (–Ω–æ –ù–ï –¥–ª—è callback_query)
    if (body?.message?.from?.is_bot && body?.message?.from?.id !== STRATTERA_TEST_BOT_ID) {
      console.warn('‚ö†Ô∏è Received message from wrong bot ID:', body?.message?.from?.id);
      return NextResponse.json({ ok: false, error: 'Wrong bot ID' }, { status: 403 });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)
    if (body.callback_query) {
      console.log('üîÑ [WEBAPP BOT] Processing callback from user:', body.callback_query.from.id, 'data:', body.callback_query.data);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ callback'–∏ —á–µ—Ä–µ–∑ TelegramBotWorker
      await botWorker.processWebhookUpdate(body);
      
      return NextResponse.json({ ok: true });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (body.message) {
      console.log('üí¨ [WEBAPP BOT] Processing message:', body.message.text);
      
      const message = body.message;
      const from = message.from;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
      if (from) {
        try {
          await (prisma as any).users.upsert({
            where: { tg_id: BigInt(from.id) },
            update: {
              first_name: from.first_name || null,
              last_name: from.last_name || null,
              username: from.username || null,
              updated_at: new Date(),
            },
            create: {
              tg_id: BigInt(from.id),
              first_name: from.first_name || null,
              last_name: from.last_name || null,
              username: from.username || null,
              email: `tg_${from.id}@webapp.local`,
              encrypted_password: '',
              created_at: new Date(),
              updated_at: new Date(),
            },
          });
        } catch (error) {
          console.error('‚ùå [WEBAPP BOT] User upsert error:', error);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (message.text) {
        try {
          await (prisma as any).messages.create({
            data: {
              text: message.text,
              tg_id: from ? BigInt(from.id) : null,
              is_incoming: true,
              tg_msg_id: BigInt(message.message_id),
              data: message,
              created_at: new Date(message.date * 1000),
              updated_at: new Date(),
            },
          });

          console.log('‚úÖ [WEBAPP BOT] Message saved to DB');
        } catch (error) {
          console.error('‚ùå [WEBAPP BOT] Message save error:', error);
        }
      }

      // üÜï –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–†–ò–í–ï–¢–°–¢–í–ï–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø —Å –∫–Ω–æ–ø–∫–∞–º–∏ —á–µ—Ä–µ–∑ TelegramBotWorker
      if (from && message.text) {
        try {
          console.log('üéâ [WEBAPP BOT] Sending welcome message to:', from.id);
          
          // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
          if (message.text.trim() === '/start') {
            console.log('üéâ [WEBAPP BOT] Sending welcome message for /start');
          } else {
            console.log('üìß [WEBAPP BOT] Sending auto-reply');
          }

          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º TelegramBotWorker.processWebhookUpdate –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
          // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
          await botWorker.processWebhookUpdate(body);
          console.log('‚úÖ [WEBAPP BOT] Welcome message sent successfully');

        } catch (replyError) {
          console.error('‚ùå [WEBAPP BOT] Welcome message error:', replyError);
        }
      }

      return NextResponse.json({ ok: true });
    }

    console.log('‚ÑπÔ∏è [WEBAPP BOT] Unknown webhook type, ignoring');
    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('‚ùå [WEBAPP BOT] Webhook error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// GET - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webapp webhook
export async function GET() {
  return NextResponse.json({ 
    status: 'ok', 
    message: 'Webapp Telegram webhook is ready',
    bot: 'webapp',
    timestamp: new Date().toISOString()
  });
} 