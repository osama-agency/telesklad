import { NextRequest, NextResponse } from 'next/server';
import { TelegramBotService } from '@/lib/services/telegram-bot.service';
import { prisma } from '@/libs/prismaDb';

// POST - –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üì® Telegram webhook received:', JSON.stringify(body, null, 2));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)
    if (body.callback_query) {
      console.log('üîÑ Processing callback query:', body.callback_query.data);
      await TelegramBotService.handleCallback(body.callback_query);
      return NextResponse.json({ ok: true });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (body.message) {
      console.log('üí¨ Processing message:', body.message.text);
      
      const message = body.message;
      const from = message.from;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
      if (from) {
        try {
          await (prisma as any).users.upsert({
            where: { tg_id: BigInt(from.id) },
            update: {
              first_name: from.first_name || null,
              last_name: from.last_name || null,
              username: from.username || null,
              updated_at: new Date(),
            },
            create: {
              tg_id: BigInt(from.id),
              first_name: from.first_name || null,
              last_name: from.last_name || null,
              username: from.username || null,
              created_at: new Date(),
              updated_at: new Date(),
            },
          });
        } catch (error) {
          console.error('Error upserting user:', error);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (message.text) {
        try {
          const savedMessage = await (prisma as any).messages.create({
            data: {
              text: message.text,
              tg_id: from ? BigInt(from.id) : null,
              is_incoming: true, // –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              tg_msg_id: BigInt(message.message_id),
              data: message,
              created_at: new Date(message.date * 1000), // Telegram timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
              updated_at: new Date(),
            },
          });
          
          console.log('‚úÖ Message saved to DB:', savedMessage.id.toString());
        } catch (error) {
          console.error('‚ùå Error saving message to DB:', error);
        }
      }

      return NextResponse.json({ ok: true });
    }

    console.log('‚ÑπÔ∏è Unknown webhook type, ignoring');
    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('‚ùå Error processing Telegram webhook:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// GET - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webhook
export async function GET() {
  return NextResponse.json({ 
    status: 'ok', 
    message: 'Telegram webhook is ready',
    timestamp: new Date().toISOString()
  });
} 