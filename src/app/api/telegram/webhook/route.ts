import { NextRequest, NextResponse } from 'next/server';
import { TelegramBotService } from '@/lib/services/telegram-bot.service';
import { TelegramTokenService } from '@/lib/services/telegram-token.service';
import { prisma } from '@/libs/prismaDb';

// POST - –æ–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üì® Telegram webhook received:', JSON.stringify(body, null, 2));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries –æ—Ç –∫–Ω–æ–ø–æ–∫
    if (body.callback_query) {
      console.log('üîò Processing callback query:', body.callback_query.data);
      
      const callbackQuery = body.callback_query;
      const data = callbackQuery.data;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ö–∞—Ä–≥–æ"
      if (data && data.startsWith('shipped_')) {
        const purchaseId = parseInt(data.replace('shipped_', ''));
        console.log(`üöö Processing "shipped" callback for purchase #${purchaseId}`);
        
        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ –Ω–∞ "in_transit"
          const updatedPurchase = await (prisma as any).purchases.update({
            where: { id: purchaseId },
            data: {
              status: 'in_transit',
              updatedat: new Date()
            }
          });
          
          console.log(`‚úÖ Purchase #${purchaseId} status updated to "in_transit"`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const confirmationText = `‚úÖ –ó–∞–∫—É–ø–∫–∞ #${purchaseId} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ "–í –ø—É—Ç–∏"`;
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          const botToken = await TelegramTokenService.getTelegramBotToken();
          
          if (!botToken) {
            throw new Error('Bot token not found');
          }
          
          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
          await fetch(`https://api.telegram.org/bot${botToken}/answerCallbackQuery`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              callback_query_id: callbackQuery.id,
              text: confirmationText,
              show_alert: false
            })
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
          const originalMessage = callbackQuery.message;
          const updatedText = originalMessage.text + '\n\nüöö <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –í –ø—É—Ç–∏</b>';
          
          await fetch(`https://api.telegram.org/bot${botToken}/editMessageText`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: originalMessage.chat.id,
              message_id: originalMessage.message_id,
              text: updatedText,
              parse_mode: 'HTML'
            })
          });
          
        } catch (error) {
          console.error(`‚ùå Error updating purchase #${purchaseId} status:`, error);
          
          // –û—Ç–≤–µ—á–∞–µ–º —Å –æ—à–∏–±–∫–æ–π
          const botToken = await TelegramTokenService.getTelegramBotToken();
          if (botToken) {
            await fetch(`https://api.telegram.org/bot${botToken}/answerCallbackQuery`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                callback_query_id: callbackQuery.id,
                text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞',
                show_alert: true
              })
            });
          }
        }
      }
      
      return NextResponse.json({ ok: true });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (body.message) {
      console.log('üí¨ Processing message:', body.message.text);
      
      const message = body.message;
      const from = message.from;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
      if (from) {
        try {
          await (prisma as any).users.upsert({
            where: { tg_id: BigInt(from.id) },
            update: {
              first_name: from.first_name || null,
              last_name: from.last_name || null,
              username: from.username || null,
              updated_at: new Date(),
            },
            create: {
              tg_id: BigInt(from.id),
              first_name: from.first_name || null,
              last_name: from.last_name || null,
              username: from.username || null,
              created_at: new Date(),
              updated_at: new Date(),
            },
          });
        } catch (error) {
          console.error('Error upserting user:', error);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (message.text) {
        try {
          const savedMessage = await (prisma as any).messages.create({
            data: {
              text: message.text,
              tg_id: from ? BigInt(from.id) : null,
              is_incoming: true, // –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              tg_msg_id: BigInt(message.message_id),
              data: message,
              created_at: new Date(message.date * 1000), // Telegram timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
              updated_at: new Date(),
            },
          });
          
          console.log('‚úÖ Message saved to DB:', savedMessage.id.toString());
        } catch (error) {
          console.error('‚ùå Error saving message to DB:', error);
        }
      }

      return NextResponse.json({ ok: true });
    }

    console.log('‚ÑπÔ∏è Unknown webhook type, ignoring');
    return NextResponse.json({ ok: true });

  } catch (error) {
    console.error('‚ùå Error processing Telegram webhook:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// GET - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webhook
export async function GET() {
  return NextResponse.json({ 
    status: 'ok', 
    message: 'Telegram webhook is ready',
    timestamp: new Date().toISOString()
  });
} 