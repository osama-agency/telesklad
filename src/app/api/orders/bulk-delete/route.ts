import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function DELETE(request: NextRequest) {
  try {
    const { orderIds } = await request.json();
    
    console.log('üîç Bulk delete request received:', { orderIds, types: orderIds?.map((id: any) => typeof id) });

    if (!orderIds || !Array.isArray(orderIds) || orderIds.length === 0) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' },
        { status: 400 }
      );
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ ID –≤ —á–∏—Å–ª–∞
    const validIds: number[] = [];
    for (const id of orderIds) {
      let numId: number;
      if (typeof id === 'string') {
        numId = parseInt(id, 10);
      } else if (typeof id === 'number') {
        numId = id;
      } else {
        console.log('‚ùå Invalid ID type:', typeof id, id);
        return NextResponse.json(
          { error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø ID: ${typeof id}` },
          { status: 400 }
        );
      }
      
      if (isNaN(numId) || numId <= 0) {
        console.log('‚ùå Invalid ID value:', id, '‚Üí', numId);
        return NextResponse.json(
          { error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID: ${id}` },
          { status: 400 }
        );
      }
      
      validIds.push(numId);
    }
    
    console.log('‚úÖ Valid IDs:', validIds);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const existingOrders = await prisma.orders.findMany({
      where: {
        id: {
          in: validIds.map(id => BigInt(id))
        }
      },
      select: {
        id: true,
        externalid: true,
        status: true
      }
    });

    if (existingOrders.length === 0) {
      return NextResponse.json(
        { error: '–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' },
        { status: 404 }
      );
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–∞–º–∏ –∑–∞–∫–∞–∑—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (tx) => {
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ order_items
      await tx.order_items.deleteMany({
        where: {
          order_id: {
            in: validIds.map(id => BigInt(id))
          }
        }
      });

      // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã
      const deletedOrders = await tx.orders.deleteMany({
        where: {
          id: {
            in: validIds.map(id => BigInt(id))
          }
        }
      });

      return deletedOrders;
    });

    console.log(`‚úÖ Bulk deleted ${result.count} orders:`, validIds);

    return NextResponse.json({
      success: true,
      deletedCount: result.count,
      deletedIds: validIds,
      foundCount: existingOrders.length,
      message: `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${result.count} –∑–∞–∫–∞–∑–æ–≤`
    });

  } catch (error) {
    console.error('‚ùå Bulk delete orders error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
} 