import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { getServerSession } from 'next-auth';

const prisma = new PrismaClient();

interface ReceivePurchaseRequest {
  items: Array<{
    id: number; // ID —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–∫—É–ø–∫–∏
    receivedQuantity: number; // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  }>;
  logisticsExpense?: number; // –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É
  receivedAt: string; // –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (ISO string)
  notes?: string; // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
}

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession();
    if (!session) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const purchaseId = parseInt(params.id);
    if (isNaN(purchaseId)) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫—É–ø–∫–∏' }, { status: 400 });
    }

    const body: ReceivePurchaseRequest = await request.json();
    const { items, logisticsExpense, receivedAt, notes } = body;

    if (!items || items.length === 0) {
      return NextResponse.json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è' 
      }, { status: 400 });
    }

    if (!receivedAt) {
      return NextResponse.json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' 
      }, { status: 400 });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤
    if (items.some(item => item.receivedQuantity < 0)) {
      return NextResponse.json({ 
        error: '–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º' 
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–∫—É–ø–∫—É
    const purchase = await prisma.purchases.findUnique({
      where: { id: purchaseId },
      include: { 
        purchase_items: {
          include: {
            products: true
          }
        }
      }
    });

    if (!purchase) {
      return NextResponse.json({ error: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
    }

    if (!purchase.status || !['paid', 'in_transit'].includes(purchase.status)) {
      return NextResponse.json({ 
        error: '–ó–∞–∫—É–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω–∞ –∏–ª–∏ –≤ –ø—É—Ç–∏ –¥–ª—è –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è' 
      }, { status: 400 });
    }

    const receivedDate = new Date(receivedAt);
    const createdDate = new Date(purchase.createdat);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    const deliveryDays = Math.ceil((receivedDate.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24));

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—É–ø–∫—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (tx) => {
      // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏
      const updatedPurchase = await tx.purchases.update({
        where: { id: purchaseId },
        data: {
          status: 'received',
          updatedat: receivedDate,
        },
        include: { 
          purchase_items: {
            include: {
              products: true
            }
          }
        }
      });

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      const receivedItems = [];
      for (const receivedItem of items) {
        const purchaseItem = updatedPurchase.purchase_items.find((item: any) => item.id === receivedItem.id);
        if (!purchaseItem) {
          throw new Error(`–¢–æ–≤–∞—Ä —Å ID ${receivedItem.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫—É–ø–∫–µ`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
        if (receivedItem.receivedQuantity > 0) {
          await tx.products.update({
            where: { id: purchaseItem.productid },
            data: {
              stock_quantity: {
                increment: receivedItem.receivedQuantity
              }
            }
          });
        }

        receivedItems.push({
          id: purchaseItem.id,
          productId: purchaseItem.productid,
          productName: purchaseItem.products?.name,
          orderedQuantity: purchaseItem.quantity,
          receivedQuantity: receivedItem.receivedQuantity,
          difference: receivedItem.receivedQuantity - purchaseItem.quantity
        });
      }

      // 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      let logisticsExpenseRecord = null;
      if (logisticsExpense && logisticsExpense > 0) {
        logisticsExpenseRecord = await tx.expenses.create({
          data: {
            amount: logisticsExpense,
            description: `–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ #${purchaseId}`,
            category: '–õ–æ–≥–∏—Å—Ç–∏–∫–∞',
            date: receivedAt,
            userid: purchase.userid
          }
        });
      }

      return {
        purchase: updatedPurchase,
        receivedItems,
        logisticsExpense: logisticsExpenseRecord,
        deliveryDays
      };
    });

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    console.log(`üì¶ –ó–∞–∫—É–ø–∫–∞ #${purchaseId} –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∞:`);
    console.log(`   - –î–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏: ${deliveryDays}`);
    console.log(`   - –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${result.receivedItems.length}`);
    console.log(`   - –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É: ${logisticsExpense || 0} ‚ÇΩ`);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    const summary = {
      totalOrdered: result.receivedItems.reduce((sum, item) => sum + item.orderedQuantity, 0),
      totalReceived: result.receivedItems.reduce((sum, item) => sum + item.receivedQuantity, 0),
      partialItems: result.receivedItems.filter(item => item.difference < 0).length,
      overReceivedItems: result.receivedItems.filter(item => item.difference > 0).length,
      exactItems: result.receivedItems.filter(item => item.difference === 0).length
    };

    return NextResponse.json({
      success: true,
      data: {
        id: result.purchase.id,
        status: result.purchase.status,
        deliveryDays: result.deliveryDays,
        receivedDate,
        items: result.receivedItems,
        summary,
        logisticsExpense: logisticsExpense || 0,
        logisticsExpenseId: result.logisticsExpense?.id,
        notes,
      },
      message: `–ó–∞–∫—É–ø–∫–∞ #${purchaseId} —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∞ –∑–∞ ${deliveryDays} –¥–Ω–µ–π. –ü–æ–ª—É—á–µ–Ω–æ ${summary.totalReceived} –∏–∑ ${summary.totalOrdered} —Ç–æ–≤–∞—Ä–æ–≤.`,
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏–∏ –∑–∞–∫—É–ø–∫–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, 
      { status: 500 }
    );
  }
} 