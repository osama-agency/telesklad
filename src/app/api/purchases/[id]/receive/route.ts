import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { getServerSession } from 'next-auth';

const prisma = new PrismaClient();

interface ReceivePurchaseRequest {
  deliveryDays: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏
  receivedQuantities?: { [productId: number]: number }; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  additionalExpenses?: number; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É
  notes?: string; // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
}

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession();
    if (!session) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const purchaseId = parseInt(params.id);
    if (isNaN(purchaseId)) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫—É–ø–∫–∏' }, { status: 400 });
    }

    const body: ReceivePurchaseRequest = await request.json();
    const { deliveryDays, receivedQuantities, additionalExpenses, notes } = body;

    if (!deliveryDays || deliveryDays <= 0) {
      return NextResponse.json({ 
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏' 
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–∫—É–ø–∫—É
    const purchase = await prisma.purchase.findUnique({
      where: { id: purchaseId },
      include: { items: true }
    });

    if (!purchase) {
      return NextResponse.json({ error: '–ó–∞–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
    }

    if (purchase.status !== 'in_transit') {
      return NextResponse.json({ 
        error: '–ó–∞–∫—É–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ "–í –ø—É—Ç–∏" –¥–ª—è –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è' 
      }, { status: 400 });
    }

    const receivedDate = new Date();

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—É–ø–∫—É –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const updatedPurchase = await prisma.$transaction(async (tx) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
      const updated = await tx.purchase.update({
        where: { id: purchaseId },
        data: {
          status: 'received',
          expenses: additionalExpenses 
            ? (purchase.expenses || 0) + Number(additionalExpenses) 
            : purchase.expenses,
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –ø–æ–ª–µ updatedAt –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
          updatedAt: receivedDate,
        },
        include: { items: true }
      });

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
      if (receivedQuantities) {
        for (const item of updated.items) {
          const receivedQty = receivedQuantities[item.productId];
          if (receivedQty && receivedQty > 0) {
            await tx.product.update({
              where: { id: item.productId },
              data: {
                stock_quantity: {
                  increment: receivedQty
                }
              }
            });
          }
        }
      } else {
        // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        for (const item of updated.items) {
          await tx.product.update({
            where: { id: item.productId },
            data: {
              stock_quantity: {
                increment: item.quantity
              }
            }
          });
        }
      }

      return updated;
    });

    // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –∏–ª–∏ —Ñ–∞–π–ª–µ)
    console.log(`üìä –ó–∞–∫—É–ø–∫–∞ #${purchaseId} –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∞ –∑–∞ ${deliveryDays} –¥–Ω–µ–π`);
    
    // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    // await SupplierStatsService.updateDeliveryStats(supplier, deliveryDays, orderDate, receivedDate);

    return NextResponse.json({
      success: true,
      data: {
        id: updatedPurchase.id,
        status: updatedPurchase.status,
        deliveryDays: deliveryDays,
        receivedDate,
        totalItems: updatedPurchase.items.length,
        additionalExpenses,
        notes,
      },
      message: `–ó–∞–∫—É–ø–∫–∞ #${purchaseId} —É—Å–ø–µ—à–Ω–æ –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∞. –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω—è–ª–∞ ${deliveryDays} –¥–Ω–µ–π.`,
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è –∑–∞–∫—É–ø–∫–∏:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏–∏ –∑–∞–∫—É–ø–∫–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, 
      { status: 500 }
    );
  }
} 