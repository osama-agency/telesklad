import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/libs/prismaDb';
import { TelegramBotService } from '@/lib/services/telegram-bot.service';

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const resolvedParams = await params;
  console.log(`üì§ Sending purchase to supplier, ID: ${resolvedParams.id}`);

  try {
    const purchaseId = parseInt(resolvedParams.id);

    if (isNaN(purchaseId)) {
      return NextResponse.json(
        { error: 'Invalid purchase ID' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—É–ø–∫—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const purchase = await (prisma as any).purchases.findUnique({
      where: { id: purchaseId },
      include: {
        purchase_items: {
          include: {
            products: true
          }
        }
      }
    });

    if (!purchase) {
      return NextResponse.json(
        { error: 'Purchase not found' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫—É–ø–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ draft
    if (purchase.status !== 'draft') {
      return NextResponse.json(
        { error: `Purchase is already in status: ${purchase.status}` },
        { status: 400 }
      );
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
    const formattedPurchase = {
      id: purchase.id,
      totalAmount: purchase.totalamount || 0,
      status: 'sent_to_supplier',
      isUrgent: purchase.isurgent || false,
      createdAt: purchase.createdat.toISOString(),
      supplierName: purchase.suppliername,
      notes: purchase.notes,
      items: purchase.purchase_items.map((item: any) => ({
        productName: item.productname,
        quantity: item.quantity,
        costPrice: item.costprice || 0,
        total: item.total || 0
      }))
    };

    console.log(`üöÄ Sending purchase #${purchaseId} to supplier via Telegram`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫—É–ø–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫—É —á–µ—Ä–µ–∑ Telegram
    const telegramResult = await TelegramBotService.sendPurchaseToSupplier(formattedPurchase);

    if (!telegramResult.success) {
      return NextResponse.json(
        { error: 'Failed to send purchase to supplier via Telegram' },
        { status: 500 }
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–π –∑–∞–∫—É–ø–∫–µ
    try {
      const itemsWithTRY = purchase.purchase_items.map((item: any) => ({
        productName: item.productname,
        quantity: item.quantity,
        costPrice: item.unitcosttry || 0, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ª–∏—Ä–∞—Ö
        total: (item.unitcosttry || 0) * item.quantity
      }));

      const totalAmountTRY = itemsWithTRY.reduce((sum: number, item: any) => sum + item.total, 0);

      const groupNotificationData = {
        ...formattedPurchase,
        totalAmount: totalAmountTRY, // –æ–±—â–∞—è —Å—É–º–º–∞ –≤ –ª–∏—Ä–∞—Ö
        items: itemsWithTRY
      };

      const groupResult = await TelegramBotService.notifyGroupNewPurchase(groupNotificationData);
      if (groupResult.success) {
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—É–ø–∫–µ #${purchaseId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É`);
      } else {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—É–ø–∫–µ #${purchaseId} –≤ –≥—Ä—É–ø–ø—É`);
      }
    } catch (groupError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:', groupError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    const updatedPurchase = await (prisma as any).purchases.update({
      where: { id: purchaseId },
      data: {
        status: 'sent_to_supplier',
        telegrammessageid: telegramResult.messageId,
        telegramchatid: process.env.TELEGRAM_SUPPLIER_ID || '7828956680',
        updatedat: new Date()
      },
      include: {
        purchase_items: {
          include: {
            products: true
          }
        }
      }
    });

    console.log(`‚úÖ Purchase #${purchaseId} sent to supplier successfully`);

    return NextResponse.json({
      success: true,
      purchase: {
        id: updatedPurchase.id,
        status: updatedPurchase.status,
        telegramMessageId: updatedPurchase.telegrammessageid,
        telegramChatId: updatedPurchase.telegramchatid
      },
      message: 'Purchase sent to supplier successfully'
    });

  } catch (error: any) {
    console.error('‚ùå Error sending purchase to supplier:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: error.message },
      { status: 500 }
    );
  }
} 