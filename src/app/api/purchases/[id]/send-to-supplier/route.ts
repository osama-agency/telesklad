import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/libs/prismaDb';
import { TelegramService } from '@/lib/services/TelegramService';

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const resolvedParams = await params;
  console.log(`üì§ Sending purchase to supplier, ID: ${resolvedParams.id}`);

  try {
    const purchaseId = parseInt(resolvedParams.id);

    if (isNaN(purchaseId)) {
      return NextResponse.json(
        { error: 'Invalid purchase ID' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—É–ø–∫—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const purchase = await (prisma as any).purchases.findUnique({
      where: { id: purchaseId },
      include: {
        purchase_items: {
          include: {
            products: true
          }
        }
      }
    });

    if (!purchase) {
      return NextResponse.json(
        { error: 'Purchase not found' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫—É–ø–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ draft
    if (purchase.status !== 'draft') {
      return NextResponse.json(
        { error: `Purchase is already in status: ${purchase.status}` },
        { status: 400 }
      );
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
    const formattedPurchase = {
      id: purchase.id,
      totalAmount: purchase.totalamount || 0,
      status: 'sent_to_supplier',
      isUrgent: purchase.isurgent || false,
      createdAt: purchase.createdat.toISOString(),
      supplierName: purchase.suppliername,
      notes: purchase.notes,
      items: purchase.purchase_items.map((item: any) => ({
        productName: item.productname,
        quantity: item.quantity,
        costPrice: item.costprice || 0,
        total: item.total || 0
      }))
    };

    console.log(`üöÄ Sending purchase #${purchaseId} to group via Telegram`);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤ –ª–∏—Ä–∞—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
      const itemsWithTRY = purchase.purchase_items.map((item: any) => ({
        productName: item.productname,
        quantity: item.quantity,
        costPrice: item.unitcosttry || 0, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ª–∏—Ä–∞—Ö
        total: (item.unitcosttry || 0) * item.quantity
      }));

    const telegramPurchaseData = {
        ...formattedPurchase,
        items: itemsWithTRY
      };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫—É–ø–∫—É –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ Telegram
    const message = `üì¶ –ù–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞ #${purchase.id}\n\n–¢–æ–≤–∞—Ä—ã: ${telegramPurchaseData.items.length} –ø–æ–∑–∏—Ü–∏–π\n–°—É–º–º–∞: ${telegramPurchaseData.totalAmount}‚ÇΩ`;
    const telegramResult = await TelegramService.call(message, process.env.TELEGRAM_GROUP_ID);

    if (telegramResult instanceof Error) {
      return NextResponse.json(
        { error: 'Failed to send purchase to group via Telegram' },
        { status: 500 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—É–ø–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
    const updatedPurchase = await (prisma as any).purchases.update({
      where: { id: purchaseId },
      data: {
        status: 'sent_to_supplier',
        telegrammessageid: typeof telegramResult === 'number' ? telegramResult : null,
        telegramchatid: process.env.TELEGRAM_GROUP_CHAT_ID || '-4729817036',
        updatedat: new Date()
      },
      include: {
        purchase_items: {
          include: {
            products: true
          }
        }
      }
    });

    console.log(`‚úÖ Purchase #${purchaseId} sent to supplier successfully`);

    return NextResponse.json({
      success: true,
      purchase: {
        id: updatedPurchase.id,
        status: updatedPurchase.status,
        telegramMessageId: updatedPurchase.telegrammessageid,
        telegramChatId: updatedPurchase.telegramchatid
      },
      message: 'Purchase sent to supplier successfully'
    });

  } catch (error: any) {
    console.error('‚ùå Error sending purchase to supplier:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: error.message },
      { status: 500 }
    );
  }
} 