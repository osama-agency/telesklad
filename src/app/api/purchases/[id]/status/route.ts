import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/libs/prismaDb';
import { TelegramBotService } from '@/lib/services/telegram-bot.service';

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∫–∏
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const { status, telegramMessageId } = await request.json();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
    const session = await getServerSession();
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∑–∞–ø—Ä–æ—Å–∞–º
    const isInternalRequest = !session;
    if (!isInternalRequest && !session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—É–ø–∫—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    const purchase = await prisma.purchase.findUnique({
      where: { id: parseInt(id) },
      include: {
        items: true,
        user: true,
      }
    });

    if (!purchase) {
      return NextResponse.json({ error: 'Purchase not found' }, { status: 404 });
    }

    // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å—Ç–∞—Ç—É—Å "paid" —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –ª–∏—Ä—ã
    let exchangeRateToSave = null;
    if (status === 'paid' && purchase.status !== 'paid') {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –ª–∏—Ä—ã –∏–∑ –±–∞–∑—ã
        const latestRate = await prisma.exchangeRate.findFirst({
          where: { currency: 'TRY' },
          orderBy: { effectiveDate: 'desc' }
        });
        
        if (latestRate) {
          exchangeRateToSave = latestRate.rate;
          console.log(`üí∞ –ó–∞–∫—É–ø–∫–∞ #${id} –æ–ø–ª–∞—á–µ–Ω–∞. –ö—É—Ä—Å –ª–∏—Ä—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: ${exchangeRateToSave}`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –ª–∏—Ä—ã:', error);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const now = new Date();
    const updatedPurchase = await prisma.purchase.update({
      where: { id: parseInt(id) },
      data: {
        status,
        updatedAt: now,
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        ...(telegramMessageId && { telegramMessageId }),
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "sent", —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        // (–≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ updatedAt –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)
        ...(status === 'sent' && purchase.status !== 'sent' && {
          // –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç: orderDate: now
        }),
        // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "paid", —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –ª–∏—Ä—ã
        ...(exchangeRateToSave && {
          // –ü–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç: exchangeRate: exchangeRateToSave
        }),
      },
      include: {
        items: true,
        user: true,
      }
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–∫—É–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram
    const telegramPurchase = {
      id: updatedPurchase.id,
      totalAmount: updatedPurchase.totalAmount,
      status: updatedPurchase.status,
      isUrgent: updatedPurchase.isUrgent,
      items: updatedPurchase.items.map(item => ({
        productName: item.productName,
        quantity: item.quantity,
        costPrice: item.costPrice,
        total: item.total,
      })),
      createdAt: updatedPurchase.createdAt.toISOString(),
    };

    return NextResponse.json(telegramPurchase);
  } catch (error) {
    console.error('Error updating purchase status:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∫–∏
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;

    const purchase = await prisma.purchase.findUnique({
      where: { id: parseInt(id) },
      include: {
        items: true,
        user: true,
      }
    });

    if (!purchase) {
      return NextResponse.json({ error: 'Purchase not found' }, { status: 404 });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram
    const telegramPurchase = {
      id: purchase.id,
      totalAmount: purchase.totalAmount,
      status: purchase.status,
      isUrgent: purchase.isUrgent,
      items: purchase.items.map(item => ({
        productName: item.productName,
        quantity: item.quantity,
        costPrice: item.costPrice,
        total: item.total,
      })),
      createdAt: purchase.createdAt.toISOString(),
    };

    return NextResponse.json(telegramPurchase);
  } catch (error) {
    console.error('Error fetching purchase status:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
} 