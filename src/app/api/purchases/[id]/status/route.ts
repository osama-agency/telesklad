import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/libs/prismaDb';
import { TelegramBotService } from '@/lib/services/telegram-bot.service';
import InventoryTransitService from '@/lib/services/inventory-transit.service';

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∫–∏
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  console.log(`üöÄ PUT /api/purchases/[id]/status - ENTRY POINT`);
  const resolvedParams = await params;
  console.log(`üîÑ Updating purchase status for ID: ${resolvedParams.id}`);

  try {
    const { status } = await request.json();
    const purchaseId = parseInt(resolvedParams.id);
    
    console.log(`üì® Received request body:`, { status });
    console.log(`üî¢ Parsed purchase ID:`, purchaseId);

    if (isNaN(purchaseId)) {
      return NextResponse.json(
        { error: 'Invalid purchase ID' },
        { status: 400 }
      );
    }

    if (!status) {
      return NextResponse.json(
        { error: 'Status is required' },
        { status: 400 }
      );
    }

    console.log(`üìù Updating purchase #${purchaseId} status to: ${status}`);
    console.log(`üîç Current status check - incoming status: "${status}"`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–∫—É–ø–∫—É
    const currentPurchase = await (prisma as any).purchases.findUnique({
      where: { id: purchaseId },
      include: {
        purchase_items: {
          include: {
            products: true
          }
        }
      }
    });

    if (!currentPurchase) {
      return NextResponse.json(
        { error: 'Purchase not found' },
        { status: 404 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updatedPurchase = await (prisma as any).purchases.update({
      where: { id: purchaseId },
      data: {
        status,
        updatedat: new Date()
      },
      include: {
        purchase_items: {
          include: {
            products: true
          }
        }
      }
    });

    console.log(`‚úÖ Purchase #${purchaseId} status updated to: ${status}`);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
    const formattedPurchase = {
      id: updatedPurchase.id,
      totalAmount: updatedPurchase.totalamount || 0,
      status: updatedPurchase.status,
      isUrgent: updatedPurchase.isurgent || false,
      createdAt: updatedPurchase.createdat.toISOString(),
      supplierName: updatedPurchase.suppliername,
      notes: updatedPurchase.notes,
      items: updatedPurchase.purchase_items.map((item: any) => ({
        productName: item.productname,
        quantity: item.quantity,
        costPrice: item.costprice || 0,
        total: item.total || 0
      }))
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log(`üéØ Checking status switch for: "${status}"`);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    const previousStatus = currentPurchase.status;
    await handleTransitStatusChange(purchaseId, previousStatus, status);
    
    switch (status) {
      case 'sent':
        // –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø—É
        console.log('üì§ Purchase status changed to sent - sending group notification');
        
        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
          const itemsWithTRY = updatedPurchase.purchase_items.map((item: any) => ({
            productName: item.productname,
            quantity: item.quantity,
            costPrice: item.unitcosttry || 0, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ª–∏—Ä–∞—Ö
            total: (item.unitcosttry || 0) * item.quantity
          }));

          const totalAmountTRY = itemsWithTRY.reduce((sum: number, item: any) => sum + item.total, 0);

          const groupNotificationData = {
            ...formattedPurchase,
            status: 'sent_to_supplier',
            totalAmount: totalAmountTRY,
            items: itemsWithTRY
          };

          const groupResult = await TelegramBotService.notifyGroupNewPurchase(groupNotificationData);
          
          if (groupResult.success) {
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—É–ø–∫–µ #${purchaseId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É`);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            console.log(`üîç Saving to DB: messageId=${groupResult.messageId} (type: ${typeof groupResult.messageId}), chatId=${process.env.TELEGRAM_GROUP_CHAT_ID} (type: ${typeof process.env.TELEGRAM_GROUP_CHAT_ID})`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await (prisma as any).purchases.update({
              where: { id: purchaseId },
              data: {
                telegrammessageid: parseInt(groupResult.messageId?.toString() || '0'),
                telegramchatid: process.env.TELEGRAM_GROUP_CHAT_ID,
                updatedat: new Date()
              }
            });
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É`);
          }
        } catch (telegramError) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', telegramError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        }
        break;

      case 'awaiting_payment':
        // –ü–æ—Å—Ç–∞–≤—â–∏–∫ –æ—Ç–º–µ—Ç–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ–ø–ª–∞—Ç–µ - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        console.log('üí∞ Notifying admin about payment readiness');
        await TelegramBotService.notifyAdminPaymentReady(formattedPurchase);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        if (currentPurchase.telegrammessageid && currentPurchase.telegramchatid) {
          await TelegramBotService.updateSupplierPurchaseStatus(
            currentPurchase.telegramchatid,
            currentPurchase.telegrammessageid,
            formattedPurchase
          );
        }
        break;

      case 'paid':
        // –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É - —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        console.log('üí∏ Notifying supplier about payment confirmation');
        await TelegramBotService.notifySupplierPaymentConfirmed(formattedPurchase);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        if (currentPurchase.telegrammessageid && currentPurchase.telegramchatid) {
          await TelegramBotService.updateSupplierPurchaseStatus(
            currentPurchase.telegramchatid,
            currentPurchase.telegrammessageid,
            formattedPurchase
          );
        }
        break;

      case 'shipped':
        // –ü–æ—Å—Ç–∞–≤—â–∏–∫ –ø–µ—Ä–µ–¥–∞–ª –≤ –∫–∞—Ä–≥–æ - —É–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É
        console.log('üöö Notifying group about shipment');
        await TelegramBotService.notifyGroupShipped(formattedPurchase);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        if (currentPurchase.telegrammessageid && currentPurchase.telegramchatid) {
          await TelegramBotService.updateSupplierPurchaseStatus(
            currentPurchase.telegramchatid,
            currentPurchase.telegrammessageid,
            formattedPurchase
          );
        }
        break;

      case 'cancelled':
        // –ó–∞–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
        console.log('‚ùå Purchase cancelled');
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ
        break;

      default:
        console.log(`‚ÑπÔ∏è Status ${status} updated, no special notifications needed`);
    }

    return NextResponse.json({
      success: true,
      purchase: formattedPurchase,
      message: `Purchase status updated to ${status}`
    });

  } catch (error: any) {
    console.error('‚ùå Error updating purchase status:', error);
    return NextResponse.json(
      { error: 'Internal server error', details: error.message },
      { status: 500 }
    );
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∫–∏
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;

    const purchase = await (prisma as any).purchases.findUnique({
      where: { id: parseInt(id) },
      include: {
        purchase_items: true,
      }
    });

    if (!purchase) {
      return NextResponse.json({ error: 'Purchase not found' }, { status: 404 });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram
    const telegramPurchase = {
      id: purchase.id,
      totalAmount: purchase.totalamount,
      status: purchase.status,
      isUrgent: purchase.isurgent,
      items: purchase.purchase_items.map((item: any) => ({
        productName: item.productname,
        quantity: item.quantity,
        costPrice: item.costprice,
        total: item.total,
      })),
      createdAt: purchase.createdat.toISOString(),
    };

    return NextResponse.json(telegramPurchase);
  } catch (error) {
    console.error('Error fetching purchase status:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–µ
 */
async function handleTransitStatusChange(
  purchaseId: number, 
  previousStatus: string | null, 
  newStatus: string
): Promise<void> {
  try {
    console.log(`üöõ Transit status change: ${previousStatus} ‚Üí ${newStatus} for purchase #${purchaseId}`);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ç—Ä–∞–Ω–∑–∏—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    if (newStatus === 'sent' && previousStatus !== 'sent') {
      await InventoryTransitService.addItemsToTransit(purchaseId);
    }
    
    // –£–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç—Ä–∞–Ω–∑–∏—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å–∫–ª–∞–¥ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
    else if (newStatus === 'received' && previousStatus !== 'received') {
      await InventoryTransitService.removeItemsFromTransit(purchaseId);
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫—É–ø–∫–∏
    else if (newStatus === 'cancelled' && 
             previousStatus && 
             ['sent', 'awaiting_payment', 'paid', 'shipped'].includes(previousStatus)) {
      await InventoryTransitService.cancelItemsInTransit(purchaseId);
    }
    
    console.log(`‚úÖ Transit status change handled for purchase #${purchaseId}`);
  } catch (error) {
    console.error(`‚ùå Error handling transit status change for purchase #${purchaseId}:`, error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
  }
} 