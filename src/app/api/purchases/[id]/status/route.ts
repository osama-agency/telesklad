import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/libs/prismaDb';
import { ExchangeRateService } from '@/lib/services/exchange-rate.service';
import { Decimal } from '@prisma/client/runtime/library';

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫—É–ø–∫–∏
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    // const session = await getServerSession();
    // if (!session?.user?.email) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    const { id } = await params;
    const purchaseId = parseInt(id);
    if (isNaN(purchaseId)) {
      return NextResponse.json({ error: 'Invalid purchase ID' }, { status: 400 });
    }

    const { status, paidDate } = await request.json();

    if (!status) {
      return NextResponse.json({ error: 'Status is required' }, { status: 400 });
    }

    console.log(`üí± Updating purchase ${purchaseId} status to: ${status}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–∫—É–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const existingPurchase = await (prisma as any).purchases.findUnique({
      where: { id: purchaseId },
      include: {
        purchase_items: true
      }
    });

    if (!existingPurchase) {
      return NextResponse.json({ error: 'Purchase not found' }, { status: 404 });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {
      status,
      updatedat: new Date(),
    };

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "paid", —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –Ω–∞ –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç—ã
    if (status === 'paid') {
      const paidDateObj = paidDate ? new Date(paidDate) : new Date();
      updateData.paiddate = paidDateObj;

      // –ï—Å–ª–∏ —É –∑–∞–∫—É–ø–∫–∏ –µ—Å—Ç—å totalcosttry, –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
      if (existingPurchase.totalcosttry) {
        try {
          console.log('üìà Getting current TRY exchange rate for payment...');
          const exchangeRateData = await ExchangeRateService.getLatestRate('TRY');
          const currentRate = Number(exchangeRateData.rateWithBuffer);
          updateData.paidexchangerate = new Decimal(currentRate);
          
          console.log(`üí∞ Payment exchange rate saved: ${currentRate} for purchase ${purchaseId}`);
        } catch (error) {
          console.log('‚ö†Ô∏è Failed to get TRY exchange rate for payment:', error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫—É—Ä—Å–∞, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—É–ø–∫—É
    const updatedPurchase = await (prisma as any).purchases.update({
      where: { id: purchaseId },
      data: updateData,
      include: {
        purchase_items: {
          include: {
            products: {
              select: {
                id: true,
                name: true
              }
            }
          }
        },
        users: {
          select: {
            id: true,
            email: true,
            first_name: true,
            last_name: true
          }
        }
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const serializedPurchase = {
      ...updatedPurchase,
      id: updatedPurchase.id.toString(),
      userid: updatedPurchase.userid ? updatedPurchase.userid.toString() : null,
      purchase_items: updatedPurchase.purchase_items?.map((item: any) => ({
        ...item,
        id: item.id.toString(),
        purchaseid: item.purchaseid ? item.purchaseid.toString() : null,
        productid: item.productid ? item.productid.toString() : null,
      })) || [],
    };

    console.log(`‚úÖ Purchase ${purchaseId} status updated to: ${status}`);

    return NextResponse.json(serializedPurchase);
  } catch (error) {
    console.error('‚ùå Error updating purchase status:', error);
    console.error('‚ùå Error stack:', error instanceof Error ? error.stack : 'No stack trace');
    
    if (error instanceof Error) {
      return NextResponse.json({ 
        error: 'Internal Server Error', 
        details: error.message,
        type: error.constructor.name 
      }, { status: 500 });
    }
    
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}