import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/libs/prismaDb';

// GET - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫
export async function GET(request: NextRequest) {
  try {
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    // const session = await getServerSession();
    // if (!session?.user?.email) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    console.log('üì§ Purchases Export API: Starting...');

    const { searchParams } = new URL(request.url);
    const format = searchParams.get('format') || 'csv'; // csv, xlsx, pdf
    const ids = searchParams.get('ids'); // comma-separated IDs –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API
    const urgent = searchParams.get('urgent');
    const status = searchParams.get('status');
    const search = searchParams.get('search');
    const dateFrom = searchParams.get('dateFrom');
    const dateTo = searchParams.get('dateTo');
    const minAmount = searchParams.get('minAmount');
    const maxAmount = searchParams.get('maxAmount');

    console.log('üì§ Export filters:', { format, ids, urgent, status, search, dateFrom, dateTo, minAmount, maxAmount });

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereConditions: any = {};

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID
    if (ids) {
      const purchaseIds = ids.split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));
      if (purchaseIds.length > 0) {
        whereConditions.id = { in: purchaseIds };
      }
    } else {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      if (urgent !== null && urgent !== undefined) {
        whereConditions.isurgent = urgent === 'true';
      }
      if (status) {
        whereConditions.status = status;
      }
      if (dateFrom || dateTo) {
        whereConditions.createdat = {};
        if (dateFrom) {
          whereConditions.createdat.gte = new Date(dateFrom);
        }
        if (dateTo) {
          whereConditions.createdat.lte = new Date(dateTo);
        }
      }
      if (minAmount || maxAmount) {
        whereConditions.totalamount = {};
        if (minAmount) {
          whereConditions.totalamount.gte = parseFloat(minAmount);
        }
        if (maxAmount) {
          whereConditions.totalamount.lte = parseFloat(maxAmount);
        }
      }
      if (search) {
        whereConditions.OR = [
          {
            suppliername: {
              contains: search,
              mode: 'insensitive'
            }
          },
          {
            notes: {
              contains: search,
              mode: 'insensitive'
            }
          },
          {
            purchase_items: {
              some: {
                productname: {
                  contains: search,
                  mode: 'insensitive'
                }
              }
            }
          }
        ];
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    console.log('üîç Querying database with conditions:', JSON.stringify(whereConditions, null, 2));
    
    const purchases = await prisma.purchases.findMany({
      where: whereConditions,
      include: {
        purchase_items: true,
        users: {
          select: {
            id: true,
            email: true,
            first_name: true,
            last_name: true
          }
        }
      },
      orderBy: {
        createdat: 'desc'
      }
    });

    console.log(`üì§ Found ${purchases.length} purchases for export`);

    if (purchases.length === 0) {
      return NextResponse.json({ error: 'No purchases found for export' }, { status: 400 });
    }

    console.log(`üì§ Exporting ${purchases.length} purchases in ${format.toUpperCase()} format`);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportData = purchases.map((purchase: any) => {
      const items = purchase.purchase_items || [];
      const itemsText = items.map((item: any) => 
        `${item.productname || 'Unknown'} (${item.quantity} —à—Ç. √ó ${item.costprice || 0} ‚Ç∫)`
      ).join('; ');

      return {
        'ID': String(purchase.id),
        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': new Date(purchase.createdat).toLocaleDateString('ru-RU'),
        '–°—Ç–∞—Ç—É—Å': getStatusLabel(purchase.status),
        '–°—Ä–æ—á–Ω–∞—è': purchase.isurgent ? '–î–∞' : '–ù–µ—Ç',
        '–°—É–º–º–∞ (‚Ç∫)': Number(purchase.totalamount || 0).toFixed(2),
        '–ü–æ—Å—Ç–∞–≤—â–∏–∫': purchase.suppliername || '–ù–µ —É–∫–∞–∑–∞–Ω',
        '–¢–æ–≤–∞—Ä—ã': itemsText,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π': items.length,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': purchase.users ? 
          `${purchase.users.first_name || ''} ${purchase.users.last_name || ''}`.trim() || purchase.users.email : 
          '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è': purchase.notes || '',
        '–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': purchase.supplierphone || '',
        '–ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': purchase.supplieraddress || '',
        '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏': purchase.deliverydate ? new Date(purchase.deliverydate).toLocaleDateString('ru-RU') : '',
        '–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä': purchase.deliverytrackingnumber || '',
        '–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏': purchase.deliverystatus || '',
        '–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫': purchase.deliverycarrier || '',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –¥–æ—Å—Ç–∞–≤–∫–µ': purchase.deliverynotes || ''
      };
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
    if (format === 'csv') {
      return generateCSV(exportData);
    } else if (format === 'xlsx') {
      return generateXLSX(exportData);
    } else if (format === 'pdf') {
      return generatePDF(exportData);
    } else {
      return NextResponse.json({ error: 'Unsupported format' }, { status: 400 });
    }

  } catch (error) {
    console.error('‚ùå Error exporting purchases:', error);
    return NextResponse.json({ error: 'Export failed' }, { status: 500 });
  }
}

// POST - –º–∞—Å—Å–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
export async function POST(request: NextRequest) {
  try {
    const { 
      format = 'csv', 
      filters = {}, 
      columns = [], 
      title = '–ó–∞–∫—É–ø–∫–∏',
      includeDetails = true 
    } = await request.json();

    console.log('üì§ Purchases Export API (POST): Starting with custom parameters...');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
    const whereConditions: any = {};
    
    if (filters.ids && Array.isArray(filters.ids)) {
      whereConditions.id = { in: filters.ids };
    } else {
      if (filters.urgent !== undefined) {
        whereConditions.isurgent = filters.urgent;
      }
      if (filters.status) {
        whereConditions.status = filters.status;
      }
      if (filters.dateFrom || filters.dateTo) {
        whereConditions.createdat = {};
        if (filters.dateFrom) {
          whereConditions.createdat.gte = new Date(filters.dateFrom);
        }
        if (filters.dateTo) {
          whereConditions.createdat.lte = new Date(filters.dateTo);
        }
      }
      if (filters.minAmount || filters.maxAmount) {
        whereConditions.totalamount = {};
        if (filters.minAmount) {
          whereConditions.totalamount.gte = filters.minAmount;
        }
        if (filters.maxAmount) {
          whereConditions.totalamount.lte = filters.maxAmount;
        }
      }
    }

    const purchases = await prisma.purchases.findMany({
      where: whereConditions,
      include: {
        purchase_items: includeDetails ? {
          include: {
            products: {
              select: {
                id: true,
                name: true
              }
            }
          }
        } : false,
        users: {
          select: {
            id: true,
            email: true,
            first_name: true,
            last_name: true
          }
        }
      },
      orderBy: {
        createdat: 'desc'
      }
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const defaultColumns = [
      'ID', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–°—Ç–∞—Ç—É—Å', '–°—Ä–æ—á–Ω–∞—è', '–°—É–º–º–∞ (‚Ç∫)', 
      '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–¢–æ–≤–∞—Ä—ã', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    ];
    const selectedColumns = columns.length > 0 ? columns : defaultColumns;

    const exportData = purchases.map((purchase: any) => {
      const fullData: any = {
        'ID': String(purchase.id),
        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': new Date(purchase.createdat).toLocaleDateString('ru-RU'),
        '–°—Ç–∞—Ç—É—Å': getStatusLabel(purchase.status),
        '–°—Ä–æ—á–Ω–∞—è': purchase.isurgent ? '–î–∞' : '–ù–µ—Ç',
        '–°—É–º–º–∞ (‚Ç∫)': Number(purchase.totalamount || 0).toFixed(2),
        '–ü–æ—Å—Ç–∞–≤—â–∏–∫': purchase.suppliername || '–ù–µ —É–∫–∞–∑–∞–Ω',
        '–¢–æ–≤–∞—Ä—ã': includeDetails && purchase.purchase_items ? 
          purchase.purchase_items.map((item: any) => 
            `${item.productname || 'Unknown'} (${item.quantity} —à—Ç. √ó ${item.costprice || 0} ‚Ç∫)`
          ).join('; ') : '–ù–µ –≤–∫–ª—é—á–µ–Ω—ã',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π': purchase.purchase_items ? purchase.purchase_items.length : 0,
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': purchase.users ? 
          `${purchase.users.first_name || ''} ${purchase.users.last_name || ''}`.trim() || purchase.users.email : 
          '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω',
        '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è': purchase.notes || '',
        '–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': purchase.supplierphone || '',
        '–ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞': purchase.supplieraddress || ''
      };

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      const filteredData: any = {};
      selectedColumns.forEach((column: string) => {
        if (fullData.hasOwnProperty(column)) {
          filteredData[column] = fullData[column];
        }
      });
      return filteredData;
    });

    console.log(`üì§ Exporting ${purchases.length} purchases in ${format.toUpperCase()} format with custom parameters`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
    if (format === 'csv') {
      return generateCSV(exportData, title);
    } else if (format === 'xlsx') {
      return generateXLSX(exportData, title);
    } else if (format === 'pdf') {
      return generatePDF(exportData, title);
    } else {
      return NextResponse.json({ error: 'Unsupported format' }, { status: 400 });
    }

  } catch (error) {
    console.error('‚ùå Error in POST export:', error);
    return NextResponse.json({ error: 'Export failed' }, { status: 500 });
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤

function getStatusLabel(status: string): string {
  const statusLabels: { [key: string]: string } = {
    'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
    'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    'paid': '–û–ø–ª–∞—á–µ–Ω–æ',
    'in_transit': '–í –ø—É—Ç–∏',
    'received': '–ü–æ–ª—É—á–µ–Ω–æ',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ'
  };
  return statusLabels[status] || status;
}

function generateCSV(data: any[], title: string = '–ó–∞–∫—É–ø–∫–∏'): NextResponse {
  if (data.length === 0) {
    return NextResponse.json({ error: 'No data to export' }, { status: 400 });
  }

  const headers = Object.keys(data[0]);
  const csvRows = [headers.join(',')];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
  for (const row of data) {
    const csvRow = headers.map(header => {
      const value = row[header] || '';
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
      const escapedValue = String(value).replace(/"/g, '""');
      return `"${escapedValue}"`;
    }).join(',');
    csvRows.push(csvRow);
  }
  
  const csvContent = csvRows.join('\n');
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const filename = `${title}_${timestamp}.csv`;

  console.log('üì§ CSV headers:', headers);
  console.log('üì§ CSV rows count:', csvRows.length - 1);

  // –°–æ–∑–¥–∞–µ–º Buffer —Å BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ Excel
  const bom = Buffer.from([0xEF, 0xBB, 0xBF]); // UTF-8 BOM
  const contentBuffer = Buffer.from(csvContent, 'utf8');
  const buffer = Buffer.concat([bom, contentBuffer]);

  return new Response(buffer, {
    headers: {
      'Content-Type': 'text/csv; charset=utf-8',
      'Content-Disposition': `attachment; filename="${encodeURIComponent(filename)}"`,
      'Content-Length': buffer.length.toString()
    }
  }) as NextResponse;
}

function generateXLSX(data: any[], title: string = '–ó–∞–∫—É–ø–∫–∏'): NextResponse {
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º CSV —Å XLSX –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–∏–ø–∞ xlsx
  console.log('‚ö†Ô∏è XLSX export not fully implemented, returning CSV format');
  
  if (data.length === 0) {
    return NextResponse.json({ error: 'No data to export' }, { status: 400 });
  }

  const headers = Object.keys(data[0]);
  const csvRows = [headers.join('\t')]; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±—ã –¥–ª—è Excel
  
  for (const row of data) {
    const csvRow = headers.map(header => {
      const value = String(row[header] || '');
      // –î–ª—è Excel —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ —Ç–∞–±—ã
      return value.replace(/[\r\n\t]/g, ' ');
    }).join('\t');
    csvRows.push(csvRow);
  }
  
  const csvContent = csvRows.join('\n');
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const filename = `${title}_${timestamp}.xlsx`;

  const bom = Buffer.from([0xEF, 0xBB, 0xBF]); // UTF-8 BOM
  const contentBuffer = Buffer.from(csvContent, 'utf8');
  const buffer = Buffer.concat([bom, contentBuffer]);

  return new Response(buffer, {
    headers: {
      'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'Content-Disposition': `attachment; filename="${encodeURIComponent(filename)}"`,
      'Content-Length': buffer.length.toString()
    }
  }) as NextResponse;
}

function generatePDF(data: any[], title: string = '–ó–∞–∫—É–ø–∫–∏'): NextResponse {
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTML, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∫–∞–∫ PDF
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–∏–ø–∞ puppeteer –∏–ª–∏ jsPDF
  console.log('‚ö†Ô∏è PDF export not fully implemented, returning HTML format');
  
  if (data.length === 0) {
    return NextResponse.json({ error: 'No data to export' }, { status: 400 });
  }

  const headers = Object.keys(data[0]);
  const htmlContent = `<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>${title}</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    h1 { color: #333; text-align: center; }
    table { border-collapse: collapse; width: 100%; margin-top: 20px; font-size: 12px; }
    th, td { border: 1px solid #ddd; padding: 6px; text-align: left; word-wrap: break-word; }
    th { background-color: #f2f2f2; font-weight: bold; }
    tr:nth-child(even) { background-color: #f9f9f9; }
    .timestamp { text-align: center; color: #666; margin-top: 20px; }
  </style>
</head>
<body>
  <h1>${title}</h1>
  <table>
    <thead>
      <tr>
        ${headers.map(header => `<th>${header}</th>`).join('')}
      </tr>
    </thead>
    <tbody>
      ${data.map(row => `
        <tr>
          ${headers.map(header => {
            const value = String(row[header] || '');
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            const escapedValue = value
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/"/g, '&quot;');
            return `<td>${escapedValue}</td>`;
          }).join('')}
        </tr>
      `).join('')}
    </tbody>
  </table>
  <div class="timestamp">
    –°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}
  </div>
</body>
</html>`;

  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const filename = `${title}_${timestamp}.html`;

  const buffer = Buffer.from(htmlContent, 'utf8');

  return new Response(buffer, {
    headers: {
      'Content-Type': 'text/html; charset=utf-8',
      'Content-Disposition': `attachment; filename="${encodeURIComponent(filename)}"`,
      'Content-Length': buffer.length.toString()
    }
  }) as NextResponse;
} 