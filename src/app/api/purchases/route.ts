import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/libs/prismaDb';
import { ExchangeRateService } from '@/lib/services/exchange-rate.service';
import { CurrencyConverterService } from '@/lib/services/currency-converter.service';
import { Decimal } from '@prisma/client/runtime/library';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ BigInt –≤ —Å—Ç—Ä–æ–∫–∏
function serializeBigInt(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }
  
  if (typeof obj === 'bigint') {
    return obj.toString();
  }
  
  if (Array.isArray(obj)) {
    return obj.map(serializeBigInt);
  }
  
  if (typeof obj === 'object') {
    const serialized: any = {};
    for (const [key, value] of Object.entries(obj)) {
      serialized[key] = serializeBigInt(value);
    }
    return serialized;
  }
  
  return obj;
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫—É–ø–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
export async function GET(request: NextRequest) {
  try {
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    // const session = await getServerSession();
    // if (!session?.user?.email) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    console.log('üîß Purchases API: Starting...');

    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '50');
    const page = parseInt(searchParams.get('page') || '1');
    const offset = (page - 1) * limit;

    // üîç –ù–û–í–´–ï –§–ò–õ–¨–¢–†–´
    const urgent = searchParams.get('urgent'); // true/false
    const status = searchParams.get('status'); // draft, sent, paid, in_transit, received, cancelled
    const search = searchParams.get('search'); // –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
    const dateFrom = searchParams.get('dateFrom'); // —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç)
    const dateTo = searchParams.get('dateTo'); // —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–¥–æ)
    const minAmount = searchParams.get('minAmount'); // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
    const maxAmount = searchParams.get('maxAmount'); // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
    const sortBy = searchParams.get('sortBy') || 'createdat'; // –ø–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const sortOrder = searchParams.get('sortOrder') || 'desc'; // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereConditions: any = {};

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    if (urgent !== null) {
      whereConditions.isurgent = urgent === 'true';
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (status) {
      whereConditions.status = status;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    if (dateFrom || dateTo) {
      whereConditions.createdat = {};
      if (dateFrom) {
        whereConditions.createdat.gte = new Date(dateFrom);
      }
      if (dateTo) {
        whereConditions.createdat.lte = new Date(dateTo);
      }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—É–º–º–µ
    if (minAmount || maxAmount) {
      whereConditions.totalamount = {};
      if (minAmount) {
        whereConditions.totalamount.gte = parseFloat(minAmount);
      }
      if (maxAmount) {
        whereConditions.totalamount.lte = parseFloat(maxAmount);
      }
    }

    // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É (–ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã)
    if (search) {
      whereConditions.OR = [
        {
          suppliername: {
            contains: search,
            mode: 'insensitive'
          }
        },
        {
          notes: {
            contains: search,
            mode: 'insensitive'
          }
        },
        {
          purchase_items: {
            some: {
              productname: {
                contains: search,
                mode: 'insensitive'
              }
            }
          }
        }
      ];
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const orderBy: any = {};
    if (sortBy === 'totalAmount') {
      orderBy.totalamount = sortOrder;
    } else if (sortBy === 'status') {
      orderBy.status = sortOrder;
    } else if (sortBy === 'isUrgent') {
      orderBy.isurgent = sortOrder;
    } else {
      orderBy.createdat = sortOrder;
    }

    console.log('üîç Applied filters:', {
      urgent,
      status,
      search,
      dateFrom,
      dateTo,
      minAmount,
      maxAmount,
      sortBy,
      sortOrder
    });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï N+1: –ò—Å–ø–æ–ª—å–∑—É–µ–º include –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    try {
      console.log('üîç About to query purchases with conditions:', JSON.stringify(whereConditions, null, 2));
      console.log('üîç Order by:', JSON.stringify(orderBy, null, 2));
      console.log('üîç Pagination: offset =', offset, ', limit =', limit);
      
      const [purchases, totalCount] = await Promise.all([
        (prisma as any).purchases.findMany({
          where: whereConditions,
          orderBy: orderBy,
          skip: offset,
          take: limit,
          include: {
            purchase_items: {
              include: {
                products: {
                  select: {
                    id: true,
                    name: true,
                    prime_cost: true
                  }
                }
              }
            },
            users: {
              select: {
                id: true,
                email: true,
                first_name: true,
                last_name: true
              }
            }
          }
        }),
        (prisma as any).purchases.count({ where: whereConditions })
      ]);

      console.log('‚úÖ Raw purchases from DB:', purchases.length);
      console.log('‚úÖ Total count from DB:', totalCount);
      
      if (purchases.length > 0) {
        console.log('‚úÖ First purchase sample: Found data structure');
      }

      // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      console.log('üîÑ Converting purchases using CurrencyConverterService...');
      const serializedPurchases = await CurrencyConverterService.convertPurchasesBatch(purchases);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      const totalRubForAnalytics = serializedPurchases.reduce((sum, p) => sum + (p.totalAmountRub || 0), 0);
      const totalTryForAnalytics = serializedPurchases.reduce((sum, p) => {
        const rate = p.exchangeRate || 1; // 1 - –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        return sum + ((p.totalAmountRub || 0) / rate);
      }, 0);
      
      const averageExchangeRate = totalTryForAnalytics > 0 ? totalRubForAnalytics / totalTryForAnalytics : null;

      console.log(`‚úÖ Purchases API: Found ${serializedPurchases.length} purchases (filtered from ${totalCount} total)`);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é BigInt –∫–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º
      const responseData = serializeBigInt({
        purchases: serializedPurchases,
        analytics: {
          averageExchangeRate
        },
        pagination: {
          page,
          limit,
          totalCount,
          totalPages: Math.ceil(totalCount / limit),
          hasNextPage: page < Math.ceil(totalCount / limit),
          hasPrevPage: page > 1
        },
        filters: {
          urgent,
          status,
          search,
          dateFrom,
          dateTo,
          minAmount,
          maxAmount,
          sortBy,
          sortOrder
        }
      });
      
      return NextResponse.json(responseData);
    } catch (purchasesError) {
      console.log('‚ùå purchases table not found:', purchasesError);
      console.log('üìù Returning empty purchases array');
      return NextResponse.json({
        purchases: [],
        pagination: {
          page: 1,
          limit: 50,
          totalCount: 0,
          totalPages: 0,
          hasNextPage: false,
          hasPrevPage: false
        },
        filters: {
          urgent,
          status,
          search,
          dateFrom,
          dateTo,
          minAmount,
          maxAmount,
          sortBy,
          sortOrder
        }
      });
    }
  } catch (error) {
    console.error('‚ùå Error fetching purchases:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ UI
    return NextResponse.json({
      purchases: [],
      pagination: {
        page: 1,
        limit: 50,
        totalCount: 0,
        totalPages: 0,
        hasNextPage: false,
        hasPrevPage: false
      }
    });
  }
}

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–∫—É–ø–∫–∏
export async function POST(request: NextRequest) {
  try {
    // const session = await getServerSession();
    // if (!session?.user?.email) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    const { items, totalAmount, isUrgent, expenses, currency = 'RUB', supplierName, notes } = await request.json();

    if (!items || !Array.isArray(items) || items.length === 0) {
      return NextResponse.json({ error: 'Items are required' }, { status: 400 });
    }

    if (!totalAmount || typeof totalAmount !== 'number') {
      return NextResponse.json({ error: 'Total amount is required' }, { status: 400 });
    }

    console.log(`üí∞ Creating purchase with currency: ${currency}, total: ${totalAmount}`);

    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await (prisma as any).telesklad_users.findFirst({
      where: { email: 'go@osama.agency' }
    });

    if (!user) {
      return NextResponse.json({ error: 'Default user not found' }, { status: 404 });
    }

    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users –ø–æ email
    const mainUser = await (prisma as any).users.findFirst({
      where: { email: 'go@osama.agency' }
    });

    if (!mainUser) {
      return NextResponse.json({ error: 'Main user not found in users table' }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –¥–ª—è TRY
    let currentExchangeRate = null;
    let totalCostTry = null;

    if (currency === 'TRY') {
      try {
        console.log('üìà Getting current TRY exchange rate...');
        const exchangeRateData = await ExchangeRateService.getLatestRate('TRY');
        currentExchangeRate = Number(exchangeRateData.rateWithBuffer);
        totalCostTry = totalAmount; // –í –ª–∏—Ä–∞—Ö
        console.log(`üìà Current TRY rate: ${currentExchangeRate}, Total in TRY: ${totalCostTry}`);
      } catch (error) {
        console.log('‚ö†Ô∏è Failed to get TRY exchange rate:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫—É—Ä—Å–∞, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      }
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
    const purchase = await prisma.$transaction(async (tx) => {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫—É–ø–∫—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
      const purchaseData: any = {
        totalamount: totalAmount,
        isurgent: Boolean(isUrgent),
        expenses: expenses || null,
        userid: mainUser.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        suppliername: supplierName || null,
        notes: notes || null,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ –µ—Å–ª–∏ —ç—Ç–æ TRY
      if (currency === 'TRY' && currentExchangeRate && totalCostTry) {
        purchaseData.exchangerate = new Decimal(currentExchangeRate);
        purchaseData.totalcosttry = new Decimal(totalCostTry);
        console.log(`üí± Saving exchange rate: ${currentExchangeRate} and total TRY: ${totalCostTry}`);
      }

      const newPurchase = await (tx as any).purchases.create({
        data: purchaseData
      });

      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫—É–ø–∫–∏ - —Ü–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–≤ —Ä—É–±–ª—è—Ö)
      const purchaseItems = [];
      for (const item of items) {
        const purchaseItem = await (tx as any).purchase_items.create({
          data: {
            purchaseid: newPurchase.id,
            quantity: parseInt(item.quantity),
            costprice: parseFloat(item.costPrice), // –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
            total: parseFloat(item.total), // –ò—Ç–æ–≥–æ –≤ —Ä—É–±–ª—è—Ö
            productid: parseInt(item.productId),
            productname: item.productName || `Product ${item.productId}`
          }
        });
        purchaseItems.push(purchaseItem);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      // –í–ê–ñ–ù–û: –¶–µ–Ω—ã —É–∂–µ –≤ —Ä—É–±–ª—è—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
      for (const item of items) {
        const productId = parseInt(item.productId);
        const product = await (tx as any).products.findUnique({
          where: { id: productId }
        });

        if (!product) {
          console.log(`‚ö†Ô∏è Product with id ${productId} not found, skipping stock update`);
          continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
        }

        try {
          // –¶–µ–Ω–∞ —É–∂–µ –≤ —Ä—É–±–ª—è—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
          const priceInRub = parseFloat(item.costPrice);

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
          const currentStock = product.stock_quantity || 0;
          const currentAvgPrice = product.avgpurchasepricerub ? Number(product.avgpurchasepricerub) : 0;
        
          const newAvgPrice = ExchangeRateService.calculateMovingAverage(
            currentStock,
            currentAvgPrice,
            parseInt(item.quantity),
            priceInRub
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
          await (tx as any).products.update({
            where: { id: productId },
            data: {
              stock_quantity: currentStock + parseInt(item.quantity),
              avgpurchasepricerub: new Decimal(newAvgPrice),
              // prime_cost –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å - –æ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫—É–ø–∫–∏
            }
          });

          console.log(`üì¶ Updated product ${productId}: stock +${item.quantity}, avg price: ${newAvgPrice.toFixed(2)} RUB`);
        } catch (updateError) {
          console.log(`‚ö†Ô∏è Failed to update product ${productId} prices:`, updateError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã
        }
      }

      return {
        ...newPurchase,
        items: purchaseItems
      };
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const serializedPurchase = {
      ...purchase,
      id: purchase.id.toString(),
      userid: purchase.userid ? purchase.userid.toString() : null,
      items: purchase.items?.map((item: any) => ({
        ...item,
        id: item.id.toString(),
        purchaseid: item.purchaseid ? item.purchaseid.toString() : null,
        productid: item.productid ? item.productid.toString() : null,
      })) || [],
    };

    console.log(`‚úÖ Purchase created successfully with ID: ${purchase.id}, currency: ${currency}`);

    return NextResponse.json(serializedPurchase, { status: 201 });
  } catch (error) {
    console.error('‚ùå Error creating purchase:', error);
    console.error('‚ùå Error stack:', error instanceof Error ? error.stack : 'No stack trace');
    
    if (error instanceof Error) {
      console.error('‚ùå Error message:', error.message);
      
      if (error.message.includes('Product with id')) {
        return NextResponse.json(
          { error: error.message },
          { status: 400 }
        );
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      return NextResponse.json({ 
        error: 'Internal Server Error', 
        details: error.message,
        type: error.constructor.name 
      }, { status: 500 });
    }
    
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
} 