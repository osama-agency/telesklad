import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import LoyaltyService from '@/lib/services/loyaltyService';
import { S3Service } from '@/lib/services/s3';
import { WebappTelegramBotService } from '@/lib/services/webapp-telegram-bot.service';
import { NotificationSchedulerService } from '@/lib/services/notification-scheduler.service';

const prisma = new PrismaClient();

// –¢–æ—Ç –∂–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö API
const TEST_USER_ID = 9999;

// –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∫ –≤ Rails –ø—Ä–æ–µ–∫—Ç–µ
const ORDER_STATUSES = {
  0: 'unpaid',     // –Ω–µ –æ–ø–ª–∞—á–µ–Ω
  1: 'paid',       // –æ–ø–ª–∞—á–µ–Ω
  2: 'shipped',    // –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
  3: 'delivered',  // –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  4: 'cancelled'   // –æ—Ç–º–µ–Ω–µ–Ω
};

const STATUS_LABELS = {
  'unpaid': '–ù–µ –æ–ø–ª–∞—á–µ–Ω',
  'paid': '–û–ø–ª–∞—á–µ–Ω',
  'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω', 
  'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
  'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
};

// POST /api/webapp/orders - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –±–æ–Ω—É—Å–∞–º–∏
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { delivery_data, cart_items, bonus = 0, total } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!delivery_data || !cart_items || cart_items.length === 0) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.users.findUnique({
      where: { id: BigInt(TEST_USER_ID) },
      include: {
        account_tiers: true
      }
    });

    if (!user) {
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if (bonus > 0) {
      try {
        await LoyaltyService.validateBonusUsage(
          BigInt(TEST_USER_ID),
          bonus,
          total - bonus // –æ–±—â–∞—è —Å—É–º–º–∞ –±–µ–∑ —É—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤
        );
      } catch (error: any) {
        return NextResponse.json(
          { success: false, error: error.message },
          { status: 400 }
        );
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (tx) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏
      await tx.users.update({
        where: { id: BigInt(TEST_USER_ID) },
        data: {
          first_name: delivery_data.first_name,
          last_name: delivery_data.last_name,
          middle_name: delivery_data.middle_name,
          phone_number: delivery_data.phone_number,
          address: delivery_data.address,
          street: delivery_data.street,
          home: delivery_data.home,
          apartment: delivery_data.apartment,
          build: delivery_data.build,
          postal_code: delivery_data.postal_code,
          updated_at: new Date()
        }
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
      const hasDelivery = cart_items.length === 1 && cart_items[0].quantity === 1;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const order = await tx.orders.create({
        data: {
          user_id: BigInt(TEST_USER_ID),
          total_amount: total,
          status: 0, // unpaid
          has_delivery: hasDelivery,
          bonus: bonus,
          created_at: new Date(),
          updated_at: new Date(),
          externalid: `webapp_${Date.now()}_${TEST_USER_ID}`
        }
      });

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      for (const item of cart_items) {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        const product = await tx.products.findUnique({
          where: { id: BigInt(item.product_id) }
        });

        if (!product) {
          throw new Error(`–¢–æ–≤–∞—Ä ${item.product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
        if (product.stock_quantity < item.quantity) {
          throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${product.name}" –Ω–∞ —Å–∫–ª–∞–¥–µ`);
        }

        await tx.order_items.create({
          data: {
            order_id: order.id,
            product_id: BigInt(item.product_id),
            quantity: item.quantity,
            price: product.price,
            created_at: new Date(),
            updated_at: new Date(),
            name: product.name,
            total: Number(product.price) * item.quantity
          }
        });
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
      if (bonus > 0) {
        await LoyaltyService.deductBonus(
          BigInt(TEST_USER_ID),
          bonus,
          'order_deduct',
          'orders',
          order.id
        );
      }

      return order;
    });

    // üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –í TELEGRAM –ß–ï–†–ï–ó WEBAPP –ë–û–¢–ê
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const settings = await prisma.settings.findMany();
      const settingsMap = settings.reduce((acc, s) => {
        if (s.variable && s.value) {
          acc[s.variable] = s.value;
        }
        return acc;
      }, {} as Record<string, string>);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updatedUser = await prisma.users.findUnique({
        where: { id: BigInt(TEST_USER_ID) }
      });

      if (updatedUser && updatedUser.tg_id) {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const orderData = {
          id: Number(result.id),
          total_amount: total,
          items: cart_items.map((item: any) => {
            // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            const product = cart_items.find((ci: any) => ci.product_id === item.product_id);
            return {
              product_name: product?.name || item.name || '–¢–æ–≤–∞—Ä',
              quantity: item.quantity,
              price: Number(item.price || 0)
            };
          }),
          bonus: bonus
        };

        const userData = {
          tg_id: updatedUser.tg_id.toString(),
          full_name: `${updatedUser.first_name || ''} ${updatedUser.last_name || ''}`.trim() || '–ö–ª–∏–µ–Ω—Ç',
          full_address: buildFullAddress(updatedUser),
          phone_number: updatedUser.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω',
          postal_code: updatedUser.postal_code || undefined
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        const notificationResult = await WebappTelegramBotService.sendOrderCreated(
          orderData, 
          userData, 
          settingsMap
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        if (notificationResult.success && notificationResult.messageId) {
          await prisma.orders.update({
            where: { id: result.id },
            data: { msg_id: notificationResult.messageId }
          });
        }

        console.log(`‚úÖ Order #${Number(result.id)} notification sent:`, notificationResult.success);
      } else {
        console.log(`‚ÑπÔ∏è Order #${Number(result.id)} - user has no Telegram ID, skipping notification`);
      }
    } catch (notificationError) {
      console.error('‚ùå Order notification error:', notificationError);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }

    // üîî –ü–õ–ê–ù–ò–†–£–ï–ú –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –û –ù–ï–û–ü–õ–ê–ß–ï–ù–ù–û–ú –ó–ê–ö–ê–ó–ï
    try {
      await NotificationSchedulerService.schedulePaymentReminder(
        Number(result.id), 
        TEST_USER_ID
      );
      console.log(`üìÖ Payment reminders scheduled for order #${Number(result.id)}`);
    } catch (reminderError) {
      console.error('‚ùå Error scheduling payment reminders:', reminderError);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    return NextResponse.json({
      success: true,
      order: {
        id: Number(result.id),
        total_amount: Number(result.total_amount),
        status: 'unpaid',
        bonus_applied: bonus,
        created_at: result.created_at
      },
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    });

  } catch (error) {
    console.error('Order creation error:', error);
    return NextResponse.json(
      { success: false, error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞' },
      { status: 500 }
    );
  }
}

// GET /api/webapp/orders - –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏ (–∫–∞–∫ –≤ Rails: user.orders.includes(:order_items))
    const orders = await prisma.orders.findMany({
      where: {
        user_id: TEST_USER_ID
      },
      include: {
        order_items: {
          include: {
            products: {
              select: {
                id: true,
                name: true,
                price: true
              }
            }
          }
        },
        bank_cards: {
          select: {
            id: true,
            name: true,
            number: true
          }
        }
      },
      orderBy: {
        created_at: 'desc'
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ product_id –∏–∑ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    const allProductIds = new Set<number>();
    orders.forEach(order => {
      order.order_items.forEach(item => {
        allProductIds.add(Number(item.products.id));
      });
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const attachments = await prisma.active_storage_attachments.findMany({
      where: {
        record_type: 'Product',
        record_id: { in: Array.from(allProductIds) },
        name: 'image'
      },
      include: {
        active_storage_blobs: true
      }
    });

    // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É product_id -> blob_key
    const imageMap = new Map<number, string>();
    attachments.forEach(attachment => {
      imageMap.set(Number(attachment.record_id), attachment.active_storage_blobs.key);
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–∫–∞–∑—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const transformedOrders = orders.map(order => {
      const statusKey = ORDER_STATUSES[order.status as keyof typeof ORDER_STATUSES] || 'unpaid';
      
      return {
        id: Number(order.id),
        total_amount: Number(order.total_amount),
        status: statusKey,
        status_label: STATUS_LABELS[statusKey as keyof typeof STATUS_LABELS],
        created_at: order.created_at,
        paid_at: order.paid_at,
        shipped_at: order.shipped_at,
        tracking_number: order.tracking_number,
        has_delivery: order.has_delivery,
        bonus: order.bonus,
        msg_id: order.msg_id,
        bank_card: order.bank_cards ? {
          id: Number(order.bank_cards.id),
          name: order.bank_cards.name,
          number: order.bank_cards.number
        } : null,
        items: order.order_items.map(item => {
          const productId = Number(item.products.id);
          const blobKey = imageMap.get(productId);
          
          return {
            id: Number(item.id),
            product_id: productId,
            product_name: item.products.name,
            quantity: item.quantity,
            price: Number(item.price),
            total: Number(item.price) * item.quantity,
            image_url: blobKey ? S3Service.getImageUrl(blobKey) : undefined
          };
        }),
        items_count: order.order_items.length,
        total_items: order.order_items.reduce((sum, item) => sum + item.quantity, 0)
      };
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    const stats = {
      total_orders: orders.length,
      unpaid_orders: orders.filter(o => o.status === 0).length,
      paid_orders: orders.filter(o => o.status === 1).length,
      shipped_orders: orders.filter(o => o.status === 2).length,
      delivered_orders: orders.filter(o => o.status === 3).length,
      cancelled_orders: orders.filter(o => o.status === 4).length,
      total_amount: orders.reduce((sum, order) => sum + Number(order.total_amount), 0),
      total_bonus_earned: orders.reduce((sum, order) => sum + order.bonus, 0)
    };

    return NextResponse.json({
      success: true,
      orders: transformedOrders,
      stats: stats,
      count: transformedOrders.length
    });

  } catch (error) {
    console.error('Orders API error:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤' },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
function buildFullAddress(user: any): string {
  const parts = [];
  
  if (user.address) parts.push(user.address);
  if (user.street) parts.push(user.street);
  if (user.home) parts.push(`–¥–æ–º ${user.home}`);
  if (user.apartment) parts.push(`–∫–≤. ${user.apartment}`);
  if (user.build) parts.push(`–∫–æ—Ä–ø. ${user.build}`);
  
  return parts.join(', ') || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
} 