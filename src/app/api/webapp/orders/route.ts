import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/libs/prismaDb';
import LoyaltyService from '@/lib/services/loyaltyService';
import { S3Service } from '@/lib/services/s3';
import { TelegramService } from '@/lib/services/TelegramService';
import { ReportService } from '@/lib/services/ReportService';
import { NotificationSchedulerService } from '@/lib/services/notification-scheduler.service';
import { getServerSession } from "next-auth";



// –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∫ –≤ Rails –ø—Ä–æ–µ–∫—Ç–µ
const ORDER_STATUSES = {
  0: 'unpaid',     // –Ω–µ –æ–ø–ª–∞—á–µ–Ω
  1: 'paid',       // –æ–ø–ª–∞—á–µ–Ω
  2: 'processing', // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
  3: 'shipped',    // –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
  4: 'delivered',  // –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
  5: 'cancelled'   // –æ—Ç–º–µ–Ω–µ–Ω
};

const STATUS_LABELS = {
  'unpaid': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
  'paid': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã',
  'processing': '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
  'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω', 
  'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
  'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram initData
function extractTelegramUser(request: NextRequest) {
  const initData = request.headers.get('X-Telegram-Init-Data');
  
  if (initData) {
    try {
      const params = new URLSearchParams(initData);
      const user = params.get('user');
      if (user) {
        return JSON.parse(user);
      }
    } catch (error) {
      console.error('Error parsing Telegram initData:', error);
    }
  }
  
  return null;
}

// GET /api/webapp/orders - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    let userId = url.searchParams.get('user_id');
    let tgId = url.searchParams.get('tg_id');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram initData
    if (!userId && !tgId) {
      const telegramUser = extractTelegramUser(request);
      if (telegramUser?.id) {
        tgId = telegramUser.id.toString();
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (!userId && !tgId) {
      return NextResponse.json({ 
        error: 'user_id or tg_id parameter is required' 
      }, { status: 400 });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏–ª–∏ tg_id
    let user;
    if (userId) {
      user = await prisma.users.findUnique({
        where: { id: BigInt(userId) }
      });
    } else if (tgId) {
      user = await prisma.users.findUnique({
        where: { tg_id: BigInt(tgId) }
      });
    }

    if (!user) {
      return NextResponse.json({ 
        error: 'User not found' 
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
    const orders = await prisma.orders.findMany({
      where: {
        user_id: user.id
      },
      include: {
        order_items: {
          include: {
            products: {
              select: {
                id: true,
                name: true,
                image_url: true
              }
            }
          }
        }
      },
      orderBy: {
        created_at: 'desc'
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const allProductIds = orders.flatMap(order => 
      order.order_items.map(item => Number(item.products?.id)).filter(Boolean)
    );
    const uniqueProductIds = [...new Set(allProductIds)];
    
    const attachments = await prisma.active_storage_attachments.findMany({
      where: {
        record_type: 'Product',
        record_id: { in: uniqueProductIds },
        name: 'image'
      },
      include: {
        active_storage_blobs: true
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É product_id -> blob_key
    const imageMap = new Map<number, string>();
    attachments.forEach(attachment => {
      imageMap.set(Number(attachment.record_id), attachment.active_storage_blobs.key);
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedOrders = orders.map(order => {
      const orderItems = order.order_items.map(item => {
        const productId = Number(item.products?.id);
        const blobKey = imageMap.get(productId);
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç image_url –∏–∑ –±–∞–∑—ã, –∑–∞—Ç–µ–º –∏–∑ S3
        let imageUrl = item.products?.image_url;
        if (!imageUrl && blobKey) {
          imageUrl = S3Service.getImageUrl(blobKey);
        }
        
        const price = Number(item.price || 0);
        const quantity = item.quantity;
        const total = price * quantity;
        
        return {
          id: Number(item.id),
          product_id: Number(item.product_id),
          product_name: item.products?.name,
          image_url: imageUrl,
          quantity: quantity,
          price: price,
          total: total
        };
      });

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Å—É–º–º—É
      const totalItems = orderItems.reduce((sum, item) => sum + item.quantity, 0);
      const calculatedTotal = orderItems.reduce((sum, item) => sum + item.total, 0);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π
      const statusKey = ORDER_STATUSES[order.status as keyof typeof ORDER_STATUSES] || 'unpaid';
      const statusLabel = STATUS_LABELS[statusKey as keyof typeof STATUS_LABELS] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

      return {
        id: Number(order.id),
        total_amount: Number(order.total_amount) || calculatedTotal,
        status: statusKey,
        status_label: statusLabel,
        created_at: order.created_at,
        updated_at: order.updated_at,
        tracking_number: order.tracking_number,
        paid_at: order.paid_at,
        shipped_at: order.shipped_at,
        bonus: Number(order.bonus || 0),
        has_delivery: !!order.tracking_number,
        total_items: totalItems,
        items_count: orderItems.length,
        items: orderItems
      };
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      total_orders: formattedOrders.length,
      unpaid_orders: formattedOrders.filter(o => o.status === 'unpaid').length,
      paid_orders: formattedOrders.filter(o => o.status === 'paid').length,
      shipped_orders: formattedOrders.filter(o => o.status === 'shipped').length,
      delivered_orders: formattedOrders.filter(o => o.status === 'delivered').length,
      cancelled_orders: formattedOrders.filter(o => o.status === 'cancelled').length,
      total_amount: formattedOrders.reduce((sum, order) => sum + order.total_amount, 0),
      total_bonus_earned: formattedOrders.reduce((sum, order) => sum + order.bonus, 0)
    };

    return NextResponse.json({
      success: true,
      orders: formattedOrders,
      stats: stats,
      count: formattedOrders.length
    });

  } catch (error) {
    console.error('Orders GET error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to fetch orders',
        orders: [],
        total: 0
      },
      { status: 500 }
    );
  }
}

// POST /api/webapp/orders - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    let { user_id, tg_id, cart_items, delivery_address, total_amount } = body;

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram initData –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ç–µ–ª–µ
    if (!user_id && !tg_id) {
      const telegramUser = extractTelegramUser(request);
      if (telegramUser?.id) {
        tg_id = telegramUser.id.toString();
      }
    }

    if ((!user_id && !tg_id) || !cart_items || !Array.isArray(cart_items) || cart_items.length === 0) {
      return NextResponse.json({ 
        error: '(user_id or tg_id) and cart_items are required' 
      }, { status: 400 });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏–ª–∏ tg_id
    let user;
    if (user_id) {
      user = await prisma.users.findUnique({
        where: { id: BigInt(user_id) }
      });
    } else if (tg_id) {
      user = await prisma.users.findUnique({
        where: { tg_id: BigInt(tg_id) }
      });
    }

    if (!user) {
      return NextResponse.json({ 
        error: 'User not found' 
      }, { status: 404 });
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (tx) => {
      // üè¶ –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –ø–æ –æ—á–µ—Ä–µ–¥–∏
      const activeBankCard = await tx.bank_cards.findFirst({
        where: { active: true },
        orderBy: [
          { updated_at: 'asc' }, // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å
          { id: 'asc' }
        ]
      });

      if (!activeBankCard) {
        throw new Error('No active bank cards found. Please add an active bank card.');
      }

      // üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      let calculatedTotal = 0;
      const enrichedCartItems = [];
      
      for (const item of cart_items) {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const product = await tx.products.findUnique({
          where: { id: BigInt(item.product_id) },
          select: { price: true, name: true }
        });
        
        if (product && item.quantity) {
          const itemPrice = item.price || product.price || 0;
          calculatedTotal += itemPrice * item.quantity;
          enrichedCartItems.push({
            ...item,
            price: itemPrice,
            product_name: product.name
          });
        }
      }

      // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (500‚ÇΩ) - –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º
      const deliveryCost = 500;
      // total_amount –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã, –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ deliverycost
      const finalTotal = calculatedTotal;

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const fullAddress = buildFullAddress({
        postal_code: user.postal_code,
        address: user.address,
        street: user.street,
        home: user.home,
        apartment: user.apartment,
        build: user.build
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const fullName = [user.first_name, user.middle_name, user.last_name]
        .filter(Boolean)
        .join(' ') || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–µ
      const order = await tx.orders.create({
        data: {
          user_id: user.id,
          total_amount: finalTotal,
          status: 0, // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
          bank_card_id: activeBankCard.id, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
          customeraddress: fullAddress, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
          customername: fullName, // –ü–æ–ª–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
          customerphone: user.phone_number || null, // –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
          customeremail: user.email || null, // Email –∫–ª–∏–µ–Ω—Ç–∞
          customercity: user.address || null, // –ì–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞
          deliverycost: deliveryCost, // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 500‚ÇΩ
          created_at: new Date(),
          updated_at: new Date()
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã (–¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏)
      await tx.bank_cards.update({
        where: { id: activeBankCard.id },
        data: { updated_at: new Date() }
      });

      // –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
      const orderItems = await Promise.all(
        enrichedCartItems.map(async (item: any) => {
          return await tx.order_items.create({
            data: {
              order_id: order.id,
              product_id: BigInt(item.product_id),
              quantity: item.quantity,
              price: item.price, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—É—é —Ü–µ–Ω—É
              created_at: new Date(),
              updated_at: new Date()
            }
          });
        })
      );

      return { order, orderItems };
    });

    // üî• –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–∫–∞–∑ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const fullOrder = await prisma.orders.findUnique({
        where: { id: result.order.id },
        include: {
          users: true,
          order_items: {
            include: {
              products: true
            }
          },
          bank_cards: {
            select: {
              id: true,
              name: true,
              fio: true,
              number: true
            }
          }
        }
      });

      if (fullOrder) {
        console.log(`üìß Sending notifications for new order ${fullOrder.id}`);
        await ReportService.handleOrderStatusChange(fullOrder as any, -1); // -1 = –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–Ω–µ—Ç –∑–∞–∫–∞–∑–∞)
      }
    } catch (notificationError) {
      console.error('‚ùå Error sending order notifications:', notificationError);
      // –ù–µ –ª–æ–º–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å
    }

    return NextResponse.json({ 
      success: true, 
      order_id: Number(result.order.id),
      order: {
        id: Number(result.order.id),
        total_amount: Number(result.order.total_amount),
        status: result.order.status,
        created_at: result.order.created_at
      }
    });

  } catch (error) {
    console.error('Orders POST error:', error);
    return NextResponse.json(
      { error: 'Failed to create order' },
      { status: 500 }
    );
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
function buildFullAddress(data: any): string {
  const parts = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤ –Ω–∞—á–∞–ª–æ
  if (data.postal_code) parts.push(data.postal_code.toString());
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥/–∞–¥—Ä–µ—Å
  if (data.address) parts.push(data.address);
  if (data.city) parts.push(data.city);
  if (data.street) parts.push(data.street);
  if (data.home) parts.push(`–¥–æ–º ${data.home}`);
  if (data.build) parts.push(`–∫–æ—Ä–ø. ${data.build}`);
  if (data.apartment) parts.push(`–∫–≤. ${data.apartment}`);
  
  return parts.join(', ') || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
} 