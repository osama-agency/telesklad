import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { NotificationSchedulerService } from '@/lib/services/notification-scheduler.service';

const prisma = new PrismaClient();

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏
export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const { stock_quantity } = await request.json();
    const productId = parseInt(params.id);

    if (typeof stock_quantity !== 'number' || stock_quantity < 0) {
      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞' 
      }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
    const currentProduct = await prisma.products.findUnique({
      where: { id: BigInt(productId) }
    });

    if (!currentProduct) {
      return NextResponse.json({ 
        success: false, 
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }

    const oldQuantity = currentProduct.stock_quantity;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
    const updatedProduct = await prisma.products.update({
      where: { id: BigInt(productId) },
      data: { 
        stock_quantity: stock_quantity,
        updated_at: new Date()
      }
    });

    // üì¶ –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–°–¢–£–ü–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê (0 ‚Üí >0)
    const wasOutOfStock = oldQuantity === 0;
    const isNowInStock = stock_quantity > 0;
    
    if (wasOutOfStock && isNowInStock) {
      try {
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        await NotificationSchedulerService.scheduleRestockNotification(productId);
        console.log(`üì¶ Restock notifications scheduled for product #${productId} (${oldQuantity} ‚Üí ${stock_quantity})`);
      } catch (notificationError) {
        console.error('‚ùå Error scheduling restock notifications:', notificationError);
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      }
    }

    console.log(`üìä Product #${productId} stock updated: ${oldQuantity} ‚Üí ${stock_quantity}`);

    return NextResponse.json({
      success: true,
      product: {
        id: productId,
        stock_quantity: stock_quantity,
        updated_at: updatedProduct.updated_at,
        restock_notification_sent: wasOutOfStock && isNowInStock
      },
      message: '–û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
    });

  } catch (error) {
    console.error('‚ùå Product stock update error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞' 
      }, 
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–∞
export async function GET(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const productId = parseInt(params.id);

    const product = await prisma.products.findUnique({
      where: { id: BigInt(productId) },
      select: {
        id: true,
        name: true,
        stock_quantity: true,
        updated_at: true
      }
    });

    if (!product) {
      return NextResponse.json({ 
        success: false, 
        error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const subscribersCount = await prisma.product_subscriptions.count({
      where: { product_id: BigInt(productId) }
    });

    return NextResponse.json({
      success: true,
      product: {
        id: Number(product.id),
        name: product.name,
        stock_quantity: product.stock_quantity,
        updated_at: product.updated_at,
        subscribers_count: subscribersCount
      }
    });

  } catch (error) {
    console.error('‚ùå Product stock info error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ' 
      }, 
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
} 