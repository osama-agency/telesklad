import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { getServerSession } from 'next-auth';

const prisma = new PrismaClient();

interface UpdateProductRequest {
  stock_quantity?: number;
  price?: number;
  old_price?: number;
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const session = await getServerSession();
    if (!session) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const productId = parseInt(params.id);
    if (isNaN(productId)) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞' }, { status: 400 });
    }

    const body: UpdateProductRequest = await request.json();
    const { stock_quantity, price, old_price } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (stock_quantity !== undefined && (stock_quantity < 0 || !Number.isInteger(stock_quantity))) {
      return NextResponse.json({ 
        error: '–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º' 
      }, { status: 400 });
    }

    if (price !== undefined && price < 0) {
      return NextResponse.json({ 
        error: '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' 
      }, { status: 400 });
    }

    if (old_price !== undefined && old_price < 0) {
      return NextResponse.json({ 
        error: '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const existingProduct = await prisma.products.findUnique({
      where: { id: productId }
    });

    if (!existingProduct) {
      return NextResponse.json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {};
    
    if (stock_quantity !== undefined) {
      updateData.stock_quantity = stock_quantity;
    }
    
    if (price !== undefined) {
      updateData.price = price;
    }
    
    if (old_price !== undefined) {
      updateData.old_price = old_price;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (Object.keys(updateData).length === 0) {
      return NextResponse.json({ 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' 
      }, { status: 400 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    const updatedProduct = await prisma.products.update({
      where: { id: productId },
      data: {
        ...updateData,
        updated_at: new Date()
      }
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const changes = [];
    if (stock_quantity !== undefined) {
      changes.push(`–æ—Å—Ç–∞—Ç–æ–∫: ${existingProduct.stock_quantity} ‚Üí ${stock_quantity}`);
    }
    if (price !== undefined) {
      changes.push(`—Ü–µ–Ω–∞: ${existingProduct.price} ‚Üí ${price}‚ÇΩ`);
    }
    if (old_price !== undefined) {
      changes.push(`—Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${existingProduct.old_price || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ‚Üí ${old_price}‚ÇΩ`);
    }

    console.log(`üìù –¢–æ–≤–∞—Ä #${productId} (${existingProduct.name}) –æ–±–Ω–æ–≤–ª–µ–Ω: ${changes.join(', ')}`);

    return NextResponse.json({
      success: true,
      data: {
        id: updatedProduct.id,
        name: updatedProduct.name,
        stock_quantity: updatedProduct.stock_quantity,
        price: updatedProduct.price,
        old_price: updatedProduct.old_price,
        changes: changes
      },
      message: `–¢–æ–≤–∞—Ä "${existingProduct.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, 
      { status: 500 }
    );
  }
} 