import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/libs/auth';

const prisma = new PrismaClient();

interface UpdateProductRequest {
  stock_quantity?: number;
  price?: number;
  old_price?: number;
  prime_cost?: number;
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üîß Product update request started for ID:', params.id);
    
    // TODO: Enable authentication after NEXTAUTH_SECRET is configured

    const productId = parseInt(params.id);
    if (isNaN(productId)) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞' }, { status: 400 });
    }

    const body: UpdateProductRequest = await request.json();
    console.log('üîß Request body received:', body);
    
    const { stock_quantity, price, old_price, prime_cost } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (stock_quantity !== undefined && (stock_quantity < 0 || !Number.isInteger(stock_quantity))) {
      return NextResponse.json({ 
        error: '–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º' 
      }, { status: 400 });
    }

    if (price !== undefined && price < 0) {
      return NextResponse.json({ 
        error: '–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' 
      }, { status: 400 });
    }

    if (old_price !== undefined && old_price < 0) {
      return NextResponse.json({ 
        error: '–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' 
      }, { status: 400 });
    }

    if (prime_cost !== undefined && prime_cost < 0) {
      return NextResponse.json({ 
        error: '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π' 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    console.log('üîß Searching for product with ID:', productId);
    
    const existingProduct = await prisma.products.findUnique({
      where: { id: productId }
    });

    if (!existingProduct) {
      console.log('‚ùå Product not found for ID:', productId);
      return NextResponse.json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }
    
    console.log('‚úÖ Product found:', existingProduct.name);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {};
    
    if (stock_quantity !== undefined) {
      updateData.stock_quantity = stock_quantity;
    }
    
    if (price !== undefined) {
      updateData.price = price;
    }
    
    if (old_price !== undefined) {
      updateData.old_price = old_price;
    }

    if (prime_cost !== undefined) {
      updateData.prime_cost = prime_cost;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (Object.keys(updateData).length === 0) {
      return NextResponse.json({ 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' 
      }, { status: 400 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    console.log('üîß Executing database update with data:', updateData);
    
    const updatedProduct = await prisma.products.update({
      where: { id: productId },
      data: {
        ...updateData,
        updated_at: new Date()
      }
    });
    
    console.log('‚úÖ Product updated successfully');

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const changes = [];
    if (stock_quantity !== undefined) {
      changes.push(`–æ—Å—Ç–∞—Ç–æ–∫: ${existingProduct.stock_quantity} ‚Üí ${stock_quantity}`);
    }
    if (price !== undefined) {
      changes.push(`—Ü–µ–Ω–∞: ${existingProduct.price} ‚Üí ${price}‚ÇΩ`);
    }
    if (old_price !== undefined) {
      changes.push(`—Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${existingProduct.old_price || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ‚Üí ${old_price}‚ÇΩ`);
    }
    if (prime_cost !== undefined) {
      changes.push(`—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: ${existingProduct.prime_cost || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} ‚Üí ${prime_cost}‚ÇΩ`);
    }

    console.log(`üìù –¢–æ–≤–∞—Ä #${productId} (${existingProduct.name}) –æ–±–Ω–æ–≤–ª–µ–Ω: ${changes.join(', ')}`);

    return NextResponse.json({
      success: true,
      data: {
        id: Number(updatedProduct.id),
        name: updatedProduct.name,
        stock_quantity: updatedProduct.stock_quantity,
        price: updatedProduct.price,
        old_price: updatedProduct.old_price,
        prime_cost: updatedProduct.prime_cost,
        changes: changes
      },
      message: `–¢–æ–≤–∞—Ä "${existingProduct.name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`
    });

  } catch (error) {
    console.error('‚ùå Unexpected error in product update endpoint:', error);
    
    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    const errorInfo = {
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      name: error instanceof Error ? error.name : 'Unknown',
      stack: error instanceof Error ? error.stack : undefined,
    };
    
    console.error('Error details:', errorInfo);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
        details: errorInfo.message,
        errorType: errorInfo.name,
        timestamp: new Date().toISOString()
      }, 
      { status: 500 }
    );
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await prisma.$disconnect();
  }
} 