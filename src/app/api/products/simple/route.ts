import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/libs/prismaDb';
import { ExchangeRateService } from '@/lib/services/exchange-rate.service';

export async function GET(request: NextRequest) {
  try {
    console.log('üîß Simple Products API: Starting...');
    
    // const session = await getServerSession();
    
    // if (!session?.user?.email) {
    //   console.log('‚ùå Simple Products API: Unauthorized');
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    console.log('üîß Simple Products API: Fetching products...');
    
    // –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ joins –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–π - —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã (ancestry —Å–æ–¥–µ—Ä–∂–∏—Ç "/")
    const products = await (prisma as any).products.findMany({
      where: {
        deleted_at: null,
        is_visible: true,
        ancestry: {
          contains: '/' // —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã, –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        }
      },
      select: {
        id: true,
        name: true,
        prime_cost: true,
        avgpurchasepricerub: true,
        price: true,
        stock_quantity: true
      },
      take: 20,
      orderBy: {
        name: 'asc'
      }
    });

    console.log('üîß Simple Products API: Found', products.length, 'products');

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –ª–∏—Ä—ã —Å –±—É—Ñ–µ—Ä–æ–º (+5%)
    let tryRateWithBuffer = 2.02; // Fallback –∫—É—Ä—Å
    try {
      const latestRate = await ExchangeRateService.getLatestRate('TRY');
      tryRateWithBuffer = Number(latestRate.rateWithBuffer);
      console.log(`üí± Using TRY rate with buffer: ${tryRateWithBuffer} RUB per TRY`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Could not get TRY rate, using fallback: ${tryRateWithBuffer}`);
    }

    const simpleProducts = products.map((product: any) => {
      const primePrice = product.prime_cost ? Number(product.prime_cost.toString()) : 0;
      const avgPrice = product.avgpurchasepricerub ? Number(product.avgpurchasepricerub.toString()) : 0;
      
      // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ª–∏—Ä–∞—Ö (prime_cost)
      const primeCostTry = primePrice;
      
      // –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö = —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ª–∏—Ä–∞—Ö * –∫—É—Ä—Å –ª–∏—Ä—ã —Å –±—É—Ñ–µ—Ä–æ–º (+5%)
      const priceInRub = primeCostTry > 0 ? primeCostTry * tryRateWithBuffer : 0;
      
      console.log(`üí∞ ${product.name}: Prime cost ‚Ç∫${primeCostTry} ‚Üí Price ${priceInRub.toFixed(0)} RUB (rate: ${tryRateWithBuffer})`);
      
      return {
        id: product.id.toString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É
        name: product.name,
        prime_cost: primeCostTry, // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –ª–∏—Ä–∞—Ö
        priceInRub: priceInRub, // –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å + 5%)
        avgpurchasepricerub: avgPrice, // –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (—Å—Ç–∞—Ä–∞—è)
        avgCostInTry: primeCostTry, // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        inTransit: 0 // –ü–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ
      };
    });

    console.log('üîß Simple Products API: Processed', simpleProducts.length, 'products');

    return NextResponse.json({
      success: true,
      data: {
        products: simpleProducts,
        total: simpleProducts.length
      }
    });

  } catch (error) {
    console.error('‚ùå Simple Products API Error:', error);
    return NextResponse.json(
      { 
        error: 'Simple API Error',
        details: error instanceof Error ? error.message : 'Unknown error'
      }, 
      { status: 500 }
    );
  }
} 