import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/libs/prismaDb';

const STRATTERA_API_URL = 'https://strattera.tgapp.online/api/v1/products';
const STRATTERA_TOKEN = '8cM9wVBrY3p56k4L1VBpIBwOsw';

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
async function syncProductsFromAPI() {
  try {
    // –ó–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API Strattera
    const response = await fetch(STRATTERA_API_URL, {
      method: 'GET',
      headers: {
        'Authorization': STRATTERA_TOKEN, // –ë–µ–∑ "Bearer" –ø—Ä–µ—Ñ–∏–∫—Å–∞
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`Strattera API error: ${response.status}`);
    }

    const externalProducts = await response.json();

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≥–¥–µ ancestry is null –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /)
    const productsOnly = externalProducts.filter((p: any) => p.ancestry && p.ancestry.includes('/'));

    console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–æ ${externalProducts.length} –∑–∞–ø–∏—Å–µ–π, –∏–∑ –Ω–∏—Ö ${productsOnly.length} —è–≤–ª—è—é—Ç—Å—è —Ç–æ–≤–∞—Ä–∞–º–∏.`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    for (const extProduct of productsOnly) {
              await (prisma as any).products.upsert({
        where: { id: extProduct.id },
        update: {
          name: extProduct.name,
          description: extProduct.description,
          price: extProduct.price ? Number(extProduct.price) : null,
          prime_cost: extProduct.prime_cost ? Number(extProduct.prime_cost) : null,
          stock_quantity: extProduct.stock_quantity,
          updated_at: new Date(),
          deleted_at: extProduct.deleted_at ? new Date(extProduct.deleted_at) : null,
          ancestry: extProduct.ancestry,
          weight: extProduct.weight,
          dosage_form: extProduct.dosage_form,
          package_quantity: extProduct.package_quantity,
          main_ingredient: extProduct.main_ingredient,
          brand: extProduct.brand,
          old_price: extProduct.old_price ? Number(extProduct.old_price) : null,
        },
        create: {
          id: extProduct.id,
          name: extProduct.name,
          description: extProduct.description,
          price: extProduct.price ? Number(extProduct.price) : null,
          prime_cost: extProduct.prime_cost ? Number(extProduct.prime_cost) : null,
          stock_quantity: extProduct.stock_quantity,
          created_at: extProduct.created_at ? new Date(extProduct.created_at) : new Date(),
          updated_at: extProduct.updated_at ? new Date(extProduct.updated_at) : new Date(),
          deleted_at: extProduct.deleted_at ? new Date(extProduct.deleted_at) : null,
          ancestry: extProduct.ancestry,
          weight: extProduct.weight,
          dosage_form: extProduct.dosage_form,
          package_quantity: extProduct.package_quantity,
          main_ingredient: extProduct.main_ingredient,
          brand: extProduct.brand,
          old_price: extProduct.old_price ? Number(extProduct.old_price) : null,
          is_visible: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–≤–∞—Ä—ã –≤–∏–¥–∏–º—ã
        },
      });
    }

    return productsOnly.length;
  } catch (error) {
    console.error('Error syncing products:', error);
    throw error;
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
export async function GET(request: NextRequest) {
  try {
    console.log('üõçÔ∏è Products API: Starting request...');
    
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    // const session = await getServerSession();
    // 
    // if (!session?.user?.email) {
    //   console.log('‚ùå Products API: Unauthorized');
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    const { searchParams } = new URL(request.url);
    const showHidden = searchParams.get('showHidden') === 'true';
    
    console.log('üõçÔ∏è Products API: Params -', { showHidden });

    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫—É—Ä—Å –ª–∏—Ä—ã
    const exchangeRate = 2.02;
    console.log('üí± Exchange rate TRY:', exchangeRate);

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereConditions: any = {
      deleted_at: null,
      ancestry: {
        contains: '/' // —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã, –Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      }
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if (showHidden) {
      whereConditions.is_visible = false;
    } else {
      whereConditions.is_visible = true;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    console.log('üõçÔ∏è Products API: Fetching products...');
    const products = await (prisma as any).products.findMany({
      where: whereConditions,
      orderBy: {
        name: 'asc'
      }
    });
    console.log('üõçÔ∏è Products API: Found', products.length, 'products');

    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –∞–≥—Ä–µ–≥–∞—Ü–∏–π
    const productsWithCalculations = products.map((product: any) => {
      // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –ª–∏—Ä–∞—Ö
      const avgPurchasePrice = product.avgpurchasepricerub ? Number(product.avgpurchasepricerub.toString()) : 0;
      const primePrice = product.prime_cost ? Number(product.prime_cost.toString()) : 0;
      
      let avgPurchasePriceTry = 0;
      if (avgPurchasePrice > 0) {
        // avgPurchasePrice –≤ —Ä—É–±–ª—è—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–∏—Ä—ã
        avgPurchasePriceTry = avgPurchasePrice / exchangeRate;
      } else if (primePrice > 0) {
        // prime_cost —É–∂–µ –≤ –ª–∏—Ä–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        avgPurchasePriceTry = primePrice;
      }

      return {
        ...product,
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        id: product.id.toString(),
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –ø–æ–ª—è –≤ —á–∏—Å–ª–∞
        price: product.price ? Number(product.price.toString()) : null,
        prime_cost: primePrice,
        avgpurchasepricerub: avgPurchasePrice,
        avgPurchasePriceTry,
        inTransitQuantity: 0, // –ü–æ–∫–∞ –±–µ–∑ –∞–≥—Ä–µ–≥–∞—Ü–∏–π
        old_price: product.old_price ? Number(product.old_price.toString()) : null,
        show_in_webapp: product.show_in_webapp || false,
      };
    });

    console.log('üõçÔ∏è Products API: Successfully processed', productsWithCalculations.length, 'products');
    return NextResponse.json({
      success: true,
      data: {
        products: productsWithCalculations,
        total: productsWithCalculations.length
      }
    });
  } catch (error) {
    console.error('‚ùå Products API Error:', error);
    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');
    return NextResponse.json(
      { error: 'Internal Server Error' }, 
      { status: 500 }
    );
  }
}

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
export async function POST(request: NextRequest) {
  let productData: any = {};
  try {
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    // const session = await getServerSession();
    // 
    // if (!session?.user?.email) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    productData = await request.json();

    const product = await (prisma as any).products.create({
      data: {
        name: productData.name,
        description: productData.description,
        price: productData.price ? Number(productData.price) : null,
        prime_cost: productData.prime_cost ? Number(productData.prime_cost) : null,
        stock_quantity: productData.stock_quantity || 0,
        ancestry: productData.ancestry,
        weight: productData.weight,
        dosage_form: productData.dosage_form,
        package_quantity: productData.package_quantity,
        main_ingredient: productData.main_ingredient,
        brand: productData.brand,
        old_price: productData.old_price ? Number(productData.old_price) : null,
        is_visible: productData.is_visible !== undefined ? productData.is_visible : true,
        show_in_webapp: productData.show_in_webapp !== undefined ? productData.show_in_webapp : true,
        image_url: productData.image_url,
        created_at: new Date(),
        updated_at: new Date(),
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const serializedProduct = {
      ...product,
      id: product.id.toString(),
    };

    return NextResponse.json({
      success: true,
      message: 'Product created successfully',
      product: serializedProduct
    }, { status: 201 });
  } catch (error) {
    console.error('Error creating product:', error);
    console.error('Error details:', error instanceof Error ? error.message : 'Unknown error');
    console.error('Product data:', productData);
    return NextResponse.json(
      { 
        error: 'Internal Server Error',
        details: error instanceof Error ? error.message : 'Unknown error'
      }, 
      { status: 500 }
    );
  }
}

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
export async function PUT(request: NextRequest) {
  try {
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
    // const session = await getServerSession();
    // 
    // if (!session?.user?.email) {
    //   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    const productData = await request.json();
    
    if (!productData.id) {
      return NextResponse.json(
        { error: 'Product ID is required' }, 
        { status: 400 }
      );
    }

    const product = await (prisma as any).products.update({
      where: { id: parseInt(productData.id) },
      data: {
        name: productData.name,
        description: productData.description,
        price: productData.price ? Number(productData.price) : null,
        prime_cost: productData.prime_cost ? Number(productData.prime_cost) : null,
        stock_quantity: productData.stock_quantity,
        quantity_in_transit: productData.quantity_in_transit || 0,
        ancestry: productData.ancestry,
        weight: productData.weight,
        dosage_form: productData.dosage_form,
        package_quantity: productData.package_quantity,
        main_ingredient: productData.main_ingredient,
        brand: productData.brand,
        old_price: productData.old_price ? Number(productData.old_price) : null,
        is_visible: productData.is_visible !== undefined ? productData.is_visible : true,
        show_in_webapp: productData.show_in_webapp !== undefined ? productData.show_in_webapp : true,
        image_url: productData.image_url,
        updated_at: new Date(),
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const serializedProduct = {
      ...product,
      id: product.id.toString(),
      price: product.price ? Number(product.price.toString()) : null,
      prime_cost: product.prime_cost ? Number(product.prime_cost.toString()) : null,
      old_price: product.old_price ? Number(product.old_price.toString()) : null,
    };

    return NextResponse.json(serializedProduct);
  } catch (error) {
    console.error('Error updating product:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' }, 
      { status: 500 }
    );
  }
} 