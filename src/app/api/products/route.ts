import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { prisma } from '@/libs/prismaDb';

const STRATTERA_API_URL = 'https://strattera.tgapp.online/api/v1/products';
const STRATTERA_TOKEN = '8cM9wVBrY3p56k4L1VBpIBwOsw';

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
async function syncProductsFromAPI() {
  try {
    // –ó–∞–ø—Ä–æ—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É API Strattera
    const response = await fetch(STRATTERA_API_URL, {
      method: 'GET',
      headers: {
        'Authorization': STRATTERA_TOKEN, // –ë–µ–∑ "Bearer" –ø—Ä–µ—Ñ–∏–∫—Å–∞
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`Strattera API error: ${response.status}`);
    }

    const externalProducts = await response.json();

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≥–¥–µ ancestry is null –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç /)
    const productsOnly = externalProducts.filter((p: any) => p.ancestry && p.ancestry.includes('/'));

    console.log(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–æ ${externalProducts.length} –∑–∞–ø–∏—Å–µ–π, –∏–∑ –Ω–∏—Ö ${productsOnly.length} —è–≤–ª—è—é—Ç—Å—è —Ç–æ–≤–∞—Ä–∞–º–∏.`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    for (const extProduct of productsOnly) {
      await prisma.product.upsert({
        where: { id: extProduct.id },
        update: {
          name: extProduct.name,
          description: extProduct.description,
          price: extProduct.price ? Number(extProduct.price) : null,
          prime_cost: extProduct.prime_cost ? Number(extProduct.prime_cost) : null,
          stock_quantity: extProduct.stock_quantity,
          updated_at: new Date(),
          deleted_at: extProduct.deleted_at ? new Date(extProduct.deleted_at) : null,
          ancestry: extProduct.ancestry,
          weight: extProduct.weight,
          dosage_form: extProduct.dosage_form,
          package_quantity: extProduct.package_quantity,
          main_ingredient: extProduct.main_ingredient,
          brand: extProduct.brand,
          old_price: extProduct.old_price ? Number(extProduct.old_price) : null,
        },
        create: {
          id: extProduct.id,
          name: extProduct.name,
          description: extProduct.description,
          price: extProduct.price ? Number(extProduct.price) : null,
          prime_cost: extProduct.prime_cost ? Number(extProduct.prime_cost) : null,
          stock_quantity: extProduct.stock_quantity,
          created_at: extProduct.created_at ? new Date(extProduct.created_at) : new Date(),
          updated_at: extProduct.updated_at ? new Date(extProduct.updated_at) : new Date(),
          deleted_at: extProduct.deleted_at ? new Date(extProduct.deleted_at) : null,
          ancestry: extProduct.ancestry,
          weight: extProduct.weight,
          dosage_form: extProduct.dosage_form,
          package_quantity: extProduct.package_quantity,
          main_ingredient: extProduct.main_ingredient,
          brand: extProduct.brand,
          old_price: extProduct.old_price ? Number(extProduct.old_price) : null,
          is_visible: true, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–≤–∞—Ä—ã –≤–∏–¥–∏–º—ã
        },
      });
    }

    return productsOnly.length;
  } catch (error) {
    console.error('Error syncing products:', error);
    throw error;
  }
}

// GET - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
export async function GET(request: NextRequest) {
  try {
    console.log('üõçÔ∏è Products API: Starting request...');
    
    const session = await getServerSession();
    
    if (!session?.user?.email) {
      console.log('‚ùå Products API: Unauthorized');
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const showHidden = searchParams.get('showHidden') === 'true';
    const fromDate = searchParams.get('from');
    const toDate = searchParams.get('to');
    
    console.log('üõçÔ∏è Products API: Params -', { showHidden, fromDate, toDate });

    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    // await syncProductsFromAPI();

    // –°—Ç—Ä–æ–∏–º —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const whereConditions: any = {
      deleted_at: null,
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
    if (showHidden) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Å–∫—Ä—ã—Ç—ã–µ —Ç–æ–≤–∞—Ä—ã
      whereConditions.is_visible = false;
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã
      whereConditions.is_visible = true;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
    console.log('üõçÔ∏è Products API: Fetching products with conditions:', whereConditions);
    const products = await prisma.product.findMany({
      where: whereConditions,
      orderBy: {
        name: 'asc'
      }
    });
    console.log('üõçÔ∏è Products API: Found', products.length, 'products');

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    let totalExpenses = 0;
    let totalSoldQuantity = 0;

    if (fromDate && toDate) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–æ–ª–µ–º date —Ç–∏–ø–∞ String
      const fromDateStr = new Date(fromDate).toISOString().split('T')[0];
      const toDateStr = new Date(toDate).toISOString().split('T')[0];
      
      const expensesData = await prisma.expense.aggregate({
        where: {
          date: {
            gte: fromDateStr,
            lte: toDateStr,
          },
        },
        _sum: {
          amount: true,
        },
      });
      totalExpenses = expensesData._sum.amount ? Number(expensesData._sum.amount.toString()) : 0;
      console.log('üõçÔ∏è Products API: Total expenses:', totalExpenses);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
      const totalSalesData = await prisma.orderItem.aggregate({
        where: {
          order: {
            paidAt: {
              not: null
            },
            orderDate: {
              gte: new Date(fromDate),
              lte: new Date(toDate),
            }
          }
        },
        _sum: {
          quantity: true,
        },
      });
      totalSoldQuantity = totalSalesData._sum.quantity || 0;
      console.log('üõçÔ∏è Products API: Total sold quantity:', totalSoldQuantity);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
    console.log('üõçÔ∏è Products API: Processing', products.length, 'products with sales data...');
    const productsWithSales = await Promise.all(
      products.map(async (product) => {
        // –£—Å–ª–æ–≤–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
        const dateFilter: any = {};
        if (fromDate && toDate) {
          const from = new Date(fromDate);
          const to = new Date(toDate);
          
          // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ —Å—É—Ç–æ–∫)
          if (Math.abs(to.getTime() - from.getTime()) < 24 * 60 * 60 * 1000) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –¥–Ω—è –¥–ª—è from –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è –¥–ª—è to
            const startOfDay = new Date(from);
            startOfDay.setHours(0, 0, 0, 0);
            
            const endOfDay = new Date(to);
            endOfDay.setHours(23, 59, 59, 999);
            
            dateFilter.gte = startOfDay;
            dateFilter.lte = endOfDay;
          } else {
            // –û–±—ã—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            dateFilter.gte = from;
            dateFilter.lte = to;
          }
        } else {
          if (fromDate) {
            dateFilter.gte = new Date(fromDate);
          }
          if (toDate) {
            dateFilter.lte = new Date(toDate);
          }
        }

        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —à—Ç—É–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–∏–æ–¥–∞
        const salesData = await prisma.orderItem.aggregate({
          where: {
            productId: product.id.toString(),
            order: {
              paidAt: {
                not: null // —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (paid_at !== null)
              },
              ...(Object.keys(dateFilter).length > 0 && {
                orderDate: dateFilter
              })
            }
          },
          _sum: {
            quantity: true,
            total: true, // –æ–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ —Å —Ç–æ–≤–∞—Ä–∞
          },
        });

        const soldQuantity = salesData._sum.quantity || 0;
        const revenue = salesData._sum.total ? Number(salesData._sum.total.toString()) : 0;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
        const avgPurchasePrice = product.avgPurchasePriceRub ? Number(product.avgPurchasePriceRub.toString()) : 0;
        const primePrice = product.prime_cost ? Number(product.prime_cost.toString()) : 0;
        const costPrice = avgPurchasePrice || primePrice;
        const baseCost = costPrice * soldQuantity; // –±–∞–∑–æ–≤–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        
        // –î–æ–ª—è –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–¥–∞–∂–∞–º
        const expenseShare = totalSoldQuantity > 0 ? (soldQuantity / totalSoldQuantity) * totalExpenses : 0;
        
        // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (350‚ÇΩ –∑–∞ —à—Ç—É–∫—É)
        const deliveryCost = soldQuantity * 350;
        
        // –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
        const totalCosts = baseCost + expenseShare + deliveryCost;
        
        // –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å 1 —à—Ç—É–∫–∏
        const netProfitPerUnit = soldQuantity > 0 ? (revenue - totalCosts) / soldQuantity : 0;

        // –ù–û–í–´–ï –†–ê–°–ß–ï–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –û–°–¢–ê–¢–ö–û–í
        let avgConsumptionPerDay = 0;
        let recommendedOrderQuantity = 0;
        let daysUntilZero = 0;

        if (fromDate && toDate) {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
          const from = new Date(fromDate);
          const to = new Date(toDate);
          const daysDifference = Math.ceil((to.getTime() - from.getTime()) / (1000 * 60 * 60 * 24)) + 1;
          
          // –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å = –ø—Ä–æ–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
          avgConsumptionPerDay = daysDifference > 0 ? soldQuantity / daysDifference : 0;
          
          // –î–Ω–∏ –¥–æ –Ω—É–ª—è = —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ / —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å
          const currentStock = product.stock_quantity || 0;
          daysUntilZero = avgConsumptionPerDay > 0 ? Math.floor(currentStock / avgConsumptionPerDay) : (currentStock > 0 ? 999 : 0);
          
          // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ (–Ω–∞ 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥)
          // –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –µ—Å—Ç—å, –∑–∞–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –º–µ—Å—è—Ü + 20% –∑–∞–ø–∞—Å
          // –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–µ—Ç, –Ω–æ –æ—Å—Ç–∞—Ç–∫–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è, –∑–∞–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º 10 —à—Ç—É–∫
          if (avgConsumptionPerDay > 0) {
            const monthlyConsumption = avgConsumptionPerDay * 30;
            const safetyStock = monthlyConsumption * 0.2; // 20% –∑–∞–ø–∞—Å
            recommendedOrderQuantity = Math.ceil(monthlyConsumption + safetyStock - currentStock);
            
            // –ú–∏–Ω–∏–º—É–º 1 —à—Ç—É–∫–∞, –µ—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
            if (recommendedOrderQuantity < 0) recommendedOrderQuantity = 0;
          } else if (currentStock <= 5) {
            // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
            recommendedOrderQuantity = 10;
          }
        }

        return {
          ...product,
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Decimal –ø–æ–ª—è –≤ —á–∏—Å–ª–∞
          price: product.price ? Number(product.price.toString()) : null,
          prime_cost: product.prime_cost ? Number(product.prime_cost.toString()) : null,
          avgPurchasePriceRub: product.avgPurchasePriceRub ? Number(product.avgPurchasePriceRub.toString()) : null,
          old_price: product.old_price ? Number(product.old_price.toString()) : null,
          soldQuantity, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —à—Ç—É–∫
          revenue, // –æ–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
          baseCost, // —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
          expenseShare, // –¥–æ–ª—è –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
          deliveryCost, // —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
          totalCosts, // –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
          netProfitPerUnit, // —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å —Å 1 —à—Ç
          // –ù–û–í–´–ï –ü–û–õ–Ø
          avgConsumptionPerDay, // —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –¥–µ–Ω—å
          recommendedOrderQuantity, // —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∑–∞–∫–∞–∑–∞
          daysUntilZero, // –¥–Ω–µ–π –¥–æ –Ω—É–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤
        };
      })
    );

    console.log('üõçÔ∏è Products API: Successfully processed', productsWithSales.length, 'products');
    return NextResponse.json({
      success: true,
      data: {
        products: productsWithSales,
        total: productsWithSales.length
      }
    });
  } catch (error) {
    console.error('‚ùå Products API Error:', error);
    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');
    return NextResponse.json(
      { error: 'Internal Server Error' }, 
      { status: 500 }
    );
  }
}

// POST - —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession();
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const productData = await request.json();

    const product = await prisma.product.create({
      data: {
        name: productData.name,
        description: productData.description,
        price: productData.price ? Number(productData.price) : null,
        prime_cost: productData.prime_cost ? Number(productData.prime_cost) : null,
        stock_quantity: productData.stock_quantity,
        ancestry: productData.ancestry,
        weight: productData.weight,
        dosage_form: productData.dosage_form,
        package_quantity: productData.package_quantity,
        main_ingredient: productData.main_ingredient,
        brand: productData.brand,
        old_price: productData.old_price ? Number(productData.old_price) : null,
        is_visible: productData.is_visible !== undefined ? productData.is_visible : true,
      }
    });

    return NextResponse.json(product, { status: 201 });
  } catch (error) {
    console.error('Error creating product:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' }, 
      { status: 500 }
    );
  }
} 