"use client";

import { useState, useEffect, useCallback } from "react";
import Link from "next/link";
import { CartItemComponent } from "../_components/CartItemComponent";
import { IconComponent } from "@/components/webapp/IconComponent";
import SkeletonLoading from "../_components/SkeletonLoading";
import DeliveryForm from "../_components/DeliveryForm";
import CartCheckoutSummary from "../_components/CartCheckoutSummary";
import { useTelegramBackButton } from "../_components/TelegramBackButton";
import TelegramMainButton from '../_components/TelegramMainButton';
import { useTelegramHaptic } from '@/hooks/useTelegramHaptic';
import { telegramSDK } from '@/lib/telegram-sdk';
import { EmptyCart } from '@/components/ecommerce';

import TelegramCheckoutButton from '../_components/TelegramCheckoutButton';
// Telegram WebApp interface
interface TelegramWebApp {
  ready: () => void;
  expand: () => void;
  close: () => void;
  sendData: (data: string) => void;
  setHeaderColor: (color: string) => void;
  setBackgroundColor: (color: string) => void;
  initData: string;
  initDataUnsafe: {
    user?: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
    };
  };
}

interface CartItem {
  id: number;
  product_id: number;
  product_name: string;
  product_price: number;
  quantity: number;
  image_url?: string;
}

interface DeliveryData {
  address: string;
  street: string;
  home: string;
  apartment: string;
  build: string;
  postal_code: number;
  first_name: string;
  last_name: string;
  middle_name: string;
  phone_number: string;
  city?: string; // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ city
}

interface UserProfile {
  address?: string;
  street?: string;
  home?: string;
  apartment?: string;
  build?: string;
  postal_code?: number;
  first_name?: string;
  last_name?: string;
  middle_name?: string;
  phone_number?: string;
}

export default function CartPage() {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [deliveryData, setDeliveryData] = useState<DeliveryData | null>(null);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [finalTotal, setFinalTotal] = useState(0);
  const [appliedBonus, setAppliedBonus] = useState(0);
  const [isOrderLoading, setIsOrderLoading] = useState(false);
  const [isTelegramEnv, setIsTelegramEnv] = useState(false);
  const { notificationSuccess, notificationError } = useTelegramHaptic();

  // –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
  useTelegramBackButton({
    onBack: () => {
      // –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–∞–ª–æ–≥–∞
      window.location.href = '/webapp';
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  const loadCart = async () => {
    const storedCart = localStorage.getItem('webapp_cart');
    if (storedCart) {
      const items: CartItem[] = JSON.parse(storedCart);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
      try {
        const response = await fetch('/api/webapp/cart', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ cart_items: items })
        });

        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            setCartItems(data.cart_items);
            return;
          }
        }
      } catch (error) {
        console.error('Error loading cart images:', error);
      }
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      setCartItems(items);
    } else {
      setCartItems([]);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
  const loadUserProfile = async () => {
    try {
      const headers: HeadersInit = {
        'Content-Type': 'application/json',
      };

      // –î–æ–±–∞–≤–ª—è–µ–º Telegram initData –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp?.initData) {
        headers['X-Telegram-Init-Data'] = (window as any).Telegram.WebApp.initData;
      }

      const response = await fetch('/api/webapp/profile', {
        headers
      });
      
      if (response.ok) {
        const data = await response.json();
        
        if (data.success && data.user) {
          const profile: UserProfile = {
            address: data.user.address,
            street: data.user.street,
            home: data.user.home,
            apartment: data.user.apartment,
            build: data.user.build,
            postal_code: data.user.postal_code,
            first_name: data.user.first_name,
            last_name: data.user.last_name,
            middle_name: data.user.middle_name,
            phone_number: data.user.phone_number
          };
          
          setUserProfile(profile);
        }
      } else {
        console.error('Profile loading failed:', response.status, response.statusText);
      }
    } catch (error) {
      console.error('Error loading user profile:', error);
    }
  };

  useEffect(() => {
    const initializePage = async () => {
      await loadCart();
      await loadUserProfile();
      setIsLoading(false);
    };

    initializePage();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    const handleCartUpdate = async () => {
      await loadCart();
    };

    // –°–ª—É—à–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const handlePageFocus = async () => {
      await loadCart();
    };

    window.addEventListener('cartUpdated', handleCartUpdate);
    window.addEventListener('focus', handlePageFocus);
    window.addEventListener('visibilitychange', handlePageFocus);
    
    return () => {
      window.removeEventListener('cartUpdated', handleCartUpdate);
      window.removeEventListener('focus', handlePageFocus);
      window.removeEventListener('visibilitychange', handlePageFocus);
    };
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
  const updateQuantity = async (productId: number, direction: 'up' | 'down') => {
    const updatedItems = cartItems.map(item => {
      if (item.product_id === productId) {
        const newQuantity = direction === 'up' 
          ? item.quantity + 1 
          : Math.max(0, item.quantity - 1);
        
        return { ...item, quantity: newQuantity };
      }
      return item;
    }).filter(item => item.quantity > 0); // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 0

    // –û–±–Ω–æ–≤–ª—è–µ–º localStorage –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã)
    const itemsForStorage = updatedItems.map(item => ({
      id: item.id,
      product_id: item.product_id,
      product_name: item.product_name,
      product_price: item.product_price,
      quantity: item.quantity
    }));

    localStorage.setItem('webapp_cart', JSON.stringify(itemsForStorage));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    setCartItems(updatedItems);
    window.dispatchEvent(new Event('cartUpdated'));
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∫–æ—Ä–∑–∏–Ω—ã
  const clearCart = () => {
    setCartItems([]);
    localStorage.removeItem('webapp_cart');
    localStorage.removeItem('webapp_cart_enriched');
    window.dispatchEvent(new Event('cartUpdated'));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ DeliveryForm)
  const handleDeliveryDataChange = useCallback((data: DeliveryData) => {
    setDeliveryData(data);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å Telegram WebApp –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
  const handlePlaceOrder = async () => {
    if (!deliveryData || isOrderLoading) return;

    setIsOrderLoading(true);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
      const orderData = {
        delivery_data: {
          ...deliveryData,
          city: deliveryData.address // –ø–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ä–æ–¥ –∫–∞–∫ city
        },
        cart_items: cartItems,
        bonus: appliedBonus,
        total: finalTotal,
        telegram_user: (window as any).Telegram?.WebApp?.initDataUnsafe?.user || null
      };

      const response = await fetch('/api/webapp/orders', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...((window as any).Telegram?.WebApp?.initData && {
            'X-Telegram-Init-Data': (window as any).Telegram.WebApp.initData
          })
        },
        body: JSON.stringify(orderData)
      });

      const result = await response.json();

      if (result.success) {
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        clearCart();
        localStorage.removeItem('webapp_delivery_data');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if ((window as any).Telegram?.WebApp) {
          const telegramData = {
            action: 'order_placed',
            order_id: result.order_id,
            total: finalTotal,
            items_count: cartItems.length,
            delivery_address: `${deliveryData.address}, ${deliveryData.street}, ${deliveryData.home}`,
            customer_name: `${deliveryData.first_name} ${deliveryData.last_name}`,
            customer_phone: deliveryData.phone_number
          };
          
          try {
            (window as any).Telegram.WebApp.sendData(JSON.stringify(telegramData));
            console.log('üì± Order data sent to Telegram bot:', telegramData);
          } catch (error) {
            console.error('Error sending data to Telegram:', error);
          }
          
          // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(() => {
            try {
              (window as any).Telegram.WebApp.close();
              console.log('üì± Telegram WebApp closed');
            } catch (error) {
              console.error('Error closing Telegram WebApp:', error);
              // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ alert
              window.location.href = '/webapp/orders';
            }
          }, 500); // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        } else {
          // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ alert
          window.location.href = '/webapp/orders';
        }
      } else {
        console.error('Order creation failed:', result.error);
        // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –±–µ–∑ alert
      }
    } catch (error) {
      console.error('Order creation error:', error);
      // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –±–µ–∑ alert
    } finally {
      setIsOrderLoading(false);
    }
  };

  // –ü–æ–¥—Å—á—ë—Ç –æ–±—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const totalQuantity = cartItems.reduce((sum, item) => sum + item.quantity, 0);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏
  const isDeliveryFormValid = deliveryData && 
    deliveryData.address && 
    deliveryData.street && 
    deliveryData.home && 
    deliveryData.first_name && 
    deliveryData.phone_number;

  // Set document title for Telegram Web App
  useEffect(() => {
    document.title = "–ö–æ—Ä–∑–∏–Ω–∞";
    
    // Telegram Web App initialization
    if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp) {
      const tg = (window as any).Telegram.WebApp;
      try {
        tg.ready();
        tg.expand();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –º—ã –≤ Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        setIsTelegramEnv(true);
        console.log('üöÄ Telegram environment detected');
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
        // —á—Ç–æ–±—ã –Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –±—ã–ª–∞ –±–µ–ª–æ–π –¥–∞–∂–µ –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
        tg.setHeaderColor('#FFFFFF');
        tg.setBackgroundColor('#FFFFFF');
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è MainButton
        if (tg.setBottomBarColor) {
          tg.setBottomBarColor('#FFFFFF');
          console.log('üéØ –¶–≤–µ—Ç –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ');
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞
        if (tg.themeParams) {
          // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã –¥–ª—è —Å–≤–µ—Ç–ª–æ–≥–æ —Ñ–æ–Ω–∞
          tg.themeParams.bg_color = '#FFFFFF';
          tg.themeParams.secondary_bg_color = '#F7F7F7';
        }
        
        console.log('üì± Telegram WebApp initialized for cart page with light theme');
      } catch (error) {
        console.error('Error initializing Telegram WebApp:', error);
      }
    } else {
      setIsTelegramEnv(false);
      console.log('üåê Browser environment detected');
    }
  }, []);

  // MainButton —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è TelegramCheckoutButton –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º

  const handleTelegramCheckout = async () => {
    if (!deliveryData || isOrderLoading) return;

    // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback
    notificationSuccess();
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      await handlePlaceOrder();
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º - —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º WebApp
      
    } catch (error) {
      notificationError();
      console.error('Telegram checkout error:', error);
      // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –±–µ–∑ popup
    }
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º className —Å —É—á–µ—Ç–æ–º Telegram –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const containerClassName = `webapp-container cart-page px-4 py-6${isTelegramEnv ? ' telegram-env' : ''}`;

  if (isLoading) {
    return (
      <div className={containerClassName}>
        <SkeletonLoading type="cart" />
      </div>
    );
  }

  // –ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞
  if (cartItems.length === 0) {
    return (
      <div className={containerClassName}>
        <EmptyCart 
          title="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
          description="–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"
          actionText="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥"
          actionHref="/webapp"
        />
      </div>
    );
  }

  // –ö–æ—Ä–∑–∏–Ω–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  return (
    <div className={containerClassName}>
      <h1 className="mb-6">–ö–æ—Ä–∑–∏–Ω–∞</h1>
      
      <div className="main-block mb-6 cart-items-block">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã - –∫–∞–∫ –≤ Rails */}
        <div className="flex justify-between items-center mb-6">
          <div className="font-semibold">
            –¢–æ–≤–∞—Ä–æ–≤: {totalQuantity}
          </div>
          <button
            className="btn-clear-cart"
            onClick={clearCart}
          >
            <div className="flex items-center gap-1 active:text-red-600">
              –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
              <IconComponent name="trash" size={16} />
            </div>
          </button>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ cart-items */}
        <div className="cart-items space-y-2" id="cart_items">
          {cartItems.map(item => (
            <CartItemComponent
              key={item.product_id}
              item={item}
              onUpdateQuantity={updateQuantity}
            />
          ))}
        </div>
      </div>

      {/* –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º */}
      <div className="mb-6">
        <DeliveryForm
          initialData={userProfile || undefined}
          onDataChange={handleDeliveryDataChange}
          showPersonalInfo={true}
        />
      </div>

      {/* –°–∏—Å—Ç–µ–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="mb-6">
        <CartCheckoutSummary
          onTotalChange={setFinalTotal}
          onBonusChange={setAppliedBonus}
        />
      </div>

      {/* üöÄ Telegram MainButton –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
      {cartItems.length > 0 && isDeliveryFormValid && (
        <TelegramCheckoutButton
          total={finalTotal}
          isLoading={isOrderLoading}
          isDisabled={!isDeliveryFormValid}
          onCheckout={handleTelegramCheckout}
        />
      )}
    </div>
  );
}
