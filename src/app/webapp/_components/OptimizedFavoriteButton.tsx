"use client";

import { useState, useEffect } from "react";
import { IconComponent } from "@/components/webapp/IconComponent";
import { useTelegramAuth } from "@/context/TelegramAuthContext";
import { useTelegramHaptic } from '@/hooks/useTelegramHaptic';

interface OptimizedFavoriteButtonProps {
  productId: number;
  className?: string;
  onRemoved?: () => void;
  initialIsFavorite?: boolean;
  onToggle?: (isFavorite: boolean) => void;
}

export function OptimizedFavoriteButton({ productId, className = "", onRemoved, initialIsFavorite = false, onToggle }: OptimizedFavoriteButtonProps) {
  const [isFavorite, setIsFavorite] = useState(initialIsFavorite);
  const [isLoading, setIsLoading] = useState(false);
  const { user, isAuthenticated } = useTelegramAuth();
  const { impactLight, notificationSuccess, notificationError } = useTelegramHaptic();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const favorites = JSON.parse(localStorage.getItem('webapp_favorites') || '[]');
    setIsFavorite(favorites.includes(productId));
  }, [productId]);

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è localStorage –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
  useEffect(() => {
    const handleStorageChange = () => {
      const favorites = JSON.parse(localStorage.getItem('webapp_favorites') || '[]');
      setIsFavorite(favorites.includes(productId));
    };

    window.addEventListener('favoriteAdded', handleStorageChange);
    window.addEventListener('favoriteRemoved', handleStorageChange);
    window.addEventListener('favoritesSync', handleStorageChange);

    return () => {
      window.removeEventListener('favoriteAdded', handleStorageChange);
      window.removeEventListener('favoriteRemoved', handleStorageChange);
      window.removeEventListener('favoritesSync', handleStorageChange);
    };
  }, [productId]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const updateLocalStorage = (newIsFavorite: boolean) => {
    const favorites = JSON.parse(localStorage.getItem('webapp_favorites') || '[]');
    
    if (newIsFavorite) {
      if (!favorites.includes(productId)) {
        favorites.push(productId);
      }
    } else {
      const index = favorites.indexOf(productId);
      if (index > -1) {
        favorites.splice(index, 1);
      }
    }
    
    localStorage.setItem('webapp_favorites', JSON.stringify(favorites));
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    if (newIsFavorite) {
      window.dispatchEvent(new CustomEvent('favoriteAdded', { detail: { productId } }));
    } else {
      window.dispatchEvent(new CustomEvent('favoriteRemoved', { detail: { productId } }));
      onRemoved?.();
    }
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const handleToggleFavorite = async () => {
    if (isLoading) return;

    const newIsFavorite = !isFavorite;
    
    // üöÄ –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setIsFavorite(newIsFavorite);
    updateLocalStorage(newIsFavorite);
    impactLight();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (!isAuthenticated || !user?.tg_id) {
      console.warn('User not authenticated, using localStorage only');
      return;
    }

    setIsLoading(true);

    try {

      if (newIsFavorite) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        const response = await fetch('/api/webapp/favorites', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            product_id: productId,
            tg_id: user.tg_id 
          }),
        });

        const data = await response.json();
        
        if (response.ok && data.success) {
          notificationSuccess();
          if (onToggle) {
            onToggle(true);
          }
          if (data.message) {
            console.log(`‚ÑπÔ∏è ${data.message}`);
          }
        } else {
          // –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ 409 (—É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö
          if (response.status === 409) {
            notificationSuccess();
            if (onToggle) {
              onToggle(true);
            }
            console.log(`‚ÑπÔ∏è Product ${productId} already in favorites`);
        } else {
          throw new Error(data.error || 'Failed to add to favorites');
          }
        }
      } else {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        const response = await fetch(`/api/webapp/favorites?product_id=${productId}&tg_id=${user.tg_id}`, {
          method: 'DELETE',
        });

        const data = await response.json();
        
        if (response.ok && data.success) {
          notificationSuccess();
          if (onToggle) {
            onToggle(false);
          }
        } else {
          throw new Error(data.error || 'Failed to remove from favorites');
        }
      }
    } catch (error) {
      notificationError();
      console.error('Favorite toggle error:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ
      setIsFavorite(!newIsFavorite);
      updateLocalStorage(!newIsFavorite);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <button
      className={`optimized-fav-btn haptic-feedback ${isFavorite ? 'favorite' : ''} ${isLoading ? 'loading' : ''} ${className}`}
      onClick={handleToggleFavorite}
      disabled={isLoading}
      aria-label={isFavorite ? 'Remove from favorites' : 'Add to favorites'}
    >
      <IconComponent 
        name={isFavorite ? 'favorite' : 'unfavorite'} 
        size={18} 
      />
    </button>
  );
} 