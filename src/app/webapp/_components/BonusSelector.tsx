'use client';

import { useState, useEffect, useMemo } from 'react';

interface BonusSelectorProps {
  userBonus: number;
  totalPrice: number;
  bonusThreshold: number;
  onBonusChange: (amount: number) => void;
  disabled?: boolean;
}

export default function BonusSelector({
  userBonus,
  totalPrice,
  bonusThreshold,
  onBonusChange,
  disabled = false
}: BonusSelectorProps) {
  const [selectedBonus, setSelectedBonus] = useState(0);

  // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å
  const maxApplicableBonus = useMemo(() => {
    return Math.min(userBonus, totalPrice);
  }, [userBonus, totalPrice]);

  // –ë–æ–Ω—É—Å—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å —à–∞–≥–æ–º 100‚ÇΩ
  const applicableBonusSteps = useMemo(() => {
    return Math.floor(maxApplicableBonus / 100) * 100;
  }, [maxApplicableBonus]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã
  const bonusDisabled = useMemo(() => {
    return disabled || totalPrice < bonusThreshold || applicableBonusSteps === 0;
  }, [disabled, totalPrice, bonusThreshold, applicableBonusSteps]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
  useEffect(() => {
    if (bonusDisabled && selectedBonus > 0) {
      setSelectedBonus(0);
      onBonusChange(0);
    } else if (selectedBonus > applicableBonusSteps) {
      const newAmount = applicableBonusSteps;
      setSelectedBonus(newAmount);
      onBonusChange(newAmount);
    }
  }, [bonusDisabled, applicableBonusSteps, selectedBonus, onBonusChange]);

  const handleBonusChange = (amount: number) => {
    setSelectedBonus(amount);
    onBonusChange(amount);
  };

  if (bonusDisabled) {
    return (
      <div className="bonus-selector-card disabled">
        <div className="bonus-header">
          <div className="bonus-icon disabled-icon">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </div>
          <h3 className="bonus-title">–ë–æ–Ω—É—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</h3>
        </div>
        
        <div className="bonus-message">
          <div className="message-icon">‚ÑπÔ∏è</div>
          <div className="message-text">
            {userBonus < 100 ? (
              '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ (–Ω—É–∂–Ω–æ ‚â• 100‚ÇΩ)'
            ) : totalPrice < bonusThreshold ? (
              `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${bonusThreshold.toLocaleString('ru-RU')}‚ÇΩ`
            ) : (
              '–ë–æ–Ω—É—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞'
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bonus-selector-card">
      <div className="bonus-header">
        <div className="bonus-icon">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </div>
        <h3 className="bonus-title">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–Ω—É—Å—ã</h3>
        <div className="bonus-balance">{userBonus.toLocaleString('ru-RU')}‚ÇΩ</div>
      </div>
      
      <div className="bonus-slider-container">
        <div className="bonus-range-labels">
          <span className="range-label">0‚ÇΩ</span>
          <span className="range-label">{applicableBonusSteps.toLocaleString('ru-RU')}‚ÇΩ</span>
        </div>
        
        <div className="bonus-slider-wrapper">
          <input
            className="bonus-range-slider"
            name="bonus"
            type="range"
            min={0}
            max={applicableBonusSteps}
            step={100}
            value={selectedBonus}
            onChange={(e) => handleBonusChange(parseInt(e.target.value, 10))}
          />
          <div className="slider-track-fill" style={{width: `${(selectedBonus / applicableBonusSteps) * 100}%`}}></div>
        </div>

        {selectedBonus > 0 && (
          <div className="bonus-selected">
            <div className="selected-icon">üéÅ</div>
            <div className="selected-content">
              <div className="selected-text">–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ</div>
              <div className="selected-amount">{selectedBonus.toLocaleString('ru-RU')}‚ÇΩ</div>
            </div>
          </div>
        )}

        <div className="bonus-info">
          <span className="info-icon">üí°</span>
          <span className="info-text">–î–æ—Å—Ç—É–ø–Ω–æ: {userBonus.toLocaleString('ru-RU')}‚ÇΩ ‚Ä¢ –®–∞–≥: 100‚ÇΩ</span>
        </div>
      </div>
    </div>
  );
} 