"use client";

import { useEffect, useState } from "react";
import { useTelegramAuth } from "@/context/TelegramAuthContext";
import { ChevronRight, User, Package, MapPin, Clock, HelpCircle } from "lucide-react";
import { useBackButton } from "../_components/useBackButton";
import SubscriptionsSheet from "../_components/SubscriptionsSheet";

interface AccountTier {
  id: number;
  title: string;
  bonus_percentage: number;
  order_threshold: number;
}

interface UserProfile {
  id: number;
  first_name: string;
  first_name_raw: string;
  photo_url: string | null;
  order_count: number;
  bonus_balance: number;
  role: number;
  account_tier: AccountTier | null;
  tg_id: string;
}

interface ProfileDataResponse {
  success: boolean;
  user: UserProfile;
  account_tiers: AccountTier[];
  remaining_to_next_tier: number | null;
  next_tier: AccountTier | null;
}

export default function TgappProfilePage() {
  const { isAuthenticated, user } = useTelegramAuth();
  const [loading, setLoading] = useState(true);
  const [isSubscriptionsOpen, setIsSubscriptionsOpen] = useState(false);
  const [data, setData] = useState<ProfileDataResponse | null>(null);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ Telegram
  useBackButton(true);

  const load = async () => {
    if (!isAuthenticated || !user?.tg_id) {
      setLoading(false);
      return;
    }
    setLoading(true);
    try {
      const res = await fetch(`/api/webapp/profile?tg_id=${user.tg_id}`);
      const json = await res.json();
      setData(json);
    } catch (e) {
      console.error(e);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    load();
  }, [isAuthenticated, user?.tg_id]);

  if (loading) {
    return (
      <div className="tgapp-profile">
        <div className="tgapp-skeleton" style={{ height: '80px', marginBottom: '1rem' }}></div>
        <div className="tgapp-skeleton" style={{ height: '120px', marginBottom: '1rem' }}></div>
        <div className="tgapp-skeleton" style={{ height: '200px' }}></div>
      </div>
    );
  }

  if (!data || !data.success) {
    return (
      <div className="tgapp-profile">
        <div className="tgapp-error">
          <div className="tgapp-error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</div>
          <div className="tgapp-error-message">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</div>
        </div>
      </div>
    );
  }

  const { user: profileUser } = data;
  const greetName = profileUser.first_name || profileUser.first_name_raw;

  return (
    <div className="tgapp-profile">
      {/* Profile Header */}
      <div className="tgapp-profile-header">
        <h1 className="tgapp-profile-greeting">–ü—Ä–∏–≤–µ—Ç, {greetName}! üëã</h1>
      </div>

      {/* Bonus Block */}
      <div className="tgapp-bonus-block">
        <div className="tgapp-bonus-title">–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</div>
        <div className="tgapp-bonus-amount">{profileUser.bonus_balance}‚ÇΩ</div>
        <div className="tgapp-bonus-tier">
          {profileUser.account_tier ? `${profileUser.account_tier.title} ‚Ä¢ –ö—ç—à–±–µ–∫ ${profileUser.account_tier.bonus_percentage}%` : '–°–µ—Ä–µ–±—Ä—è–Ω—ã–π'}
        </div>
      </div>

      {/* Action Cards */}
      <div className="tgapp-action-cards">
        <div className="tgapp-action-card" onClick={() => window.location.href = '/tgapp/profile/orders'}>
          <div className="tgapp-action-card-icon">
            <Clock size={20} />
          </div>
          <div className="tgapp-action-card-content">
            <div className="tgapp-action-card-title">–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</div>
            <div className="tgapp-action-card-subtitle">–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤</div>
          </div>
          <ChevronRight className="tgapp-action-card-arrow" size={20} />
        </div>

        <div className="tgapp-action-card" onClick={() => window.location.href = '/tgapp/profile/addresses'}>
          <div className="tgapp-action-card-icon">
            <MapPin size={20} />
          </div>
          <div className="tgapp-action-card-content">
            <div className="tgapp-action-card-title">–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏</div>
            <div className="tgapp-action-card-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–º –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏</div>
          </div>
          <ChevronRight className="tgapp-action-card-arrow" size={20} />
        </div>

        <div
          className="tgapp-action-card"
          onClick={() => setIsSubscriptionsOpen(true)}
        >
          <div className="tgapp-action-card-icon">
            <Package size={20} />
          </div>
          <div className="tgapp-action-card-content">
            <div className="tgapp-action-card-title">–¢–æ–≤–∞—Ä—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏</div>
            <div className="tgapp-action-card-subtitle">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏</div>
          </div>
          <ChevronRight className="tgapp-action-card-arrow" size={20} />
        </div>

        <div className="tgapp-action-card">
          <div className="tgapp-action-card-icon">
            <HelpCircle size={20} />
          </div>
          <div className="tgapp-action-card-content">
            <div className="tgapp-action-card-title">–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã</div>
            <div className="tgapp-action-card-subtitle">–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</div>
          </div>
          <ChevronRight className="tgapp-action-card-arrow" size={20} />
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–¢–æ–≤–∞—Ä—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏" */}
      <SubscriptionsSheet
        isOpen={isSubscriptionsOpen}
        onClose={() => setIsSubscriptionsOpen(false)}
      />
    </div>
  );
} 