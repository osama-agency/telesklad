// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String
  name      String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String     @id @default(cuid())
  name                   String?
  email                  String?    @unique
  emailVerified          DateTime?
  image                  String?
  coverImage             String?
  phone                  String?
  password               String?
  passwordResetToken     String?    @unique
  passwordResetTokenExp  DateTime?
  role                   String?    @default("USER")
  createdAt              DateTime   @default(now())
  accounts               Account[]
  sessions               Session[]
  apiKeys                ApiKey[]
  expenses               Expense[]
  purchases              Purchase[]
}

model Expense {
  id          Int      @id @default(autoincrement())
  date        String
  category    String
  description String
  amount      Float
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id               Int           @id @default(autoincrement())
  name             String
  description      String?
  price            Decimal?      @db.Decimal(10,2)
  stock_quantity   Int?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  deleted_at       DateTime?     // Для soft delete
  ancestry         String?
  weight           String?
  dosage_form      String?
  package_quantity Int?
  main_ingredient  String?
  brand            String?
  old_price        Decimal?      @db.Decimal(10,2)
  is_visible       Boolean       @default(true)
  items            PurchaseItem[]

  @@index([name])
  @@index([ancestry])
  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  externalId      String      @unique
  customerName    String?
  customerEmail   String?
  customerPhone   String?
  status          String
  total           Decimal     @db.Decimal(10,2)
  currency        String      @default("RUB")
  orderDate       DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  bankCard        String?
  bonus           Decimal     @default(0) @db.Decimal(10,2)
  customerCity    String?
  deliveryCost    Decimal     @default(0) @db.Decimal(10,2)
  paidAt          DateTime?
  shippedAt       DateTime?
  customerAddress String?
  items           OrderItem[]

  @@index([externalId])
  @@index([status])
  @@index([orderDate])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String?
  name      String
  quantity  Int
  price     Decimal  @db.Decimal(10,2)
  total     Decimal  @db.Decimal(10,2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}



model Purchase {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  totalAmount  Float
  status       String        @default("draft") // draft, ordered, received, cancelled
  isUrgent     Boolean       @default(false)
  expenses     Float?
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        PurchaseItem[]

  @@map("purchases")
}

model PurchaseItem {
  id          Int      @id @default(autoincrement())
  quantity    Int
  costPrice   Float
  total       Float
  productId   Int      // ID товара из локальной таблицы products
  productName String   // Название товара на момент создания заказа
  purchaseId  Int
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("purchase_items")
}
