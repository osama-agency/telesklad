'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { IconComponent } from '@/components/webapp/IconComponent';

interface AccountTier {
  id: string;
  title: string;
  bonus_percentage: number;
  order_threshold: number;
  orders_to_next?: number;
}

interface LoyaltyData {
  user: {
    id: string;
    bonus_balance: number;
    order_count: number;
    current_tier: AccountTier | null;
    next_tier: AccountTier | null;
  };
  settings: {
    bonus_threshold: number;
    delivery_price: number;
  };
  all_tiers: AccountTier[];
}

import { useTelegramAuth } from "@/context/TelegramAuthContext";

export default function BonusBlock() {
  const router = useRouter();
  const { user: authUser, isAuthenticated } = useTelegramAuth();
  const [loyaltyData, setLoyaltyData] = useState<LoyaltyData | null>(null);
  const [loading, setLoading] = useState(true);
  const [showTierModal, setShowTierModal] = useState(false);
  const [showInfoModal, setShowInfoModal] = useState(false);

  useEffect(() => {
    if (isAuthenticated && authUser?.tg_id) {
      fetchLoyaltyData();
    }
  }, [isAuthenticated, authUser]);

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const handleRouteChange = () => {
      setShowTierModal(false);
      setShowInfoModal(false);
    };

    window.addEventListener('beforeunload', handleRouteChange);
    
    return () => {
      setShowTierModal(false);
      setShowInfoModal(false);
      window.removeEventListener('beforeunload', handleRouteChange);
    };
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape
  useEffect(() => {
    const handleEscape = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        setShowTierModal(false);
        setShowInfoModal(false);
      }
    };

    if (showTierModal || showInfoModal) {
      document.addEventListener('keydown', handleEscape);
      document.body.style.overflow = 'hidden';
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [showTierModal, showInfoModal]);

  const fetchLoyaltyData = async () => {
    try {
      if (!authUser?.tg_id) return;

      const response = await fetch(`/api/webapp/loyalty?tg_id=${authUser.tg_id}`);
      if (response.ok) {
        const data = await response.json();
        setLoyaltyData(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  const calculateProgress = () => {
    if (!loyaltyData?.user.current_tier || !loyaltyData?.user.next_tier) return 0;
    
    const currentOrders = loyaltyData.user.order_count;
    const currentThreshold = loyaltyData.user.current_tier.order_threshold;
    const nextThreshold = loyaltyData.user.next_tier.order_threshold;
    
    if (currentOrders >= nextThreshold) return 100;
    
    const progress = ((currentOrders - currentThreshold) / (nextThreshold - currentThreshold)) * 100;
    return Math.max(0, Math.min(100, progress));
  };

  const getProgressColor = (progress: number) => {
    if (progress >= 80) return '#48C928'; // –ó–µ–ª–µ–Ω—ã–π
    if (progress >= 50) return '#FFA929'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    return '#48C928'; // –ó–µ–ª–µ–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  };

  const getTierIcon = (tierTitle: string) => {
    const title = tierTitle?.toLowerCase();
    if (title?.includes('–±—Ä–æ–Ω–∑') || title?.includes('bronze')) return 'ü•â';
    if (title?.includes('—Å–µ—Ä–µ–±—Ä') || title?.includes('silver')) return 'ü•à';
    if (title?.includes('–∑–æ–ª–æ—Ç') || title?.includes('gold')) return 'ü•á';
    if (title?.includes('–ø–ª–∞—Ç–∏–Ω') || title?.includes('platinum')) return 'üíé';
    if (title?.includes('–∞–ª–º–∞–∑') || title?.includes('diamond')) return 'üíç';
    return 'üèÜ';
  };

  if (loading) {
    return (
      <div className="modern-bonus-block">
        <div className="bonus-skeleton">
          <div className="skeleton-line short"></div>
          <div className="skeleton-line medium"></div>
          <div className="skeleton-line long"></div>
          <div className="skeleton-progress"></div>
        </div>
      </div>
    );
  }

  if (!loyaltyData) return null;

  const { user } = loyaltyData;
  const currentTier = user.current_tier;
  const nextTier = user.next_tier;
  const progress = calculateProgress();

  return (
    <>
      <div className="modern-bonus-block">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
        <div className="bonus-header">
          <div className="bonus-title-group">
            <h3 className="bonus-title">–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</h3>
            <button 
              className="info-button"
              onClick={() => setShowInfoModal(true)}
              aria-label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"
            >
              <IconComponent name="help" size={16} />
            </button>
          </div>
          
          <div className="bonus-balance-group">
            <div className="bonus-balance-label">–í–∞—à–∏ –±–æ–Ω—É—Å—ã</div>
            <div className="bonus-balance-amount">{user.bonus_balance}‚ÇΩ</div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ */}
        {currentTier && (
          <div className="bonus-tier-section">
            <div className="current-tier-info">
              <div className="tier-badge">
                <span className="tier-icon">{getTierIcon(currentTier.title)}</span>
                <div className="tier-details">
                  <div className="tier-name">{currentTier.title}</div>
                  <div className="tier-benefit">–ö—ç—à–±–µ–∫ {currentTier.bonus_percentage}%</div>
                </div>
              </div>
              
              <button 
                className="view-all-tiers"
                onClick={() => setShowTierModal(true)}
              >
                <span>–í—Å–µ —É—Ä–æ–≤–Ω–∏</span>
                <IconComponent name="right" size={14} />
              </button>
            </div>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è */}
            {nextTier && (
              <div className="progress-section">
                <div className="progress-header">
                  <div className="progress-label">
                    –î–æ —É—Ä–æ–≤–Ω—è "{nextTier.title}"
                  </div>
                  <div className="progress-counter">
                    {nextTier.orders_to_next} {nextTier.orders_to_next === 1 ? '–∑–∞–∫–∞–∑' : 
                     nextTier.orders_to_next < 5 ? '–∑–∞–∫–∞–∑–∞' : '–∑–∞–∫–∞–∑–æ–≤'}
                  </div>
                </div>
                
                <div className="progress-bar-container">
                  <div 
                    className="progress-bar"
                    style={{ 
                      width: `${progress}%`,
                      backgroundColor: getProgressColor(progress)
                    }}
                  />
                </div>
                
                <div className="progress-milestones">
                  <span className="milestone current">
                    {user.order_count} –∑–∞–∫–∞–∑–æ–≤
                  </span>
                  <span className="milestone target">
                    {nextTier.order_threshold} –∑–∞–∫–∞–∑–æ–≤
                  </span>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
        {!currentTier && (
          <div className="welcome-section">
            <div className="welcome-icon">üéâ</div>
            <div className="welcome-content">
              <h4>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ–Ω—É—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!</h4>
              <p>–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫—ç—à–±–µ–∫ —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏</p>
              <button 
                className="learn-more-btn"
                onClick={() => setShowTierModal(true)}
              >
                –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ */}
      {showInfoModal && (
        <div 
          className="bonus-modal-overlay"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowInfoModal(false);
            }
          }}
        >
          <div className="bonus-modal">
            <div className="modal-header">
              <h3>–û –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ</h3>
              <button 
                className="modal-close"
                onClick={() => setShowInfoModal(false)}
              >
                <IconComponent name="close" size={20} />
              </button>
            </div>
            
            <div className="modal-content">
              <div className="info-section">
                <div className="info-icon">üí∞</div>
                <div className="info-text">
                  <h4>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ–Ω—É—Å—ã?</h4>
                  <p>–ó–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∫—ç—à–±–µ–∫ –≤ –≤–∏–¥–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Ä—É–±–ª–µ–π. –ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±–µ–∫–∞.</p>
                </div>
              </div>
              
              <div className="info-section">
                <div className="info-icon">‚¨ÜÔ∏è</div>
                <div className="info-text">
                  <h4>–ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å?</h4>
                  <p>–°–æ–≤–µ—Ä—à–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã! –ö–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±–µ–∫–∞.</p>
                </div>
              </div>
              
              <div className="info-section">
                <div className="info-icon">üíé</div>
                <div className="info-text">
                  <h4>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã?</h4>
                  <p>–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤. 1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —É—Ä–æ–≤–Ω—è–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ */}
      {showTierModal && (
        <div 
          className="bonus-modal-overlay"
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              setShowTierModal(false);
            }
          }}
        >
          <div className="bonus-modal">
            <div className="modal-header">
              <h3>–£—Ä–æ–≤–Ω–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</h3>
              <button 
                className="modal-close"
                onClick={() => setShowTierModal(false)}
              >
                <IconComponent name="close" size={20} />
              </button>
            </div>
            
            <div className="modal-content">
              <div className="tiers-list">
                {loyaltyData.all_tiers?.map((tier: AccountTier, index: number) => (
                  <div 
                    key={tier.id} 
                    className={`tier-card ${currentTier?.id === tier.id ? 'current' : ''} ${
                      user.order_count >= tier.order_threshold ? 'achieved' : 'locked'
                    }`}
                  >
                    <div className="tier-card-header">
                      <div className="tier-card-icon">
                        {getTierIcon(tier.title)}
                      </div>
                      <div className="tier-card-info">
                        <div className="tier-card-name">{tier.title}</div>
                        <div className="tier-card-benefit">–ö—ç—à–±–µ–∫ {tier.bonus_percentage}%</div>
                      </div>
                      <div className="tier-card-status">
                        {currentTier?.id === tier.id && (
                          <span className="status-badge current">–¢–µ–∫—É—â–∏–π</span>
                        )}
                        {user.order_count >= tier.order_threshold && currentTier?.id !== tier.id && (
                          <span className="status-badge achieved">–î–æ—Å—Ç–∏–≥–Ω—É—Ç</span>
                        )}
                        {user.order_count < tier.order_threshold && (
                          <span className="status-badge locked">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</span>
                        )}
                      </div>
                    </div>
                    
                    <div className="tier-card-requirement">
                      –û—Ç {tier.order_threshold} {tier.order_threshold === 1 ? '–∑–∞–∫–∞–∑–∞' : 
                         tier.order_threshold < 5 ? '–∑–∞–∫–∞–∑–æ–≤' : '–∑–∞–∫–∞–∑–æ–≤'}
                    </div>
                    
                    {tier.id === nextTier?.id && (
                      <div className="tier-card-progress">
                        <div className="progress-info">
                          –û—Å—Ç–∞–ª–æ—Å—å: {nextTier.orders_to_next} {nextTier.orders_to_next === 1 ? '–∑–∞–∫–∞–∑' : 
                                   nextTier.orders_to_next < 5 ? '–∑–∞–∫–∞–∑–∞' : '–∑–∞–∫–∞–∑–æ–≤'}
                        </div>
                        <div className="mini-progress-bar">
                          <div 
                            className="mini-progress-fill"
                            style={{ width: `${progress}%` }}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}