import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { ReportService } from '@/lib/services/ReportService';
import { NotificationSchedulerService } from '@/lib/services/notification-scheduler.service';
import LoyaltyService from '@/lib/services/loyaltyService';

const prisma = new PrismaClient();

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
const STATUS_CODES = {
  'unpaid': 0,
  'paid': 1,
  'processing': 2,
  'shipped': 3,
  'delivered': 4,
  'cancelled': 5
};

const ORDER_STATUSES = {
  0: 'unpaid',
  1: 'paid', 
  2: 'processing',
  3: 'shipped',
  4: 'delivered',
  5: 'cancelled'
};

// PUT - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
export async function PUT(request: NextRequest, { params }: { params: Promise<{ id: string }> }) {
  try {
    const { status } = await request.json();
    const { id } = await params;
    const orderId = parseInt(id);

    if (!status || !STATUS_CODES.hasOwnProperty(status)) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å' }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
    const order = await prisma.orders.findUnique({
      where: { id: BigInt(orderId) },
      include: {
        users: true,
        order_items: {
          include: { 
            products: {
              select: {
                id: true,
                name: true,
                price: true
              }
            }
          }
        }
      }
    });

    if (!order) {
      return NextResponse.json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    const oldStatus = ORDER_STATUSES[order.status as keyof typeof ORDER_STATUSES];
    const newStatusCode = STATUS_CODES[status as keyof typeof STATUS_CODES];

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    const updatedOrder = await prisma.orders.update({
      where: { id: BigInt(orderId) },
      data: { 
        status: newStatusCode,
        updated_at: new Date(),
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ timestamp'—ã
        ...(status === 'paid' && { paid_at: new Date() }),
        ...(status === 'processing' && { paid_at: new Date() }), // processing –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        ...(status === 'shipped' && { shipped_at: new Date() })
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const settings = await prisma.settings.findMany();
    const settingsMap = settings.reduce((acc, s) => {
      if (s.variable && s.value) {
        acc[s.variable] = s.value;
      }
      return acc;
    }, {} as Record<string, string>);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const orderData = {
      id: orderId,
      total_amount: Number(order.total_amount),
      items: order.order_items.map(item => ({
        product_name: item.products.name || '–¢–æ–≤–∞—Ä',
        quantity: item.quantity,
        price: Number(item.price || 0)
      })),
      bonus: order.bonus
    };

    const userData = {
      tg_id: order.users.tg_id.toString(),
      full_name: `${order.users.first_name || ''} ${order.users.last_name || ''}`.trim() || '–ö–ª–∏–µ–Ω—Ç',
      full_address: buildFullAddress(order.users),
      phone_number: order.users.phone_number || '–ù–µ —É–∫–∞–∑–∞–Ω',
      postal_code: order.users.postal_code || undefined
    };

    // üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –°–¢–ê–¢–£–°–ê
    let notificationResult = false;

    try {
      switch (status) {
        case 'unpaid':
          // –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ ReportService
          const orderForReport = {
            ...updatedOrder,
            users: order.users,
            order_items: order.order_items,
            bank_cards: null,
            msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
          };
          await ReportService.handleOrderStatusChange(orderForReport as any, oldStatus === 'unpaid' ? -1 : STATUS_CODES[oldStatus as keyof typeof STATUS_CODES]);
          notificationResult = true;
          break;

        case 'paid':
          // –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª" - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ ReportService
          const paidOrderForReport = {
            ...updatedOrder,
            users: order.users,
            order_items: order.order_items,
            bank_cards: null,
            msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
          };
          await ReportService.handleOrderStatusChange(paidOrderForReport as any, STATUS_CODES[oldStatus as keyof typeof STATUS_CODES]);
          notificationResult = true;
          
          // üö´ –û–¢–ú–ï–ù–Ø–ï–ú –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø –û –ù–ï–û–ü–õ–ê–ß–ï–ù–ù–û–ú –ó–ê–ö–ê–ó–ï
          try {
            await NotificationSchedulerService.cancelPaymentReminders(orderId);
            console.log(`üö´ Payment reminders cancelled for order #${orderId}`);
          } catch (cancelError) {
            console.error('‚ùå Error cancelling payment reminders:', cancelError);
          }
          break;

        case 'processing':
          // –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É - —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫—É—Ä—å–µ—Ä–∞ —á–µ—Ä–µ–∑ ReportService
          const processingOrderForReport = {
            ...updatedOrder,
            users: order.users,
            order_items: order.order_items,
            bank_cards: null,
            msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
          };
          await ReportService.handleOrderStatusChange(processingOrderForReport as any, STATUS_CODES[oldStatus as keyof typeof STATUS_CODES]);
          notificationResult = true;
          
          // üéÅ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ö–≠–®–ë–ï–ö –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ë–û–ù–£–°–ê–•
          try {
            const userId = BigInt(order.users.id);
            const orderTotal = Number(order.total_amount);
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –∫—ç—à–±–µ–∫ –∑–∞ –∑–∞–∫–∞–∑
            const cashbackResult = await LoyaltyService.processOrderCashback(BigInt(orderId), userId);
            
            if (cashbackResult) {
              const bonusAmount = cashbackResult.bonusLog.bonus_amount;
              console.log(`üí∞ Cashback processed: ${bonusAmount} for order #${orderId}`);
              
              // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–æ–≤
              await NotificationSchedulerService.scheduleBonusNotification(
                Number(userId), 
                Number(bonusAmount), 
                orderId
              );
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
            const oldUserData = await prisma.users.findUnique({
              where: { id: userId },
              include: { account_tiers: true }
            });
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
            const tierUpdateResult = await LoyaltyService.incrementOrderCount(userId, orderTotal);
            
            if (tierUpdateResult) {
              const newUserData = await prisma.users.findUnique({
                where: { id: userId },
                include: { account_tiers: true }
              });
              
              // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
              if (newUserData?.account_tiers && 
                  oldUserData?.account_tier_id !== newUserData.account_tier_id) {
                
                                 await NotificationSchedulerService.scheduleAccountTierNotification(
                   Number(userId),
                   newUserData.account_tiers.title || '–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å',
                   newUserData.account_tiers.bonus_percentage || 1
                 );
                
                console.log(`üéñÔ∏è Account tier upgraded for user ${userId}`);
              }
            }
            
          } catch (loyaltyError) {
            console.error('‚ùå Error processing loyalty benefits:', loyaltyError);
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
          }
          break;

        case 'cancelled':
          // –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω - —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ ReportService
          const cancelledOrderForReport = {
            ...updatedOrder,
            users: order.users,
            order_items: order.order_items,
            bank_cards: null,
            msg_id: updatedOrder.msg_id ? BigInt(updatedOrder.msg_id) : null
          };
          await ReportService.handleOrderStatusChange(cancelledOrderForReport as any, STATUS_CODES[oldStatus as keyof typeof STATUS_CODES]);
          notificationResult = true;
          break;

        default:
          console.log(`‚ÑπÔ∏è No notification configured for status: ${status}`);
          notificationResult = true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
      }
    } catch (notificationError) {
      console.error('‚ùå Notification error:', notificationError);
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }

    console.log(`‚úÖ Order #${orderId} status updated: ${oldStatus} ‚Üí ${status}`);

    return NextResponse.json({ 
      success: true, 
      order: {
        id: orderId,
        status: status,
        updated_at: updatedOrder.updated_at
      },
      notification_sent: notificationResult
    });

  } catch (error) {
    console.error('‚ùå Order status update error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞' }, 
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
function buildFullAddress(user: any): string {
  const parts = [];
  
  if (user.address) parts.push(user.address);
  if (user.street) parts.push(user.street);
  if (user.home) parts.push(`–¥–æ–º ${user.home}`);
  if (user.apartment) parts.push(`–∫–≤. ${user.apartment}`);
  if (user.build) parts.push(`–∫–æ—Ä–ø. ${user.build}`);
  
  return parts.join(', ') || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω';
} 