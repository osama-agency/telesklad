const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function testLogin() {
  try {
    console.log('üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.telesklad_users.findUnique({
      where: {
        email: 'go@osama.agency'
      }
    });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
      id: user.id,
      email: user.email,
      role: user.role,
      hasPassword: !!user.password,
      name: user.name
    });

    if (!user.password) {
      console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–∞—Ä–æ–ª—è');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const testPassword = 'admin123';
    const passwordMatch = await bcrypt.compare(testPassword, user.password);
    
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è:', {
      testPassword: testPassword,
      passwordMatch: passwordMatch
    });

    if (passwordMatch) {
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! –í—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.');
    } else {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...');
      const newHashedPassword = await bcrypt.hash(testPassword, 12);
      
      await prisma.telesklad_users.update({
        where: { id: user.id },
        data: { password: newHashedPassword }
      });
      
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testLogin(); 