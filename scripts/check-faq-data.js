const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkFAQData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ support_entries...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const count = await prisma.support_entries.count();
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ support_entries: ${count}`);
    
    if (count > 0) {
      console.log('\nüìù –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ FAQ –∑–∞–ø–∏—Å–∏:');
      const entries = await prisma.support_entries.findMany({
        orderBy: { question: 'asc' }
      });
      
      entries.forEach((entry, index) => {
        console.log(`\n${index + 1}. ID: ${entry.id}`);
        console.log(`   –í–æ–ø—Ä–æ—Å: ${entry.question}`);
        console.log(`   –û—Ç–≤–µ—Ç: ${entry.answer?.substring(0, 100)}${entry.answer?.length > 100 ? '...' : ''}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${entry.created_at}`);
      });
    } else {
      console.log('\n‚ùå –¢–∞–±–ª–∏—Ü–∞ support_entries –ø—É—Å—Ç–∞—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏...');
    const supportSettings = await prisma.settings.findMany({
      where: {
        variable: {
          in: ['tg_support', 'support_working_hours', 'support_response_time']
        }
      }
    });
    
    if (supportSettings.length > 0) {
      console.log('\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:');
      supportSettings.forEach(setting => {
        console.log(`   ${setting.variable}: ${setting.value || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
      });
    } else {
      console.log('\n‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkFAQData(); 