import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function checkUserAuth() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const user = await prisma.telesklad_users.findUnique({
      where: { email: 'go@osama.agency' },
      select: { 
        id: true, 
        name: true, 
        email: true, 
        password: true,
        role: true,
        createdAt: true,
        updatedAt: true
      }
    });

    if (user) {
      console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.log(`  ID: ${user.id}`);
      console.log(`  Name: ${user.name}`);
      console.log(`  Email: ${user.email}`);
      console.log(`  Role: ${user.role}`);
      console.log(`  Password hash: ${user.password ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
      console.log(`  Created: ${user.createdAt}`);
      console.log(`  Updated: ${user.updatedAt}`);
      
      if (user.password) {
        console.log(`  Password hash length: ${user.password.length}`);
        console.log(`  Password starts with: ${user.password.substring(0, 10)}...`);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–æ–ª—å bcrypt —Ö–µ—à–µ–º
        const isBcryptHash = user.password.startsWith('$2a$') || user.password.startsWith('$2b$') || user.password.startsWith('$2y$');
        console.log(`  Is bcrypt hash: ${isBcryptHash}`);
        
        if (isBcryptHash) {
          // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –æ–±—ã—á–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏
          const testPasswords = ['password', 'admin', '123456', 'admin123'];
          
          for (const testPassword of testPasswords) {
            try {
              const match = await bcrypt.compare(testPassword, user.password);
              if (match) {
                console.log(`  ‚úÖ –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω: "${testPassword}"`);
                break;
              }
            } catch (error) {
              console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è "${testPassword}": ${error}`);
            }
          }
        } else {
          console.log('  ‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è bcrypt —Ö–µ—à–µ–º');
        }
      } else {
        console.log('  ‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      }
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log(`  NEXTAUTH_SECRET: ${process.env.NEXTAUTH_SECRET ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`  SECRET: ${process.env.SECRET ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`  NODE_ENV: ${process.env.NODE_ENV}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserAuth(); 