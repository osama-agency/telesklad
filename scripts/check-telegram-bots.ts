import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkTelegramBots() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram –±–æ—Ç–æ–≤\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log(`NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é development)'}`);
    console.log(`TELEGRAM_BOT_TOKEN: ${process.env.TELEGRAM_BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`WEBAPP_TELEGRAM_BOT_TOKEN: ${process.env.WEBAPP_TELEGRAM_BOT_TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log('');

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üóÑÔ∏è –¢–æ–∫–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    const settings = await prisma.settings.findMany({
      where: {
        variable: {
          in: ['tg_token', 'webapp_telegram_bot_token']
        }
      }
    });

    for (const setting of settings) {
      const maskedValue = setting.value ? 
        `${setting.value.substring(0, 10)}...${setting.value.slice(-4)}` : 
        '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      console.log(`${setting.variable}: ${maskedValue}`);
    }
    console.log('');

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ development —Ä–µ–∂–∏–º–µ
    console.log('üéØ –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –≤ development —Ä–µ–∂–∏–º–µ:');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É TelegramTokenService.getTelegramBotToken()
    const isProduction = process.env.NODE_ENV === 'production';
    console.log(`–†–µ–∂–∏–º production: ${isProduction}`);
    
    if (!isProduction) {
      // –í development - –∏—â–µ–º webapp_telegram_bot_token
      const webappSetting = settings.find(s => s.variable === 'webapp_telegram_bot_token');
      if (webappSetting?.value) {
        console.log('‚úÖ –í development –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webapp_telegram_bot_token (—Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç)');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
        try {
          const response = await fetch(`https://api.telegram.org/bot${webappSetting.value}/getMe`);
          const result = await response.json();
          if (result.ok) {
            console.log(`  –ò–º—è –±–æ—Ç–∞: @${result.result.username}`);
            console.log(`  ID –±–æ—Ç–∞: ${result.result.id}`);
            console.log(`  –¢–æ–∫–µ–Ω: ${webappSetting.value.substring(0, 10)}...${webappSetting.value.slice(-4)}`);
          }
        } catch (error) {
          console.log('  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞');
        }
      } else {
        console.log('‚ö†Ô∏è webapp_telegram_bot_token –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω
    const mainSetting = settings.find(s => s.variable === 'tg_token');
    if (mainSetting?.value) {
      console.log('\nüì± –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (tg_token):');
      try {
        const response = await fetch(`https://api.telegram.org/bot${mainSetting.value}/getMe`);
        const result = await response.json();
        if (result.ok) {
          console.log(`  –ò–º—è –±–æ—Ç–∞: @${result.result.username}`);
          console.log(`  ID –±–æ—Ç–∞: ${result.result.id}`);
          console.log(`  –¢–æ–∫–µ–Ω: ${mainSetting.value.substring(0, 10)}...${mainSetting.value.slice(-4)}`);
        }
      } catch (error) {
        console.log('  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook'–∏
    console.log('\nüåê Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    
    for (const setting of settings) {
      if (setting.value) {
        try {
          const webhookResponse = await fetch(`https://api.telegram.org/bot${setting.value}/getWebhookInfo`);
          const webhookData = await webhookResponse.json();
          console.log(`\n${setting.variable} webhook:`);
          console.log(`  URL: ${webhookData.result?.url || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
          console.log(`  Pending updates: ${webhookData.result?.pending_update_count || 0}`);
          if (webhookData.result?.last_error_message) {
            console.log(`  ‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookData.result.last_error_message}`);
          }
          if (webhookData.result?.last_error_date) {
            const errorDate = new Date(webhookData.result.last_error_date * 1000);
            console.log(`  üïê –í—Ä–µ–º—è –æ—à–∏–±–∫–∏: ${errorDate.toLocaleString()}`);
          }
        } catch (error) {
          console.log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook –¥–ª—è ${setting.variable}:`, error);
        }
      }
    }

    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ webhook\'–∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏');
    console.log('2. –í development —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webapp_telegram_bot_token');
    console.log('3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NODE_ENV=production');

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkTelegramBots(); 