#!/usr/bin/env tsx

import { prisma } from '../src/libs/prismaDb';

async function getTelegramMessages() {
  console.log('üì® Getting Telegram message templates from settings...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ Telegram
    const telegramSettings = await prisma.settings.findMany({
      where: {
        variable: {
          startsWith: 'tg_msg_'
        }
      },
      orderBy: {
        variable: 'asc'
      }
    });

    console.log(`Found ${telegramSettings.length} Telegram message templates:\n`);

    telegramSettings.forEach((setting, index) => {
      console.log(`${index + 1}. ${setting.variable}:`);
      console.log(`   "${setting.value}"`);
      console.log(`   Description: ${setting.description || 'No description'}\n`);
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const messagesObject: Record<string, string> = {};
    telegramSettings.forEach(setting => {
      if (setting.variable && setting.value) {
        messagesObject[setting.variable] = setting.value;
      }
    });

    console.log('üìã Messages as object:');
    console.log(JSON.stringify(messagesObject, null, 2));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const fs = await import('fs');
    const path = './telegram-messages.json';
    fs.writeFileSync(path, JSON.stringify(messagesObject, null, 2));
    console.log(`\nüíæ Messages saved to ${path}`);

    return messagesObject;

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  getTelegramMessages().catch((error) => {
    console.error('üí• Failed:', error.message);
    process.exit(1);
  });
}