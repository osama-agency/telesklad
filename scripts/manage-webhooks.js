const axios = require('axios');
require('dotenv').config({ path: '.env.local' });
require('dotenv').config({ path: '.env' });

const TELEGRAM_API = 'https://api.telegram.org/bot';

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('üîç Debug info:');
console.log('WEBAPP_TELEGRAM_BOT_TOKEN:', process.env.WEBAPP_TELEGRAM_BOT_TOKEN ? 'loaded' : 'missing');
console.log('TELESKLAD_BOT_TOKEN:', process.env.TELESKLAD_BOT_TOKEN ? 'loaded' : 'missing');
console.log('NEXT_PUBLIC_APP_URL:', process.env.NEXT_PUBLIC_APP_URL || 'missing');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–æ–≤
const BOTS = {
  test: {
    token: process.env.WEBAPP_TELEGRAM_BOT_TOKEN,
    webhookPath: '/api/telegram/webapp-webhook',
    name: '@strattera_test_bot',
    description: '–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
  },
  telesklad: {
    token: process.env.TELESKLAD_BOT_TOKEN,
    webhookPath: '/api/telegram/telesklad-webhook',
    name: '@telesklad_bot',
    description: '–ë–æ—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –∑–∞–∫—É–ø–æ–∫ –∏ –∫—É—Ä—å–µ—Ä–æ–≤'
  }
};

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
const BASE_URL = process.env.NEXT_PUBLIC_APP_URL || 'https://strattera-admin.vercel.app';

/**
 * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è API Telegram
 */
const getTelegramApiUrl = (token, method) => `${TELEGRAM_API}${token}/${method}`;

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –±–æ—Ç–∞
 */
const getWebhookUrl = (webhookPath) => `${BASE_URL}${webhookPath}`;

/**
 * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞
 */
async function setupWebhook(botKey) {
  const bot = BOTS[botKey];
  if (!bot || !bot.token) {
    console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${botKey}`);
    return;
  }

  const webhookUrl = getWebhookUrl(bot.webhookPath);
  
  try {
    const response = await axios.post(getTelegramApiUrl(bot.token, 'setWebhook'), {
      url: webhookUrl,
      drop_pending_updates: true
    });

    if (response.data.ok) {
      console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${bot.name}:`);
      console.log(`   URL: ${webhookUrl}`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è ${bot.name}:`, response.data.description);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è ${bot.name}:`, error.message);
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ –±–æ—Ç–∞
 */
async function getWebhookInfo(botKey) {
  const bot = BOTS[botKey];
  if (!bot || !bot.token) {
    console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${botKey}`);
    return;
  }

  try {
    const response = await axios.get(getTelegramApiUrl(bot.token, 'getWebhookInfo'));
    
    if (response.data.ok) {
      console.log(`‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ –¥–ª—è ${bot.name}:`);
      console.log(JSON.stringify(response.data.result, null, 2));
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è ${bot.name}:`, response.data.description);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ –¥–ª—è ${bot.name}:`, error.message);
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –±–æ—Ç–∞
 */
async function deleteWebhook(botKey) {
  const bot = BOTS[botKey];
  if (!bot || !bot.token) {
    console.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ ${botKey}`);
    return;
  }

  try {
    const response = await axios.post(getTelegramApiUrl(bot.token, 'deleteWebhook'), {
      drop_pending_updates: true
    });

    if (response.data.ok) {
      console.log(`‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è ${bot.name}`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è ${bot.name}:`, response.data.description);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è ${bot.name}:`, error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const [,, command, botKey] = process.argv;

async function main() {
  if (!command) {
    console.log(`
üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  - setup <bot>    –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞
  - info <bot>     –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
  - delete <bot>   –£–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫
  
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:
  - test          ${BOTS.test.name} (${BOTS.test.description})
  - telesklad     ${BOTS.telesklad.name} (${BOTS.telesklad.description})

üìã –ü—Ä–∏–º–µ—Ä—ã:
  node scripts/manage-webhooks.js setup test
  node scripts/manage-webhooks.js info telesklad
    `);
    return;
  }

  if (!botKey || !BOTS[botKey]) {
    console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –±–æ—Ç–∞ (test –∏–ª–∏ telesklad)');
    return;
  }

  switch (command) {
    case 'setup':
      await setupWebhook(botKey);
      break;
    case 'info':
      await getWebhookInfo(botKey);
      break;
    case 'delete':
      await deleteWebhook(botKey);
      break;
    default:
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: setup, info –∏–ª–∏ delete');
  }
}

main().catch(console.error); 