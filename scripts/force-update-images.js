const { PrismaClient } = require('@prisma/client');
const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è S3
const s3Client = new S3Client({
  region: 'ru-1',
  endpoint: 'https://s3.ru1.storage.beget.cloud',
  credentials: {
    accessKeyId: process.env.S3_ACCESS_KEY || '',
    secretAccessKey: process.env.S3_SECRET_KEY || '',
  },
  forcePathStyle: true,
});

const S3_BUCKET = '2c11548b454d-eldar-agency';
const S3_ENDPOINT = 'https://s3.ru1.storage.beget.cloud';
const IMAGES_DIR = path.join(__dirname, '../temp-images');

// –¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
const forceUpdateProducts = [
  { name: 'Abilify 15 mg', file: 'abilify-15mg.svg' },
  { name: 'Abilify 30 mg', file: 'abilify-30mg.svg' },
  { name: 'Atominex 18 mg', file: 'atominex-18mg.svg' },
  { name: 'Attex 40 mg', file: 'attex-40mg.svg' },
  { name: 'Euthyrox 100 mcg', file: 'euthyrox-100mcg.svg' }
];

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3
async function uploadToS3(buffer, fileName, contentType) {
  const key = `products/${Date.now()}-${Date.now()}-${fileName}`;
  
  const command = new PutObjectCommand({
    Bucket: S3_BUCKET,
    Key: key,
    Body: buffer,
    ContentType: contentType,
    ACL: 'public-read',
  });

  try {
    console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤ S3: ${fileName}`);
    await s3Client.send(command);
    const fileUrl = `${S3_ENDPOINT}/${S3_BUCKET}/${key}`;
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${fileUrl}`);
    return fileUrl;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${fileName}:`, error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è MIME —Ç–∏–ø–∞
function getMimeType(filename) {
  const ext = path.extname(filename).toLowerCase();
  const mimeTypes = {
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.webp': 'image/webp',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml'
  };
  return mimeTypes[ext] || 'image/svg+xml';
}

async function forceUpdateImages() {
  try {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');

    for (const item of forceUpdateProducts) {
      console.log(`\nüîÑ –û–±–Ω–æ–≤–ª—è—é: ${item.name}`);
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ
      const product = await prisma.products.findFirst({
        where: { name: item.name }
      });
      
      if (!product) {
        console.log(`‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${item.name}`);
        continue;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
      const filePath = path.join(IMAGES_DIR, item.file);
      if (!fs.existsSync(filePath)) {
        console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${item.file}`);
        continue;
      }
      
      try {
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        const imageBuffer = fs.readFileSync(filePath);
        const contentType = getMimeType(item.file);
        
        console.log(`üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(imageBuffer.length / 1024).toFixed(1)} KB`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
        const s3Url = await uploadToS3(imageBuffer, item.file, contentType);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await prisma.products.update({
          where: { id: product.id },
          data: { image_url: s3Url }
        });
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: ${item.name}`);
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${item.name}:`, error.message);
      }
    }
    
    console.log('\nüéâ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  forceUpdateImages();
}

module.exports = { forceUpdateImages }; 