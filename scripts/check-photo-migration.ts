#!/usr/bin/env npx tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkPhotoMigration() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–∑—ã–≤–æ–≤...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ Active Storage
    const activeStorageCount = await prisma.active_storage_attachments.count({
      where: { record_type: 'Review' }
    });

    console.log(`üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ Active Storage: ${activeStorageCount}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ Active Storage
    if (activeStorageCount > 0) {
      const activeStoragePhotos = await prisma.active_storage_attachments.findMany({
        where: { record_type: 'Review' },
        include: {
          active_storage_blobs: true
        }
      });

      console.log('\nüìã –î–µ—Ç–∞–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ Active Storage:');
      activeStoragePhotos.forEach((attachment, index) => {
        const blob = attachment.active_storage_blobs;
        console.log(`  ${index + 1}. Review ID: ${attachment.record_id}`);
        console.log(`     –§–∞–π–ª: ${blob?.filename || 'N/A'}`);
        console.log(`     –†–∞–∑–º–µ—Ä: ${blob?.byte_size ? Math.round(Number(blob.byte_size) / 1024) + ' KB' : 'N/A'}`);
        console.log(`     –¢–∏–ø: ${blob?.content_type || 'N/A'}`);
        console.log(`     –•—Ä–∞–Ω–∏–ª–∏—â–µ: ${blob?.service_name || 'N/A'}`);
        console.log('');
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    const reviewsWithNewPhotos = await prisma.reviews.findMany({
      where: {
        NOT: {
          photos: {
            equals: []
          }
        }
      },
      select: {
        id: true,
        photos: true,
        user_id: true,
        product_id: true,
        created_at: true
      }
    });

    const newSystemPhotosCount = reviewsWithNewPhotos.reduce((total, review) => {
      return total + (review.photos?.length || 0);
    }, 0);

    console.log(`üÜï –û—Ç–∑—ã–≤—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: ${reviewsWithNewPhotos.length}`);
    console.log(`üñºÔ∏è  –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: ${newSystemPhotosCount}`);

    if (reviewsWithNewPhotos.length > 0) {
      console.log('\nüìã –î–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:');
      reviewsWithNewPhotos.forEach((review, index) => {
        console.log(`  ${index + 1}. Review ID: ${review.id}`);
        console.log(`     User ID: ${review.user_id}`);
        console.log(`     Product ID: ${review.product_id}`);
        console.log(`     –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${review.photos?.length || 0}`);
        console.log(`     –°–æ–∑–¥–∞–Ω: ${review.created_at.toLocaleDateString()}`);
        if (review.photos && review.photos.length > 0) {
          review.photos.forEach((photo, photoIndex) => {
            console.log(`       ${photoIndex + 1}. ${photo}`);
          });
        }
        console.log('');
      });
    }

    // –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('\nüìä –°–¢–ê–¢–£–° –ú–ò–ì–†–ê–¶–ò–ò:');
    if (activeStorageCount === 0 && newSystemPhotosCount === 0) {
      console.log('‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∏ –≤ —Å—Ç–∞—Ä–æ–π, –Ω–∏ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ');
    } else if (activeStorageCount > 0 && newSystemPhotosCount === 0) {
      console.log('‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ï—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ Active Storage, –Ω–æ –Ω–µ—Ç –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ');
      console.log(`   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: curl -X POST http://localhost:3000/api/webapp/reviews/migrate-photos`);
    } else if (activeStorageCount > 0 && newSystemPhotosCount > 0) {
      console.log('üîÑ –ß–∞—Å—Ç–∏—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—Å—Ç—å –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö');
      console.log(`   Active Storage: ${activeStorageCount} —Ñ–æ—Ç–æ`);
      console.log(`   –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: ${newSystemPhotosCount} —Ñ–æ—Ç–æ`);
    } else {
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkPhotoMigration(); 