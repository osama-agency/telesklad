import { prisma } from '../src/libs/prismaDb';

// –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π file_id –≤–∏–¥–µ–æ –∏–∑ Telegram
const VIDEO_FILE_ID = process.argv[2] || 'YOUR_VIDEO_FILE_ID_HERE';

async function updateVideoId() {
  try {
    if (VIDEO_FILE_ID === 'YOUR_VIDEO_FILE_ID_HERE') {
      console.log('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ file_id –≤–∏–¥–µ–æ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç:');
      console.log('   npm run script scripts/update-video-id.ts "FILE_ID"');
      return;
    }

    console.log('üìπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ first_video_id...');
    console.log('   –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', VIDEO_FILE_ID);
    
    const updated = await prisma.settings.update({
      where: { variable: 'first_video_id' },
      data: { 
        value: VIDEO_FILE_ID,
        updated_at: new Date()
      }
    });
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('   ID –∑–∞–ø–∏—Å–∏:', updated.id);
    console.log('   –ó–Ω–∞—á–µ–Ω–∏–µ:', updated.value);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    console.log('\nüìå –í–∏–¥–µ–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º');
    console.log('   –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –±–æ—Ç —Å–º–æ–∂–µ—Ç –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ file_id');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateVideoId();
