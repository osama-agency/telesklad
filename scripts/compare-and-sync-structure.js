const { spawn } = require('child_process');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const LOCAL_DB = {
  PGUSER: 'eldar',
  PGHOST: 'localhost',
  PGPORT: '5432',
  PGDATABASE: 'nextadmin'
};

const REMOTE_DB = {
  PGUSER: 'admin',
  PGPASSWORD: 'admin',
  PGHOST: '89.169.38.127',
  PGPORT: '5433',
  PGDATABASE: 'webapp_production'
};

async function executeSQL(sql, isRemote = false) {
  return new Promise((resolve, reject) => {
    const env = isRemote ? REMOTE_DB : LOCAL_DB;
    
    const child = spawn('psql', ['-c', sql, env.PGDATABASE], {
      stdio: ['pipe', 'pipe', 'pipe'],
      env: { ...process.env, ...env }
    });

    let output = '';
    let error = '';

    child.stdout.on('data', (data) => {
      output += data.toString();
    });

    child.stderr.on('data', (data) => {
      error += data.toString();
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve(output);
      } else {
        reject(new Error(`SQL Error: ${error || output}`));
      }
    });
  });
}

async function getTables(isRemote = false) {
  const sql = `SELECT tablename FROM pg_tables WHERE schemaname = 'public' ORDER BY tablename;`;
  const result = await executeSQL(sql, isRemote);
  
  // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const lines = result.split('\n');
  const tables = [];
  let inData = false;
  
  for (const line of lines) {
    if (line.includes('----')) {
      inData = true;
      continue;
    }
    if (inData && line.trim() && !line.includes('(') && !line.includes('rows')) {
      tables.push(line.trim());
    }
  }
  
  return tables;
}

async function getTableStructure(tableName, isRemote = false) {
  const sql = `
    SELECT 
      column_name,
      data_type,
      character_maximum_length,
      numeric_precision,
      numeric_scale,
      is_nullable,
      column_default
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = '${tableName}'
    ORDER BY ordinal_position;
  `;
  
  const result = await executeSQL(sql, isRemote);
  
  // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const lines = result.split('\n');
  const columns = [];
  let inData = false;
  
  for (const line of lines) {
    if (line.includes('----')) {
      inData = true;
      continue;
    }
    if (inData && line.includes('|')) {
      const parts = line.split('|').map(p => p.trim());
      if (parts[0] && parts[0] !== 'column_name') {
        columns.push({
          name: parts[0],
          type: parts[1],
          maxLength: parts[2],
          precision: parts[3],
          scale: parts[4],
          nullable: parts[5],
          default: parts[6]
        });
      }
    }
  }
  
  return columns;
}

async function getTableDDL(tableName) {
  const env = LOCAL_DB;
  
  return new Promise((resolve, reject) => {
    const child = spawn('pg_dump', [
      '--schema-only',
      '--no-owner',
      '--no-privileges',
      '--table=' + tableName,
      env.PGDATABASE
    ], {
      stdio: ['pipe', 'pipe', 'pipe'],
      env: { ...process.env, ...env }
    });

    let output = '';
    let error = '';

    child.stdout.on('data', (data) => {
      output += data.toString();
    });

    child.stderr.on('data', (data) => {
      error += data.toString();
    });

    child.on('close', (code) => {
      if (code === 0) {
        // –û—á–∏—â–∞–µ–º –æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–µ–≥–æ
        const cleanDDL = output
          .split('\n')
          .filter(line => 
            !line.startsWith('--') && 
            !line.includes('pg_dump') &&
            !line.includes('SET ') &&
            !line.includes('SELECT pg_catalog') &&
            line.trim() !== ''
          )
          .join('\n');
        resolve(cleanDDL);
      } else {
        reject(new Error(`pg_dump Error: ${error}`));
      }
    });
  });
}

function generateColumnSQL(column) {
  let sql = `${column.type}`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö —Ç—Ä–µ–±—É—é—Ç
  if (column.type === 'character varying' && column.maxLength) {
    sql = `VARCHAR(${column.maxLength})`;
  } else if (column.type === 'numeric' && column.precision) {
    sql = `NUMERIC(${column.precision}${column.scale ? ',' + column.scale : ''})`;
  } else if (column.type === 'character varying') {
    sql = 'VARCHAR';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º NULL/NOT NULL
  if (column.nullable === 'NO') {
    sql += ' NOT NULL';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º DEFAULT
  if (column.default && !column.default.includes('nextval')) {
    sql += ` DEFAULT ${column.default}`;
  }
  
  return sql;
}

async function compareAndSync() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ç–∞–±–ª–∏—Ü
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —Ç–∞–±–ª–∏—Ü...');
    const localTables = await getTables(false);
    const remoteTables = await getTables(true);
    
    console.log(`üìä –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞: ${localTables.length} —Ç–∞–±–ª–∏—Ü`);
    console.log(`üìä –£–¥–∞–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞: ${remoteTables.length} —Ç–∞–±–ª–∏—Ü\n`);

    // 2. –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const missingTables = localTables.filter(t => !remoteTables.includes(t));
    
    if (missingTables.length > 0) {
      console.log('üÜï –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ:');
      missingTables.forEach(t => console.log(`   - ${t}`));
      console.log('');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      for (const table of missingTables) {
        console.log(`üì¶ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ${table}...`);
        try {
          const ddl = await getTableDDL(table);
          if (ddl.includes('CREATE TABLE')) {
            await executeSQL(ddl, true);
            console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} —Å–æ–∑–¥–∞–Ω–∞`);
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}: ${error.message}`);
        }
      }
      console.log('');
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...\n');
    
    const commonTables = localTables.filter(t => remoteTables.includes(t));
    
    for (const table of commonTables) {
      const localColumns = await getTableStructure(table, false);
      const remoteColumns = await getTableStructure(table, true);
      
      const localColumnNames = localColumns.map(c => c.name);
      const remoteColumnNames = remoteColumns.map(c => c.name);
      
      const missingColumns = localColumns.filter(c => !remoteColumnNames.includes(c.name));
      
      if (missingColumns.length > 0) {
        console.log(`üìã –¢–∞–±–ª–∏—Ü–∞ ${table} - –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:`);
        
        for (const column of missingColumns) {
          console.log(`   - ${column.name} (${column.type})`);
          
          try {
            const columnSQL = generateColumnSQL(column);
            const alterSQL = `ALTER TABLE ${table} ADD COLUMN IF NOT EXISTS ${column.name} ${columnSQL};`;
            
            await executeSQL(alterSQL, true);
            console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü ${column.name}`);
          } catch (error) {
            console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ ${column.name}: ${error.message}`);
          }
        }
        console.log('');
      }
    }

    // 4. –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...\n');
    
    const criticalTables = ['purchases', 'purchase_items', 'expenses', 'exchange_rates', 'supplier_stats'];
    
    for (const table of criticalTables) {
      if (!remoteTables.includes(table)) {
        console.log(`‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ ${table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ`);
        
        if (localTables.includes(table)) {
          console.log(`   –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã...`);
          try {
            const ddl = await getTableDDL(table);
            if (ddl.includes('CREATE TABLE')) {
              await executeSQL(ddl, true);
              console.log(`   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`);
            }
          } catch (error) {
            console.log(`   ‚ö†Ô∏è  –û—à–∏–±–∫–∞: ${error.message}`);
          }
        }
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }

    console.log('\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('üí° –í—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—Ç–æ–ª–±—Ü—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —É–¥–∞–ª–µ–Ω–Ω—É—é –±–∞–∑—É');
    console.log('üîí –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
compareAndSync(); 