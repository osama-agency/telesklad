import { prisma } from '../src/libs/prismaDb';

async function restoreS3Images() {
  try {
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö S3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    // –°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ S3 (–ø—Ä–∏–º–µ—Ä—ã)
    const s3Images = [
      'https://s3.ru1.storage.beget.cloud/2c11548b454d-eldar-agency/products/1751022899083-1751022899083-0lxzgn.webp',
      'https://s3.ru1.storage.beget.cloud/2c11548b454d-eldar-agency/products/1751022899084-1751022899084-abc123.webp',
      'https://s3.ru1.storage.beget.cloud/2c11548b454d-eldar-agency/products/1751022899085-1751022899085-def456.webp',
      // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ä–µ–∞–ª—å–Ω—ã—Ö URL –∏–∑ –≤–∞—à–µ–≥–æ S3
    ];
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.products.findMany({
      where: {
        ancestry: {
          contains: '/'
        },
        show_in_webapp: true,
        deleted_at: null
      },
      take: 10 // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    });
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    for (let i = 0; i < Math.min(products.length, s3Images.length); i++) {
      const product = products[i];
      const imageUrl = s3Images[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      try {
        const response = await fetch(imageUrl, { method: 'HEAD' });
        if (response.ok) {
          await prisma.products.update({
            where: { id: product.id },
            data: { image_url: imageUrl }
          });
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä ${product.name} -> ${imageUrl}`);
        } else {
          console.log(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${imageUrl}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageUrl}`);
      }
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
    const remainingProducts = products.slice(s3Images.length);
    const fallbackImages = [
      'data:image/svg+xml;base64,' + Buffer.from(`
        <svg width="400" height="400" xmlns="http://www.w3.org/2000/svg">
          <rect width="400" height="400" fill="#4F46E5"/>
          <text x="200" y="200" text-anchor="middle" dy=".3em" fill="white" font-size="24" font-family="Arial">Medicine</text>
        </svg>
      `).toString('base64'),
      'data:image/svg+xml;base64,' + Buffer.from(`
        <svg width="400" height="400" xmlns="http://www.w3.org/2000/svg">
          <rect width="400" height="400" fill="#10B981"/>
          <text x="200" y="200" text-anchor="middle" dy=".3em" fill="white" font-size="24" font-family="Arial">Pills</text>
        </svg>
      `).toString('base64')
    ];
    
    for (let i = 0; i < remainingProducts.length; i++) {
      const product = remainingProducts[i];
      const imageUrl = fallbackImages[i % fallbackImages.length];
      
      await prisma.products.update({
        where: { id: product.id },
        data: { image_url: imageUrl }
      });
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä ${product.name} -> SVG –∑–∞–≥–ª—É—à–∫–∞`);
    }
    
    console.log('‚ú® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

restoreS3Images(); 