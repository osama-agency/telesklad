import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkBotSettings() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    const settings = await prisma.settings.findMany({
      where: {
        variable: {
          in: ['preview_msg', 'first_video_id', 'bot_btn_title', 'group_btn_title', 'tg_main_bot', 'admin_ids']
        }
      },
      orderBy: {
        variable: 'asc'
      }
    });
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    settings.forEach(setting => {
      console.log(`  ${setting.variable}: ${setting.value || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û'}`);
    });
    
    console.log('\nüîß –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    const foundVariables = settings.map(s => s.variable);
    const expectedVariables = ['preview_msg', 'first_video_id', 'bot_btn_title', 'group_btn_title', 'tg_main_bot', 'admin_ids'];
    
    expectedVariables.forEach(variable => {
      if (!foundVariables.includes(variable)) {
        console.log(`  ${variable}: –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkBotSettings(); 