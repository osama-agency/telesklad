import { PrismaClient } from '@prisma/client';
import { TelegramBotWorker } from '../src/lib/services/telegram-bot-worker.service';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' });
dotenv.config({ path: '.env' });

const prisma = new PrismaClient();

async function switchBotMode(mode: 'production' | 'test') {
  try {
    console.log(`üîÑ Switching to ${mode} bot mode...`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const tgTokenSetting = await prisma.settings.findFirst({
      where: { variable: 'tg_token' }
    });
    
    const webappTokenSetting = await prisma.settings.findFirst({
      where: { variable: 'webapp_telegram_bot_token' }
    });
    
    if (!tgTokenSetting?.value || !webappTokenSetting?.value) {
      console.error('‚ùå Bot tokens not found in database');
      return;
    }
    
    const token = mode === 'production' ? tgTokenSetting.value : webappTokenSetting.value;
    const botName = mode === 'production' ? '@strattera_bot' : '@strattera_test_bot';
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
    console.log('üóëÔ∏è Removing existing webhook...');
    const bot = TelegramBotWorker.getInstance();
    await bot.deleteWebhook();
    
    if (mode === 'production') {
      // –ü—Ä–æ–¥–∞–∫—à–µ–Ω –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ
      console.log('‚úÖ Production bot cleared. It should work on the old Rails server.');
      console.log('üìå Production bot:', botName);
      console.log('üìå Webhook should be set to Rails server URL');
    } else {
      // –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –≤ —Ä–µ–∂–∏–º–µ polling
      console.log('‚úÖ Test bot configured for local development');
      console.log('üìå Test bot:', botName);
      console.log('üìå Mode: Polling (local development)');
      console.log('');
      console.log('To use webhook with ngrok:');
      console.log('1. Run: ngrok http --domain=strattera.ngrok.app 3000');
      console.log('2. Run: npm run telegram:webhook:setup');
    }
    
    console.log('');
    console.log('üéØ Current configuration:');
    console.log(`NODE_ENV=${process.env.NODE_ENV || 'development'}`);
    console.log(`Active bot: ${botName}`);
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const mode = process.argv[2] as 'production' | 'test';

if (!mode || !['production', 'test'].includes(mode)) {
  console.error('Usage: tsx scripts/switch-bot-mode.ts [production|test]');
  process.exit(1);
}

switchBotMode(mode); 