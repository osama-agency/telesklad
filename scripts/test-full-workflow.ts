import { PrismaClient } from '@prisma/client';
import { SettingsService } from '../src/lib/services/SettingsService';
import { ReportService } from '../src/lib/services/ReportService';

const prisma = new PrismaClient();

async function testFullWorkflow() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow: –ó–∞–∫–∞–∑ ‚Üí –û–ø–ª–∞—Ç–∞ ‚Üí –û–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –û—Ç–ø—Ä–∞–≤–∫–∞\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    console.log('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
    
    const testUser = await prisma.users.findFirst({
      where: { tg_id: 125861752 } // –ê–¥–º–∏–Ω –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    });

    if (!testUser) {
      console.error('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const testOrder = await prisma.orders.create({
      data: {
        user_id: testUser.id,
        total_amount: 2500,
        status: 0, // unpaid
        deliverycost: 500,
        customeraddress: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        created_at: new Date(),
        updated_at: new Date(),
                 order_items: {
           create: [
             {
               product_id: BigInt(1), // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å ID 1
               quantity: 2,
               price: 1250,
               name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç',
               created_at: new Date(),
               updated_at: new Date()
             }
           ]
         }
      },
      include: {
        users: true,
        order_items: {
          include: {
            products: true
          }
        },
        bank_cards: true
      }
    });

    console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ‚Ññ${testOrder.id}`);

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤...');

    // –°—Ç–∞—Ç—É—Å: unpaid (0) ‚Üí paid (1)
    console.log('\n   üìù –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω (unpaid)...');
    await ReportService.handleOrderStatusChange(testOrder as any, -1);
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ paid
    const paidOrder = await prisma.orders.update({
      where: { id: testOrder.id },
      data: { status: 1, paid_at: new Date() },
      include: {
        users: true,
        order_items: {
          include: {
            products: true
          }
        },
        bank_cards: true
      }
    });

    console.log('   üí≥ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω (paid)...');
    await ReportService.handleOrderStatusChange(paidOrder as any, 0);
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ processing
    const processingOrder = await prisma.orders.update({
      where: { id: testOrder.id },
      data: { status: 2 },
      include: {
        users: true,
        order_items: {
          include: {
            products: true
          }
        },
        bank_cards: true
      }
    });

    console.log('   üîÑ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (processing)...');
    await ReportService.handleOrderStatusChange(processingOrder as any, 1);
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ shipped —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º
    const shippedOrder = await prisma.orders.update({
      where: { id: testOrder.id },
      data: { 
        status: 3, 
        tracking_number: 'TEST123456789',
        shipped_at: new Date()
      },
      include: {
        users: true,
        order_items: {
          include: {
            products: true
          }
        },
        bank_cards: true
      }
    });

    console.log('   üì¶ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (shipped)...');
    await ReportService.handleOrderStatusChange(shippedOrder as any, 2);

    console.log('\n‚úÖ Workflow –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!');
    console.log('\nüìã –ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏:');
    console.log('   1. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã');
    console.log('   2. –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É');
    console.log('   3. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è');
    console.log('   4. –ö—É—Ä—å–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑');
    console.log('   5. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');
    console.log('   6. –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä');
    console.log('   7. –ö—É—Ä—å–µ—Ä –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏');

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await prisma.order_items.deleteMany({
      where: { order_id: testOrder.id }
    });
    await prisma.orders.delete({
      where: { id: testOrder.id }
    });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testFullWorkflow(); 