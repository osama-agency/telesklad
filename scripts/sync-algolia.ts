#!/usr/bin/env ts-node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å Algolia
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run algolia:sync
 */

import { AlgoliaService } from '../src/lib/services/algolia.service';

async function syncAlgolia() {
  console.log('üöÄ Starting Algolia sync script...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.NEXT_PUBLIC_ALGOLIA_APP_ID) {
      throw new Error('NEXT_PUBLIC_ALGOLIA_APP_ID environment variable is required');
    }
    
    if (!process.env.NEXT_PUBLIC_ALGOLIA_SEARCH_KEY) {
      throw new Error('NEXT_PUBLIC_ALGOLIA_SEARCH_KEY environment variable is required');
    }
    
    console.log('‚úÖ Environment variables check passed');
    console.log(`üìç App ID: ${process.env.NEXT_PUBLIC_ALGOLIA_APP_ID}`);
    console.log(`üìç Index: ${process.env.NEXT_PUBLIC_ALGOLIA_INDEX_PRODUCTS || 'nextadmin_products'}`);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    const result = await AlgoliaService.syncProducts();
    
    console.log('‚úÖ Algolia sync completed successfully!');
    console.log('üìä Sync result:', result);
    
  } catch (error) {
    console.error('‚ùå Algolia sync failed:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –µ—Å–ª–∏ –æ–Ω –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  syncAlgolia();
}

export { syncAlgolia }; 