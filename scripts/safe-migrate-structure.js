const { spawn } = require('child_process');

async function executeSQL(sql, database = 'remote') {
  return new Promise((resolve, reject) => {
    const env = database === 'remote' 
      ? {
          PGUSER: 'admin',
          PGPASSWORD: 'admin', 
          PGHOST: '89.169.38.127',
          PGPORT: '5433'
        }
      : {
          PGUSER: 'eldar',
          PGHOST: 'localhost',
          PGPORT: '5432'
        };

    const dbName = database === 'remote' ? 'webapp_production' : 'nextadmin';
    
    const child = spawn('psql', ['-c', sql, dbName], {
      stdio: ['pipe', 'pipe', 'pipe'],
      env: { ...process.env, ...env }
    });

    let output = '';
    let error = '';

    child.stdout.on('data', (data) => {
      output += data.toString();
    });

    child.stderr.on('data', (data) => {
      error += data.toString();
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve(output);
      } else {
        reject(new Error(`SQL Error: ${error}`));
      }
    });
  });
}

async function safeMigrateStructure() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –ò –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –¢–ê–ë–õ–ò–¶–´
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π
    const tablesToCheck = [
      'Account',
      'ApiKey', 
      'Session',
      'VerificationToken',
      '_prisma_migrations',
      'exchange_rates',
      'expenses',
      'purchase_items',
      'purchases',
      'supplier_stats'
    ];

    for (const table of tablesToCheck) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ
        const result = await executeSQL(`SELECT to_regclass('public.${table}') as exists;`, 'remote');
        const exists = result.includes('(1 row)') && !result.includes('null');
        
        if (!exists) {
          console.log(`‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ ${table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
          try {
            const createStatement = await executeSQL(`pg_dump --schema-only --table=${table} nextadmin`, 'local');
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ
            const cleanStatement = createStatement
              .split('\n')
              .filter(line => 
                !line.startsWith('--') && 
                !line.includes('pg_dump') &&
                !line.includes('SET ') &&
                !line.includes('SELECT pg_catalog') &&
                line.trim() !== ''
              )
              .join('\n');
            
            if (cleanStatement.includes('CREATE TABLE')) {
              await executeSQL(cleanStatement, 'remote');
              console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ ${table}`);
            }
          } catch (error) {
            console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É ${table}: ${error.message}`);
          }
        } else {
          console.log(`üîÑ –¢–∞–±–ª–∏—Ü–∞ ${table} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${table}: ${error.message}`);
      }
    }

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –ò –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –°–¢–û–õ–ë–¶–´ –í PRODUCTS
    console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ products...');
    
    const productColumns = [
      { name: 'is_visible', type: 'BOOLEAN DEFAULT true' },
      { name: 'prime_cost', type: 'NUMERIC(10,2)' },
      { name: 'avgpurchasepricerub', type: 'NUMERIC(10,2)' },
      { name: 'avgpurchasepricetry', type: 'NUMERIC(10,2)' }
    ];

    for (const column of productColumns) {
      try {
        const result = await executeSQL(
          `SELECT column_name FROM information_schema.columns WHERE table_name = 'products' AND column_name = '${column.name}';`,
          'remote'
        );
        
        if (!result.includes(column.name)) {
          await executeSQL(
            `ALTER TABLE products ADD COLUMN IF NOT EXISTS ${column.name} ${column.type};`,
            'remote'
          );
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü products.${column.name}`);
        } else {
          console.log(`üîÑ –°—Ç–æ–ª–±–µ—Ü products.${column.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ —Å—Ç–æ–ª–±—Ü–æ–º ${column.name}: ${error.message}`);
      }
    }

    // 3. –ü–†–û–í–ï–†–Ø–ï–ú –ò –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –°–¢–û–õ–ë–¶–´ –í ORDERS
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü–µ orders...');
    
    const orderColumns = [
      { name: 'externalId', type: 'VARCHAR UNIQUE' },
      { name: 'customerName', type: 'VARCHAR' },
      { name: 'customerEmail', type: 'VARCHAR' },
      { name: 'customerPhone', type: 'VARCHAR' },
      { name: 'currency', type: 'VARCHAR DEFAULT \'RUB\'' },
      { name: 'orderDate', type: 'TIMESTAMP' },
      { name: 'bankCard', type: 'VARCHAR' },
      { name: 'customerCity', type: 'VARCHAR' },
      { name: 'deliveryCost', type: 'NUMERIC(10,2) DEFAULT 0' },
      { name: 'customerAddress', type: 'VARCHAR' }
    ];

    for (const column of orderColumns) {
      try {
        const result = await executeSQL(
          `SELECT column_name FROM information_schema.columns WHERE table_name = 'orders' AND column_name = '${column.name}';`,
          'remote'
        );
        
        if (!result.includes(column.name)) {
          // –î–ª—è externalId –Ω—É–∂–Ω–æ –æ—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑-–∑–∞ UNIQUE
          const columnDef = column.name === 'externalId' 
            ? `${column.name} ${column.type.replace(' UNIQUE', '')}`
            : `${column.name} ${column.type}`;
            
          await executeSQL(
            `ALTER TABLE orders ADD COLUMN IF NOT EXISTS ${columnDef};`,
            'remote'
          );
          
          // –î–æ–±–∞–≤–ª—è–µ–º UNIQUE constraint –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è externalId
          if (column.name === 'externalId') {
            try {
              await executeSQL(
                `ALTER TABLE orders ADD CONSTRAINT orders_externalId_unique UNIQUE (externalId);`,
                'remote'
              );
            } catch (e) {
              // Constraint –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            }
          }
          
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü orders.${column.name}`);
        } else {
          console.log(`üîÑ –°—Ç–æ–ª–±–µ—Ü orders.${column.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ —Å—Ç–æ–ª–±—Ü–æ–º ${column.name}: ${error.message}`);
      }
    }

    console.log('\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üí° –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –±–µ–∑ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
safeMigrateStructure(); 