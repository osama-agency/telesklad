const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkImages() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤...\n');
    
    const products = await prisma.products.findMany({
      where: {
        ancestry: { contains: '/' }
      },
      select: {
        id: true,
        name: true,
        image_url: true
      },
      orderBy: { name: 'asc' }
    });
    
    const withImages = products.filter(p => p.image_url);
    const withoutImages = products.filter(p => !p.image_url);
    
    console.log('=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===');
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
    console.log(`‚úÖ –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${withImages.length}`);
    console.log(`‚ùå –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${withoutImages.length}`);
    
    if (withImages.length > 0) {
      console.log('\n=== –¢–û–í–ê–†–´ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò ===');
      withImages.forEach(p => {
        console.log(`${p.id}: ${p.name}`);
        console.log(`   ‚Üí ${p.image_url}\n`);
      });
    }
    
    if (withoutImages.length > 0) {
      console.log('\n=== –¢–û–í–ê–†–´ –ë–ï–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===');
      withoutImages.slice(0, 10).forEach(p => {
        console.log(`${p.id}: ${p.name}`);
      });
      if (withoutImages.length > 10) {
        console.log(`... –∏ –µ—â–µ ${withoutImages.length - 10} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkImages(); 