#!/usr/bin/env tsx

import { RedisService } from '../src/lib/services/redis.service';
import { RedisQueueService } from '../src/lib/services/redis-queue.service';
import { CacheService } from '../src/lib/services/cache.service';

/**
 * –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis –¥–ª—è NEXTADMIN
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function initializeRedis() {
  console.log('üöÄ Starting NEXTADMIN with Redis integration...\n');

  try {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
    console.log('üì° Initializing Redis connection...');
    await RedisService.initialize();
    
    if (!RedisService.isAvailable()) {
      console.log('‚ö†Ô∏è  Redis not available - running in fallback mode');
      console.log('‚ÑπÔ∏è  Add UPSTASH_REDIS_REST_URL and UPSTASH_REDIS_REST_TOKEN to enable Redis\n');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ Redis
    console.log('üîç Checking Redis health...');
    const health = await RedisService.healthCheck();
    console.log(`‚úÖ Redis health: ${health.status} (latency: ${health.latency}ms)`);

    // 3. –ó–∞–ø—É—Å–∫–∞–µ–º Queue Worker
    console.log('‚öôÔ∏è  Starting Redis Queue Worker...');
    await RedisQueueService.startWorker();
    console.log('‚úÖ Queue Worker started successfully');

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await RedisQueueService.getQueueStats();
    console.log('\nüìä Current Queue Stats:');
    console.log(`   ‚Ä¢ Notifications: ${stats.notifications} jobs`);
    console.log(`   ‚Ä¢ Analytics: ${stats.analytics} jobs`);

    // 5. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (process.env.CLEAR_CACHE_ON_START === 'true') {
      console.log('\nüßπ Clearing old cache...');
      await CacheService.clearAllCache();
      console.log('‚úÖ Cache cleared');
    }

    console.log('\nüéâ Redis integration initialized successfully!');
    console.log('üìä Monitor Redis: http://localhost:3000/api/redis/status');
    console.log('üìñ Documentation: ./REDIS_INTEGRATION.md\n');

  } catch (error) {
    console.error('‚ùå Failed to initialize Redis:', error);
    console.log('‚ö†Ô∏è  Continuing without Redis - features will use fallback mode\n');
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Redis
 */
async function demonstrateRedis() {
  if (!RedisService.isAvailable()) {
    return;
  }

  console.log('üî¨ Redis Integration Demo:');

  try {
    // –î–µ–º–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n1. üì¶ Cache Demo:');
    await RedisService.setCache('demo:test', { message: 'Hello Redis!', timestamp: Date.now() }, 60);
    const cached = await RedisService.getCache('demo:test');
    console.log('   ‚úÖ Cached and retrieved:', cached);

    // –î–µ–º–æ —Å—á–µ—Ç—á–∏–∫–æ–≤
    console.log('\n2. üî¢ Counter Demo:');
    const count = await RedisService.increment('demo:counter', 3600);
    console.log(`   ‚úÖ Counter incremented to: ${count}`);

    // –î–µ–º–æ –æ—á–µ—Ä–µ–¥–∏
    console.log('\n3. üì® Queue Demo:');
    await RedisQueueService.addNotification('demo_notification', {
      message: 'Test notification',
      userId: 'demo_user'
    });
    console.log('   ‚úÖ Demo notification added to queue');

    // –î–µ–º–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    console.log('\n4. üìä Analytics Demo:');
    await RedisQueueService.addAnalyticsJob('user_activity', {
      userId: 'demo_user',
      action: 'page_view'
    });
    console.log('   ‚úÖ Demo analytics job added');

    console.log('\nüéØ Demo completed! Check /api/redis/status for real-time stats.\n');

  } catch (error) {
    console.error('‚ùå Demo failed:', error);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function checkEnvironment() {
  console.log('üîç Environment Check:');
  
  const requiredVars = [
    'DATABASE_URL',
    'NEXTAUTH_SECRET',
    'NEXTAUTH_URL'
  ];

  const optionalVars = [
    'UPSTASH_REDIS_REST_URL',
    'UPSTASH_REDIS_REST_TOKEN',
    'REDIS_URL'
  ];

  console.log('\n‚úÖ Required variables:');
  requiredVars.forEach(varName => {
    const value = process.env[varName];
    console.log(`   ${varName}: ${value ? '‚úÖ Set' : '‚ùå Missing'}`);
  });

  console.log('\nüì¶ Redis variables:');
  optionalVars.forEach(varName => {
    const value = process.env[varName];
    console.log(`   ${varName}: ${value ? '‚úÖ Set' : '‚ö†Ô∏è  Not set'}`);
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const hasUpstash = process.env.UPSTASH_REDIS_REST_URL && process.env.UPSTASH_REDIS_REST_TOKEN;
  const hasRedis = process.env.REDIS_URL;

  if (!hasUpstash && !hasRedis) {
    console.log('\n‚ö†Ô∏è  No Redis configuration found');
    console.log('‚ÑπÔ∏è  Redis features will be disabled');
    console.log('‚ÑπÔ∏è  Add Redis credentials to enable caching and queues');
  }

  console.log('');
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  switch (command) {
    case 'demo':
      await initializeRedis();
      await demonstrateRedis();
      process.exit(0);
      break;

    case 'check':
      checkEnvironment();
      await initializeRedis();
      process.exit(0);
      break;

    case 'clear-cache':
      await initializeRedis();
      if (RedisService.isAvailable()) {
        console.log('üßπ Clearing all cache...');
        await CacheService.clearAllCache();
        await RedisQueueService.clearAllQueues();
        console.log('‚úÖ Cache and queues cleared');
      }
      process.exit(0);
      break;

    default:
      // –û–±—ã—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      checkEnvironment();
      await initializeRedis();
      break;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Initialization failed:', error);
    process.exit(1);
  });
}

export { initializeRedis, demonstrateRedis, checkEnvironment }; 