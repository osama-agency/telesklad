const { PrismaClient } = require('@prisma/client');
const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');
const fs = require('fs');
const path = require('path');
const https = require('https');

const prisma = new PrismaClient();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è S3
const s3Client = new S3Client({
  region: 'ru-1',
  endpoint: 'https://s3.ru1.storage.beget.cloud',
  credentials: {
    accessKeyId: process.env.S3_ACCESS_KEY || '',
    secretAccessKey: process.env.S3_SECRET_KEY || '',
  },
  forcePathStyle: true,
});

const S3_BUCKET = '2c11548b454d-eldar-agency';
const S3_ENDPOINT = 'https://s3.ru1.storage.beget.cloud';

// –ú–∞–ø–ø–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏–∑ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
const productImageMapping = {
  'Abilify 30 mg': 'abilify-30mg.jpg',
  'Abilify 15 mg': 'abilify-15mg.jpg', 
  'Abilify 5 mg': 'abilify-5mg.jpg',
  'Arislow 1 mg': 'arislow-1mg.jpg',
  'Arislow 2 mg': 'arislow-2mg.jpg',
  'Arislow 3 mg': 'arislow-3mg.jpg',
  'Arislow 4 mg': 'arislow-4mg.jpg',
  'Atominex 10 mg': 'atominex-10mg.jpg',
  'Atominex 100 mg': 'atominex-100mg.jpg',
  'Atominex 18 mg': 'atominex-18mg.jpg',
  'Atominex 25 mg': 'atominex-25mg.jpg',
  'Atominex 40 mg': 'atominex-40mg.jpg',
  'Atominex 60 mg': 'atominex-60mg.jpg',
  'Atominex 80 mg': 'atominex-80mg.jpg',
  'Attex 10 mg': 'attex-10mg.jpg',
  'Attex 100 mg': 'attex-100mg.jpg',
  'Attex 18 mg': 'attex-18mg.jpg',
  'Attex 25 mg': 'attex-25mg.jpg',
  'Attex 4 mg (—Å–∏—Ä–æ–ø)': 'attex-4mg-syrup.jpg',
  'Attex 40 mg': 'attex-40mg.webp', // –£–∂–µ –µ—Å—Ç—å –≤ S3
  'Attex 60 mg': 'attex-60mg.jpg',
  'Attex 80 mg': 'attex-80mg.jpg',
  'Euthyrox 100 mcg': 'euthyrox-100mcg.jpg',
  'HHS A1 L-Carnitine Lepidium': 'hhs-a1.jpg',
  '–ú–∏—Ä–µ–Ω–∞ 20 –º–∫–≥/24 —á–∞—Å–∞': 'mirena.jpg',
  'Risperdal 1 Mg/ml —Å–∏—Ä–æ–ø': 'risperdal-syrup.jpg',
  'Salazopyrin 500 mg': 'salazopyrin-500mg.jpg'
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3
async function uploadToS3(buffer, fileName, contentType) {
  const key = `products/${Date.now()}-${fileName}`;
  
  const command = new PutObjectCommand({
    Bucket: S3_BUCKET,
    Key: key,
    Body: buffer,
    ContentType: contentType,
    ACL: 'public-read',
  });

  try {
    console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤ S3: ${fileName}`);
    await s3Client.send(command);
    const fileUrl = `${S3_ENDPOINT}/${S3_BUCKET}/${key}`;
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${fileUrl}`);
    return fileUrl;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${fileName}:`, error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
function downloadImage(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`HTTP ${response.statusCode}: ${url}`));
        return;
      }

      const chunks = [];
      response.on('data', (chunk) => chunks.push(chunk));
      response.on('end', () => resolve(Buffer.concat(chunks)));
      response.on('error', reject);
    }).on('error', reject);
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function uploadProductImages() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.products.findMany({
      where: {
        ancestry: { contains: '/' }
      },
      select: {
        id: true,
        name: true,
        image_url: true
      },
      orderBy: { name: 'asc' }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}\n`);

    let uploadedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;

    for (const product of products) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${product.name} (ID: ${product.id})`);

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å S3 URL
      if (product.image_url && product.image_url.includes('s3.ru1.storage.beget.cloud')) {
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é - —É–∂–µ –µ—Å—Ç—å S3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
        skippedCount++;
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const imageFileName = productImageMapping[product.name];
      if (!imageFileName) {
        console.log(`‚ö†Ô∏è  –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: ${product.name}`);
        errorCount++;
        continue;
      }

      try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ URL (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–µ–∂–∞—Ç –≤ GitHub –∏–ª–∏ –¥—Ä—É–≥–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ)
        // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–≥–ª—É—à–∫—É - –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL
        const imageUrl = `https://example.com/images/${imageFileName}`;
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const simpleImageBuffer = Buffer.from(`
          <svg width="400" height="400" xmlns="http://www.w3.org/2000/svg">
            <rect width="400" height="400" fill="#4F46E5"/>
            <text x="200" y="200" text-anchor="middle" dy=".3em" fill="white" font-size="16" font-family="Arial">${product.name}</text>
          </svg>
        `);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3
        const s3Url = await uploadToS3(
          simpleImageBuffer, 
          `${product.id}-${imageFileName.replace('.jpg', '.svg')}`,
          'image/svg+xml'
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await prisma.products.update({
          where: { id: product.id },
          data: { image_url: s3Url }
        });

        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: ${product.name}`);
        uploadedCount++;

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å S3
        await new Promise(resolve => setTimeout(resolve, 500));

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${product.name}:`, error.message);
        errorCount++;
      }
    }

    console.log('\nüìä –ò–¢–û–ì–ò:');
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${uploadedCount}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  uploadProductImages();
}

module.exports = { uploadProductImages }; 