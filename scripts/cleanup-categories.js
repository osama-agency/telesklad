const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function cleanupCategories() {
  console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const categoriesAsProducts = await prisma.product.findMany({
      where: {
        OR: [
          { ancestry: null },
          { 
            ancestry: {
              not: {
                contains: '/',
              },
            },
          },
        ],
      },
      select: {
        id: true,
        name: true,
        ancestry: true,
      }
    });

    if (categoriesAsProducts.length === 0) {
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
      return;
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${categoriesAsProducts.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`);
    console.table(categoriesAsProducts.map(p => ({ id: p.id, name: p.name, ancestry: p.ancestry || 'NULL' })));

    // –°–æ–±–∏—Ä–∞–µ–º ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const idsToDelete = categoriesAsProducts.map(p => p.id);

    // –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const deleteResult = await prisma.product.deleteMany({
      where: {
        id: {
          in: idsToDelete,
        },
      },
    });

    console.log(`üóëÔ∏è –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deleteResult.count} –∑–∞–ø–∏—Å–µ–π.`);

  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
  } finally {
    await prisma.$disconnect();
    console.log('–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
  }
}

cleanupCategories(); 