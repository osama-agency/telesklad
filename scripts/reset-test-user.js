#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

const TEST_USER_ID = 9999;

async function resetTestUser() {
  try {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('–£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏...');
    await prisma.product_subscriptions.deleteMany({
      where: { user_id: TEST_USER_ID }
    });

    console.log('–£–¥–∞–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...');
    await prisma.favorites.deleteMany({
      where: { user_id: TEST_USER_ID }
    });

    console.log('–£–¥–∞–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—ã...');
    await prisma.carts.deleteMany({
      where: { user_id: TEST_USER_ID }
    });

    console.log('–£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑—ã –∏ –∏—Ö —Ç–æ–≤–∞—Ä—ã...');
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º order_items
    const orders = await prisma.orders.findMany({
      where: { user_id: TEST_USER_ID },
      select: { id: true }
    });
    
    if (orders.length > 0) {
      const orderIds = orders.map(order => order.id);
      await prisma.order_items.deleteMany({
        where: { order_id: { in: orderIds } }
      });
    }
    
    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∑–∞–∫–∞–∑—ã
    await prisma.orders.deleteMany({
      where: { user_id: TEST_USER_ID }
    });

    console.log('–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await prisma.users.deleteMany({
      where: { id: TEST_USER_ID }
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    console.log('üí° –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –∫ /api/webapp/profile —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
resetTestUser(); 