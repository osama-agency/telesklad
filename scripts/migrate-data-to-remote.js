const { spawn } = require('child_process');
const fs = require('fs');

async function executeCommand(command, env = {}) {
  return new Promise((resolve, reject) => {
    const [cmd, ...args] = command.split(' ');
    const child = spawn(cmd, args, {
      stdio: 'inherit',
      env: { ...process.env, ...env },
      cwd: process.cwd()
    });

    child.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(`Command failed with code ${code}`));
      }
    });
  });
}

async function migrateData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –≤ —É–¥–∞–ª–µ–Ω–Ω—É—é...\n');

  const localDB = "postgresql://eldar@localhost:5432/nextadmin";
  const remoteDB = "postgresql://admin:admin@89.169.38.127:5433/webapp_production?sslmode=prefer";

  try {
    // 1. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
    console.log('üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã...');
    
    // –°–æ–∑–¥–∞–µ–º SQL –¥–∞–º–ø —Å –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ DROP –∏ CREATE)
    await executeCommand(`pg_dump --data-only --inserts --on-conflict-do-nothing --file=local_data.sql nextadmin`, {
      PGUSER: 'eldar',
      PGHOST: 'localhost',
      PGPORT: '5432'
    });
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ local_data.sql');

    // 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–∞–ª–µ–Ω–Ω—É—é –±–∞–∑—É
    console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–∞–ª–µ–Ω–Ω—É—é –±–∞–∑—É...');
    
    try {
      await executeCommand(`psql --file=local_data.sql webapp_production`, {
        PGUSER: 'admin',
        PGPASSWORD: 'admin',
        PGHOST: '89.169.38.127',
        PGPORT: '5433'
      });
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —É–¥–∞–ª–µ–Ω–Ω—É—é –±–∞–∑—É!');
    } catch (error) {
      console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
      console.log('üìã –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
      await executeCommand(`psql -c "SELECT 'users' as table_name, count(*) FROM users UNION SELECT 'products', count(*) FROM products UNION SELECT 'orders', count(*) FROM orders;" webapp_production`, {
        PGUSER: 'admin',
        PGPASSWORD: 'admin',
        PGHOST: '89.169.38.127',
        PGPORT: '5433'
      });
    }

    // 3. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if (fs.existsSync('local_data.sql')) {
      fs.unlinkSync('local_data.sql');
      console.log('üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
    }

    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (fs.existsSync('local_data.sql')) {
      fs.unlinkSync('local_data.sql');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateData(); 